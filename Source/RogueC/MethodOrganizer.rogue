module RogueC

class MethodOrganizer : Visitor, Poolable
  PROPERTIES
    catches = Catch[]

  METHODS
    method reset
      catches.clear

    method on_return_to_pool
      reset

    method visit( this_type, class_def:Cmd )
      # Called when instantiating a template
      visit( class_def )

    method on( cmd:Try )->Cmd
      catches.add( forEach in cmd.catches )
      visit_content( cmd )
      local result = validate( cmd )
      catches.discard_from( catches.count - cmd.catches.count )
      return result

    method on_visit( cmd:Class )
      if (cmd.constructor_properties and not this_type.is_enum)
        if (this_type.is_object)
          # Generate an init() method off the constructor properties.
          local m_init = Method( cmd.t, "init" )
          m_init.parameters.add( forEach in cmd.constructor_properties )
          on( m_init )

        elseIf (this_type.is_compound)
          # Generate a create() global method as the "primary constructor".
          local m_create = GlobalMethod( cmd.t, "create", &return_type=this_type )
          m_create.attributes.is_primary = true
          m_create.parameters.add( forEach in cmd.constructor_properties )
          m_create.statements.add( Return(cmd.t, CreateCompound(cmd.t,this_type)) )
          this_type.m_primary_constructor = m_create
          on( m_create )
        endIf
      endIf

      visit_children( cmd )

    method on_visit( cmd:GlobalMethod )
      cmd.module_context = this_module
      cmd.type_context = this_type
      cmd.organize

    method on_visit( cmd:GlobalMethodTemplate )
      local name = "$<<$>>"(cmd.name,cmd.placeholders.count)
      this_type.global_method_templates.add( name, cmd )

    method on_visit_children( cmd:Local )
      prior.on_visit_children( cmd )
      cmd.initial_value = visit( cmd.initial_value )

    method on_visit( cmd:Method )
      cmd.module_context = this_module
      cmd.type_context = this_type
      cmd.generate_body
      cmd.organize
      if (this_type.is_compound and cmd.name == "init")
        throw cmd.t.error(
            "Compounds and primitives cannot have init() methods. Add global method create$->$ instead." ...
            (cmd.signature.rightmost(-4),this_type)
        )
      endIf

    method on_visit( cmd:MethodTemplate )
      local name = "$<<$>>"(cmd.name,cmd.placeholders.count)
      cmd.type_context = this_type
      this_type.method_templates.add( name, cmd )

    method on_visit_children( cmd:Statements )
      forEach (element in writer=cmd.list.rewriter)
        local visited_element = visit( element )
        if (visited_element)
          if (visited_element instanceOf Statements)
            writer.write( forEach in visited_element )
          else
            writer.write( visited_element )
          endIf
        endIf
      endForEach

    method on_visit( cmd:TemplatedAccess )
      assert this_module
      cmd.module_context = this_module
      cmd.type_context = this_type
      visit_children( cmd )

    method on_visit( cmd:This )
      assert this_procedure
      if (not this_procedure.is_method)
        throw cmd.t.error( "'this' can only be referenced in an object method." )
      endIf
      cmd.this_type = this_type

endClass
