$include "Augment.rogue"

class Program [essential singleton]
  PROPERTIES
    code_prefix  = "Rogue"
    program_name = "Rogue_program"

    unique_integer : Int32

    is_resolving   : Logical

    template_list   = Template[]
    template_lookup = Table<<String,Template>>()

    module_names = Set<<String>>()
    module_as_name_to_instance_name = StringTable<<String>>()

    module_templates       = StringTable<<ModuleTemplate>>()
    module_instance_list   = ModuleInstance[]
    module_instance_lookup = StringTable<<ModuleInstance>>()
    exported_modules       = StringTable<<StringLookupList>>()

    augment_lookup = Table<<String,Augment[]>>()
    #essential_list = essentialItem[]

    m_on_launch        : Method
    m_run_tests        : Method
    global_vars        = StringTable<<Property>>()

    native_header = String[]
    native_code   = String[]

    methods_by_signature = Table<<String,Method[]>>()

    type_list       = Type[]                 : Type[]
    type_lookup     = Table<<String,Type>>() : Table<<String,Type>>

    type_null          : Type
    type_Real64        : Type
    type_Real32        : Type
    type_Int64         : Type
    type_Int32         : Type
    type_Character     : Type
    type_Byte          : Type
    type_Logical       : Type

    type_Object        : Type
    type_String        : Type
    type_Array         : Type
    type_GenericList   : Type
    type_Global        : Type
    type_Exception     : Type
    type_WeakReference : Type
    type_Value         : Type
    type_VarArgs       : Type
    type_TypeInfo      : Type
    type_MethodInfo    : Type
    m_MethodInfo_call  : Method
    type_Metacode      : Type

    type_StringBuilder : Type

    type_NativeLock  : Type

    literal_string_lookup = Table<<String,Int32>>() : Table<<String,Int32>>
    literal_string_list   = String[]

    string_buffer      = StringBuilder()
    ids_by_module      = Table<<String,String[]>>()
    module_id_maps     = StringTable<< StringTable<<String>> >>()
    globals_by_module  = Table<<String,String[]>>()
    module_global_maps = StringTable<< StringTable<<String>> >>()

    types_resolved : Logical

    vm = VM()
    metacode_hooks = StringTable<<CmdStatementList[]>>()

    methods_requiring_resolve = Method[]
    # Used by MethodTemplates

  METHODS
    method add_exported_module( module_id:String, exported_id:String )
      if (module_id is null)
        module_id = "::"
      else
        local full_name = module_as_name_to_instance_name[ module_id ]
        if (full_name) module_id = full_name
      endIf
      ensure @exported_modules[ module_id ]
      exported_modules[ module_id ].add( exported_id )

    method add_literal_string( value:String )->Int32
      if (not value) return 0

      local entry = literal_string_lookup.find( value )
      if (entry)
        return entry.value
      else
        local index = literal_string_list.count
        literal_string_lookup[value] = index
        literal_string_list.add( value )
        return index
      endIf

    method add_module_id( module_name:String, id_name:String )
      if (module_name is null) module_name = "::"
      local list = ids_by_module[ module_name ]
      if (not list)
        list = String[]
        ids_by_module[ module_name ] = list
      endIf
      list.add( id_name )

    method add_module_global( module_name:String, global_name:String )
      local list = globals_by_module[ module_name ]
      if (not list)
        list = String[]
        globals_by_module[ module_name ] = list
      endIf
      list.add( global_name )

    method exported_modules( module_name:String )->StringLookupList
      if (module_name is null) module_name = "::"
      return @exported_modules[ module_name ]

    method module_id_map( module_name:String )->StringTable<<String>>
      local existing = module_id_maps[ module_name ]
      if (existing) return existing

      local id_map = StringTable<<String>>()
      module_id_maps[ module_name ] = id_map

      # Add module name (e.g. A, A::B) to all IDs in that module (e.g. x, y)
      # to get e.g. A::x, A::y, A::B::x, A::B::y, etc.
      local module_ids = ids_by_module[ module_name ]
      if (module_ids)
        forEach (m_id in module_ids)
          id_map[ m_id ] = "$::$" (module_name,m_id)
        endForEach
      endIf

      # Find modules that contain this module name as a subset and add
      # in relative mappings.  So for used module A, find A::B containing
      # x and y and create mappings B::y and B::y.
      forEach (submodule_name in ids_by_module.keys)
        if (submodule_name.begins_with(module_name) and submodule_name != module_name)
          local relative_path = submodule_name.rightmost( -(module_name.count + 2) ) + "::"
          forEach (m_id in ids_by_module[submodule_name])
            id_map[ relative_path + m_id ] = "$::$" (submodule_name,m_id)
          endForEach
        endIf
      endForEach

      return id_map

    method module_global_map( module_name:String )->StringTable<<String>>
      local existing = module_global_maps[ module_name ]
      if (existing) return existing

      local global_map = StringTable<<String>>()
      module_global_maps[ module_name ] = global_map

      # Add module name (e.g. A, A::B) to all IDs in that module (e.g. x, y)
      # to get e.g. A::x, A::y, A::B::x, A::B::y, etc.
      local module_globals = globals_by_module[ module_name ]
      if (module_globals)
        forEach (m_id in module_globals)
          if (module_name.count)
            global_map[ m_id ] = "$::$" (module_name,m_id)
          else
            global_map[ m_id ] = m_id
          endIf
        endForEach
      endIf

      # Find modules that contain this module name as a subset and add
      # in relative mappings.  So for used module A, find A::B containing
      # x and y and create mappings B::y and B::y.
      if (module_name.count)
        forEach (submodule_name in globals_by_module.keys)
          if (submodule_name.begins_with(module_name) and submodule_name != module_name)
            local relative_path = submodule_name.rightmost( -(module_name.count + 2) ) + "::"
            forEach (m_id in globals_by_module[submodule_name])
              global_map[ relative_path + m_id ] = "$::$" (submodule_name,m_id)
            endForEach
          endIf
        endForEach
      endIf

      return global_map

    method add_template( template:Template )
      local existing_template = template_lookup[ template.name ]

      contingent
        local param_count = template.type_parameter_count
        sufficient (not existing_template)
        necessary (param_count != existing_template.type_parameter_count)

        if (not existing_template.alternates_by_param_count)
          existing_template.alternates_by_param_count = Table<<Int32,Template>>()
        endIf
        necessary (not existing_template.alternates_by_param_count.contains(param_count))

        existing_template.alternates_by_param_count[ param_count ] = template
        escapeContingent

      satisfied
        template_list.add( template )
        template_lookup[ template.name ] = template

      unsatisfied
        # We have an illegal standard class.
        throw template.t.error( "A class named $ already exists." (template.name) )

      endContingent

    method invoke_metacode( hook:String, context:Object )->Value
      # Passing a callback method name instead of a function to avoid frequent function object
      # instantiation overhead when metacode infrequently injects source.
      local list = metacode_hooks[ hook ]
      local result = UndefinedValue : Value
      if (list)
        forEach (cmd in list)
          local cur_result = vm.execute( context, cmd )
          if (result.is_undefined) result = cur_result
          else result = @[ result, cur_result ]

          if (vm.inject.count)
            local new_filepath = "$ - Meta:$" (vm.t.filepath,vm.t.line)
            local source = vm.inject->String
            vm.inject.clear
            RogueC.parse( new_filepath, source )
          endIf
        endForEach
      endIf
      return result

    method configure
      type_null          = create_built_in_type( "null",      Attribute.is_class )
      type_Real64        = create_built_in_type( "Real64",    Attribute.is_primitive )
      type_Real32        = create_built_in_type( "Real32",    Attribute.is_primitive )
      type_Int64         = create_built_in_type( "Int64",     Attribute.is_primitive )
      type_Int32         = create_built_in_type( "Int32",     Attribute.is_primitive )
      type_Character     = create_built_in_type( "Character", Attribute.is_primitive )
      type_Byte          = create_built_in_type( "Byte",      Attribute.is_primitive )
      type_Logical       = create_built_in_type( "Logical",   Attribute.is_primitive )
      type_NativeLock    = create_built_in_type( "NativeLock",Attribute.is_primitive )

      type_Object        = create_built_in_type( "Object", Attribute.is_native | Attribute.is_class )
      type_String        = create_built_in_type( "String", Attribute.is_native | Attribute.is_class )
      type_StringBuilder = create_built_in_type( "StringBuilder", Attribute.is_class )
      type_Array         = create_built_in_type( "Array", Attribute.is_native | Attribute.is_class )
      type_GenericList   = create_built_in_type( "GenericList", Attribute.is_class )
      type_Global        = create_built_in_type( "Global", Attribute.is_class )
      type_Exception     = create_built_in_type( "Exception", Attribute.is_class )
      type_WeakReference = create_built_in_type( "WeakReference", Attribute.is_class )
      type_Value         = create_built_in_type( "Value", Attribute.is_class )
      type_VarArgs       = create_built_in_type( "VarArgs", Attribute.is_class )
      type_TypeInfo      = create_built_in_type( "TypeInfo", Attribute.is_class )
      type_MethodInfo    = create_built_in_type( "MethodInfo", Attribute.is_class )
      type_Metacode      = create_built_in_type( "Metacode", Attribute.is_class )

      # `simplify_name` means e.g. `RogueObject` instead of `RogueClassObject`.
      type_Exception.simplify_name = true
      type_Object.simplify_name = true
      type_String.simplify_name = true
      type_StringBuilder.simplify_name = true
      type_WeakReference.simplify_name = true
      type_TypeInfo.simplify_name = true

      type_null.organized = true
      type_null.is_defined   = true

      type_NativeLock.is_defined = true

      type_Metacode.organized  = true
      type_Metacode.is_defined = true

      # Ensure that "" is the first literal string
      literal_string_list.add( "" )
      literal_string_lookup[ "" ] = 0

    method create_unique_id->String
      return "_auto_" + next_unique_integer

    method get_on_launch_method( t:Token )->Method
      local type_global = get_type_reference( t, "Global" )
      if (not m_on_launch)
        m_on_launch = Method( t, type_global, "on_launch" )
        if (RogueC.run_tests)
          m_on_launch.statements.add( CmdAccess(t,"run_tests") )
          get_run_tests_method( t )
        endIf
        m_on_launch.statements.add( m_on_launch.begin_label(t,"insert",false) )
        m_on_launch.make_essential
      endIf
      return m_on_launch

    method get_run_tests_method( t:Token )->Method
      local type_global = get_type_reference( t, "Global" )
      if (not m_run_tests)
        m_run_tests = Method( t, type_global, "run_tests" )
        m_run_tests.statements.add( m_run_tests.begin_label(t,"insert",false) )
        m_run_tests.make_essential
      endIf
      return m_run_tests

    method next_unique_integer->Int32
      ++unique_integer
      return unique_integer - 1

    method find_template( name:String )->Template
      local template : Template

      which (name.last)
        case '?'
          if (find_type(name.leftmost(-1))) return template_lookup[ "Optional" ]
          else return null
        case ']'
          template = template_lookup[ "List" ]
        others
          template = template_lookup[ name.before_first('<') ]
      endWhich

      if (template) return template.best_alternate_for_type( name )

      return null

    method find_type( name:String )->Type
      local type = type_lookup[ name ]
      if (type) return type

      local template = find_template( name )
      if (template)
        type = Type( template.t, name )
        type.attributes.add( template.attributes )
        type_lookup[name] = type
        return type
      endIf

      return null

    method get_type_reference( t:Token, name:String )->Type
      local type = type_lookup[ name ]
      if (type) return type
      type = Type( t, name )
      type_lookup[name] = type
      local template = find_template( name )
      if (template) type.attributes.add( template.attributes )

      return type

    method get_callback_type_signature( parameter_types:Type[] )->String
      string_buffer.clear.print( "(" )
      if (parameter_types)
        local first = true
        forEach (type in parameter_types)
          if (first) first = false
          else       string_buffer.print( ',' )
          string_buffer.print( type.name )
        endForEach
      endIf
      string_buffer.print( ')' )
      return string_buffer->String

    method get_callback_type_reference( t:Token, parameter_types:Type[], return_type:Type )->Type
      local name = "(Function" + get_callback_type_signature( parameter_types )
      if (return_type) name += "->$" (return_type.name)
      name += ')'

      local type = get_type_reference( t, name )
      if (type.is_defined) return type

      type.is_defined = true
      type.callback_parameter_types = parameter_types
      type.callback_return_type = return_type
      type.is_function = true
      type.attributes.add( Attribute.is_class )
      local m_call = type.add_method( t, "call" )
      if (parameter_types)
        forEach (i of parameter_types) m_call.add_parameter( t, "param"+(i+1), parameter_types[i] )
      endIf
      if (return_type)
        m_call.return_type = return_type
        m_call.statements.add( CmdReturn(t,CmdDefaultValue(t,return_type)) )
      endIf

      return type

    method is_type_used( name:String )->Logical
      local type = type_lookup[ name ]
      if (not type) return false
      return type.is_defined and type.is_used

    method create_built_in_type( name:String, attributes=0:Int32 )->Type
      local t = TokenType("Internal").create_token( "[Built-in Type]", 0, 0 )
      local type = get_type_reference( t, name )
      type.attributes.add( attributes )
      return type

    method make_fully_essential( m:Method )->Logical
      if (m.is_nonAPI) return false

      local r = m.is_essential == false
      if (m.is_api and not m.type_context.is_essential)
        r = true
        make_fully_essential(m.type_context)
      endIf
      m.attributes.add( Attribute.is_essential )
      if (m.return_type and make_fully_essential( m.return_type ) )
        r = true
      endIf
      forEach (p in m.parameters)
        if (make_fully_essential( p.type ))
          r = true
        endIf
      endForEach
      return r

    method make_fully_essential( methods:Method[] )->Logical
      local r = false
      forEach (m in methods)
        if (make_fully_essential( m ))
          r = true
        endIf
      endForEach
      return r

    method make_fully_essential( t:Type )->Logical
      local r = t.is_essential == false
      t.attributes.add( Attribute.is_essential )
      return r

    method add_global_var( p:Property )
      if (global_vars.contains(p.name))
        throw p.t.error( "A global variable named $ already exists." (p.name) )
      endIf
      global_vars[ p.name ] = p

    method process_global_var( p:Property )
      if (not p.type or p.type is Program.type_null)
        if (p.initial_value)
          p.type = p.initial_value.implicit_type( Scope(type_Global,null) )
          if (not p.type or p.type is Program.type_null)
            local mesg = "Cannot infer the type of the global property from its initial value.  Assign a type by appending ': TypeName' to the end of the declaration."
            throw p.t.error( mesg )
          endIf
        else
          local mesg = "Cannot determine the type of the global property - either assign an initial value (global $ = ...) or assign a type (global $ : Int32)." (p.name,p.name)
          throw p.t.error( mesg )
        endIf
      endIf
      type_Global.add_global( p )

    method resolve
      is_resolving = true

      # Bring attributes up to date for dummy types in type_lookup
      forEach (type in type_lookup)
        if (not type.is_defined)
          local template = Program.find_template( type.name )
          if (template) type.attributes.add( template.attributes )
        endIf
      endForEach

      invoke_metacode( "Program.resolve", this )

      type_Global.add_method( get_on_launch_method(type_Global.t) )
      m_on_launch.statements.add( m_on_launch.begin_label(m_on_launch.t,"append",false) )
      type_Global.add_method( get_run_tests_method(type_Global.t) )

      process_global_var( forEach in global_vars )

      type_null.configure
      type_Global.configure
      type_Exception.configure
      type_Real64.configure
      type_Real32.configure
      type_Int64.configure
      type_Int32.configure
      type_Character.configure
      type_Byte.configure
      type_Logical.configure
      type_Global.configure
      type_Object.configure
      type_Array.configure
      type_NativeLock.configure
      type_GenericList.configure
      type_String.configure

      type_null.resolve
      type_Global.organize
      type_Exception.resolve
      type_Real64.resolve
      type_Real32.resolve
      type_Int64.resolve
      type_Int32.resolve
      type_Character.resolve
      type_Byte.resolve
      type_Logical.resolve
      type_Global.resolve

      type_Object.resolve
      type_Array.resolve
      type_NativeLock.resolve
      type_GenericList.resolve
      type_String.resolve

      types_resolved = false
      while (not types_resolved)
        if (RogueC.all_essential)
          forEach (t in type_lookup)
            if (not t.name.contains('$'))
              t.configure
            endIf
          endForEach
        endIf

        # Reference and resolve all essential type templates
        forEach (templ in template_list)
          if (not templ.name.contains('$'))
            if (RogueC.all_api)
              templ.attributes.add( Attribute.is_api )
            endIf
            if (RogueC.all_essential)
              templ.attributes.add( Attribute.is_api )
              templ.attributes.add( Attribute.is_essential )
              if (not templ.type_parameters)
                local t = get_type_reference( templ.t, templ.name )
                t.configure
              endIf
            endIf
            if ((templ.is_essential) and not templ.type_parameters)
              get_type_reference( templ.t, templ.name ).resolve
            endIf
          endIf
        endForEach

        types_resolved = resolve_types

        # In non-threaded mode, make sure NativeLock isn't essential.  This
        # should cause it to get culled, which is important because the
        # underlying C++ type isn't defined in this case!
        if (RogueC.thread_mode == ThreadMode.NONE)
          type_NativeLock.attributes.flags &= !Attribute.is_essential
          type_NativeLock.attributes.flags &= !Attribute.is_api
        endIf

        # Give plug-ins a chance to generate new classes before we're done
        forEach (plugin in RogueC.plugins)
          if (plugin.generate_additional_types) types_resolved = false
        endForEach

        invoke_metacode( "Program.resolved_types", this )

        if (types_resolved)
          if (not cull_unused_code) types_resolved = false
        endIf
      endWhile

      reorder_compounds

      validate

      invoke_metacode( "Program.resolved", this )

    method resolve_types->Logical
      local types_resolved = true

      # Organize non-extended types which in turn will organize all base types
      local i = 0
      while (i < type_list.count)
        local t = type_list[i]
        if (t.extended_types.count == 0) t.organize
        ++i
      endWhile

      i = 0
      while (i < type_list.count)
        local t  = type_list[i]
        t.resolve

        if (t.is_api)
          if ( make_fully_essential( type_list[i]) ) types_resolved = false

          if (make_fully_essential( t.global_method_list )) types_resolved = false
          if (make_fully_essential( t.method_list )) types_resolved = false

          forEach (p in t.property_list)
            if (make_fully_essential( p.type )) types_resolved = false
          endForEach
          forEach (p in t.global_list)
            if (make_fully_essential( p.type )) types_resolved = false
          endForEach
        endIf
        ++i
        if (i == type_list.count)
          # Re-resolve Global.run_tests() as the last thing since various methods add unit
          # tests and such to it.
          if (m_run_tests)
            m_run_tests.resolved = false
            m_run_tests.resolve
          endIf
        endIf
      endWhile

      # Run through type list one more time and look for unresolved methods. This can
      # happen when method templates are instanced late in the process
      forEach (type in type_list)
        if (type.resolve_methods(&final_pass))
          types_resolved = false
        endIf
      endForEach

      return types_resolved

    method validate
      # Perform miscellaneous program structure validation
      (forEach in type_list).validate

      forEach (type in type_list)
        contingent
          necessary (type.name.begins_with("Optional"))
          necessary (not type.name.begins_with("Optional<<"))
          necessary (type.name > "Optional")
          local base_name = type.name.after_first("Optional")
          necessary (Program.type_lookup.contains("$?"(base_name)))
          throw type.t.error(
            "Illegal type name '$' - generated C++ name will be "(type.name) +
            "indistinguishable from C++ name for type '$?'."(base_name)
          )
        endContingent
      endForEach

      # Warn on use of deprecated classes and methods
      local deprecated_types : Set<<Type>>
      local deprecated_methods : Set<<Method>>
      forEach (type in type_list)
        if (type.is_used)
          if (type.is_deprecated)
            if (not (ensure deprecated_types).contains(type))
              deprecated_types.add( type )
              print( "**WARNING** Using deprecated type " ).print( type.name )
              if (type.deprecated_message) print( ", " ).print( type.deprecated_message )
              println( '.' )
            endIf
          endIf

          forEach (m in type.global_method_list)
            if (m.is_used and m.is_deprecated)
              if (not (ensure deprecated_methods).contains(m))
                deprecated_methods.add( m )
                print( "**WARNING** Using deprecated method " ).print( m.type_context.name ).print( '.' ).print( m.signature )
                if (m.deprecated_message) print( ", " ).print( m.deprecated_message )
                println( '.' )
              endIf
            endIf
          endForEach

          forEach (m in type.method_list)
            if (m.is_used and m.is_deprecated)
              if (not (ensure deprecated_methods).contains(m))
                deprecated_methods.add( m )
                print( "**WARNING** Using deprecated method " ).print( m.type_context.name ).print( '.' ).print( m.signature )
                if (m.deprecated_message) print( ", " ).print( m.deprecated_message )
                println( '.' )
              endIf
            endIf
          endForEach
        endIf
      endForEach

    method reorder_compounds
      # Source code for compounds and exception types is generated in the same order that they
      # appear in the type_list.  If compound B is defined before A *and* B has properties of
      # type A then it results in an error.  Reorder compounds and exceptions so that such
      # dependencies occur earlier in the list.

      # Collect all compound and exception types from the type list in dependency order
      local compound_types  = Type[]
      local exception_types = Type[]
      forEach (type in type_list)
        if (type.is_compound)
          collect_compound_dependencies( type, compound_types )
        elseIf (type.instance_of(Program.type_Exception))
          collect_inheritance_chain( type, exception_types )
        endIf
      endForEach

      # Remove all collected types
      local write_i = 0
      forEach (read_i of type_list)
        local type = type_list[ read_i ]
        if (type.index != -1)
          type_list[ write_i ] = type
          type.index = write_i
          ++write_i
        endIf
      endForEach
      type_list.discard_from( write_i )

      # Add all exceptions types back in
      forEach (type in exception_types)
        type.index = type_list.count
        type_list.add( type )
      endForEach

      # Add all compound types back in
      forEach (type in compound_types)
        type.index = type_list.count
        type_list.add( type )
      endForEach

    method collect_compound_dependencies( type:Type, compound_types:Type[] )
      if (type.index == -1) return  # already collected
      type.index = -1

      forEach (p in type.property_list)
        if (p.type.is_compound) collect_compound_dependencies( p.type, compound_types )
      endForEach
      compound_types.add( type )

    method collect_inheritance_chain( type:Type, types:Type[] )
      if (type.index == -1) return  # already collected
      type.index = -1

      if (type.base_class) collect_inheritance_chain( type.base_class, types )
      types.add( type )

    method cull_unused_code->Logical
      # Returns true if culling complete or false if a new dependency injection means
      # we need to go back and resolve new types.
      forEach (type in type_list)
        if (type.is_essential and not type.is_used) type.trace_used_code
      endForEach

      trace_overridden_methods

      # Activate any dependencies - native code, essentials
      local injected_dependencies = false
      forEach (type in type_list)
        if (type.is_used)
          if (type.dependencies)
            type.dependencies.resolve( Scope(type,null) )
            if (DependencyInjectionVisitor().inject_dependencies( type.dependencies )) injected_dependencies = true
            type.dependencies = null
          endIf

          forEach (m in type.global_method_list)
            if (m.is_used)
              if (DependencyInjectionVisitor().inject_dependencies( m.statements )) injected_dependencies = true
            endIf
          endForEach

          forEach (m in type.method_list)
            if (m.is_used)
              if (DependencyInjectionVisitor().inject_dependencies( m.statements )) injected_dependencies = true
            endIf
          endForEach

        endIf
      endForEach
      if (injected_dependencies) return false

      if (Program.using_introspection_value_calls)
        # Make sure the Boxed version of any used compound is made essential
        local added_new_boxed_types = false
        forEach (type in type_list)
          if (type.is_used and type.is_compound)
            local boxed_type = Program.get_type_reference( type.t, "Boxed<<$>>" (type.name) )
            boxed_type.make_essential
          endIf
        endForEach
        if (added_new_boxed_types) return false

        if (IntrospectionCallManager.generate_call_handlers)
          return false  # not done yet, run another iteration
        endIf
      endIf

      forEach (type in type_list)
        type.cull_unused_methods
      endForEach

      local write_i = 0
      forEach (read_i of type_list)
        local type = type_list[ read_i ]
        if (not type.should_cull)
          type_list[ write_i ] = type
          type.index = write_i
          ++write_i
        endIf
      endForEach
      type_list.discard_from( write_i )

      return true

    method trace_overridden_methods
      # When we have "s = Circle() : Shape; println s.area()", only Shape.area()
      # is initially visible through code tracing.  We track all of the overrides for
      # a method but we don't want to trace them unless the type context is in use.
      # We can't figure it all out in a single pass so we'll keep making passes until
      # there are no more changes.
      local traced_new_methods = true
      while (traced_new_methods)
        traced_new_methods =  false

        forEach (type in type_list)
          if (type.is_used)
            if (type.is_aspect)
              # trace aspect types and methods
              forEach (m in type.method_list)
                if (m.is_used and m.incorporating_classes)
                  forEach (ic in m.incorporating_classes)
                    if (ic.is_used)
                      local im = ic.find_method( m.signature )
                      if (not im.is_used)
                        traced_new_methods = true
                        im.trace_used_code
                      endIf
                    endIf
                  endForEach
                endIf
              endForEach
            else
              # Trace overriding methods
              forEach (m in type.method_list)
                if (m.is_used)
                  #{  Realized there's no need to trace overridden methods, only overriding methods.
                  if (m.overridden_method and not m.overridden_method.is_used)
                    traced_new_methods = true
                    m.overridden_method.trace_used_code
                  endIf
                  }#

                  forEach (overriding_m in m.overriding_methods)
                    if (not overriding_m.is_used and overriding_m.type_context.is_used)
                      traced_new_methods = true
                      overriding_m.trace_used_code
                    endIf
                  endForEach
                endIf
              endForEach
            endIf
          endIf
        endForEach

      endWhile

      # Each aspect method has a list of incorporating_classes that is used to generate
      # the aspect dispatch methods.  To begin with the list only contains classes that
      # directly incorporate the aspect.  Collect a list of used aspects and then
      # make sure each method's incorporating_classes list includes all classes
      # instanceOf that aspect that employ a given method.
      local class_list = type_list.filtered( function(type)=>type.is_class and type.is_used )
      local aspect_list = type_list.filtered( function(type)=>type.is_aspect and type.is_used )

      # Clear each aspect method's list of incorporating classes before rebuilding
      forEach (aspect in aspect_list)
        forEach (aspect_m in aspect.method_list)
          if (aspect_m.is_used and aspect_m.incorporating_classes) aspect_m.incorporating_classes.clear
        endForEach
      endForEach

      forEach (aspect in aspect_list)
        forEach (type in class_list)
          if (type.instance_of(aspect))
            forEach (aspect_m in aspect.method_list)
              if (aspect_m.is_used)
                local class_m = type.find_method( aspect_m.signature )
                if (class_m and class_m.is_used and aspect_m.incorporating_classes)
                  aspect_m.incorporating_classes.add( type )
                endIf
              endIf
            endForEach
          endIf
        endForEach
      endForEach

    method using_introspection->Logical
      return type_TypeInfo.is_used

    method using_introspection_value_calls->Logical
      if (not type_MethodInfo.is_used) return false
      if (m_MethodInfo_call is null)
        m_MethodInfo_call = type_MethodInfo.find_global_method( "call($,Int32,Value)" (Program.intptr_name) )
      endIf
      if (not m_MethodInfo_call or not m_MethodInfo_call.is_used) return false
      return true

    method resolve_pending_methods
      while (methods_requiring_resolve.count)
        methods_requiring_resolve.remove_last.resolve
      endWhile

endClass
