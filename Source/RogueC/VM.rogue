$essential File.*
$essential Files.*
$essential String.*

class VM
  GLOBAL PROPERTIES
    globals       = @{}

  PROPERTIES
    t             : Token
    context       : Object

    locals        = VMLocal[]
    inject        = StringBuilder()

    type_Real64      : TypeInfo
    type_Real32      : TypeInfo
    type_Int64       : TypeInfo
    type_Int32       : TypeInfo
    type_Character   : TypeInfo
    type_Byte        : TypeInfo
    type_Logical     : TypeInfo
    type_String      : TypeInfo
    type_GenericList : TypeInfo
    type_Exception   : TypeInfo
    type_Array       : TypeInfo

    new_scope = VMScopeManager( this )

  METHODS
    method init
      type_Real64      = <<Real64>>
      type_Real32      = <<Real32>>
      type_Int64       = <<Int64>>
      type_Int32       = <<Int32>>
      type_Character   = <<Character>>
      type_Byte        = <<Byte>>
      type_Logical     = <<Logical>>
      type_GenericList = <<GenericList>>
      type_String      = <<String>>
      type_Exception   = <<Exception>>
      type_Array       = <<Array>>

    method add_local( name:String, value:Value )->VMLocal
      local v = VMLocal( name, value )
      locals.add( v )
      return v

    method execute( context, statements:CmdStatementList )->Value
      if (statements.count) t = statements.first.t
      locals.clear
      inject.clear
      try
        local result = statements.execute( this )
        return result
      catch ( ex:VMReturnException )
        return ex.result
      catch ( ex:VMEscapeException )
        throw ex.t.error( "No containing structure to escape from." )
      catch ( ex:VMContingentSatisfiedException )
        throw ex.t.error( "No containing contingent to satisfy." )
      catch ( ex:VMContingentUnsatisfiedException )
        throw ex.t.error( "No containing contingent to satisfy." )
      catch ( err:RogueError )
        throw err.as_metacode_error
      catch ( ex:Exception )
        throw t.error( ex->String ).as_metacode_error
      endTry

    method find_local( name:String )->VMLocal
      forEach (v in locals step -1)
        if (v.name == name) return v
      endForEach
      return null

    method get_local( name:String )->Value
      local v = find_local( name )
      if (v) return v.value
      else   return UndefinedValue

    method object_count( obj:Object )->Int32
      if (obj is null) return 0
      if (obj->(as ObjectValue)) obj = (obj->(as Value))->Object
      local type = obj.type_info
      local m = type.find_method( "count()" )
      if (m) return m.returns<<Int32>>.call( obj )
      local p = type.find_property( "count" )
      if (p) return type.property<<Int32>>( obj, p )
      return 0

    method set_local( name:String, new_value:Value )
      local v = find_local( name )
      if (v) v.value = new_value

endClass

class VMScopeManager( vm:VM ) [compound]
  METHODS
    method on_use->Int32
      return vm.locals.count

    method on_end_use( index:Int32 )
      vm.locals.discard_from( index )
endClass

class VMLocal( name:String, value:Value )
  METHODS
    method to->String
      return "$=$" (name,value)
endClass

class VMReturnException( result:Value ) : RogueError;

class VMEscapeException( t:Token, control_type:Int32 ) : RogueError;
class VMNextIterationException( t:Token ) : RogueError;

class VMContingentSatisfiedException( t:Token ) : RogueError;
class VMContingentUnsatisfiedException( t:Token ) : RogueError;

