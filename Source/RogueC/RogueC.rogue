$define VERSION "2.0"
$define DATE    "September 3, 2022"

module RogueC

uses Codec/Base64

$include Macros

$define VCALLS true
# Enable vtable virtual calls where possible. If 'false' then dynamic dispatch used instead.

$include AccessAndAssignPatcher
$include Analytics
$include AspectMethodPatcher
$include AssignIDs
$include Attributes
$include BranchAnalyzer
$include BuildDynamicMethodTable
$include Candidates
$include ClearDynamicDispatchFlags
$include ClearLocalInfo
$include CollectVirtualCallInfo
$include Collector
$include ConvertDynamicCallsToStaticAndVirtualCalls
$include CullUnusedElements
$include TypeOrganizer
$include ContextBlockPatcher
$include ControlType
$include CmdType
$include CGenerator
$include CSpecializer
$include CWriter
$include DynamicMethodGroup
$include ExceptionAnalyzer
$include Finalizer
$include ImplicitFunctionGenerator
$include InspectionVisitor
$include Macro
$include Meta
$include Module
$include NeedsDecomposition
$include MethodOrganizer
$include Parser
$include Procedure
$include Program
$include PropertyOrganizer
$include Resolver
$include ResolveUsedElements
$include Scanner
$include Template
$include Transformer
$include Type
$include EndScopePatcher

uses Console/CommandLineParser
uses Utility/VersionNumber

try
  RogueC( System.command_line_arguments )

catch (error:CompileError)
  Console.error.println error
  System.exit 1
catch (error:Error)
  error.display
  System.exit 1
endTry

class RogueC
  PROPERTIES
    command : Value

  METHODS
    method init( args:String[] )
      Analytics.total_time.start

      try
        command = parse_args( args )
      catch (err:Error)
        Console.error.println "=" * 80.or_smaller(Console.width)
        Console.error.println err
        Console.error.println "=" * 80.or_smaller(Console.width)
        print_usage
        System.exit 1
      endTry

      if (command//options//version)
        print   "RogueC v"
        println VERSION
        println "$ by Abe Pralle" (DATE)
        System.exit 0
      endIf

      if (command//options//help or command//args.count == 0)
        print_usage
        System.exit 0
      endIf

      if (command//options//libraries)
        local paths = String[]
        forEach (lib in command//options//libraries)
          local path = lib->String.replacing(';',',')
          if (not System.is_windows) path .= replacing(':',',')
          paths.add( forEach in path->String.split(',') )
        endForEach
        command//options//libraries = paths
        Program.add_include_search_path( forEach in paths )
      endIf

      if (command//options//real)
        local real_bits = command//options//real->Int32
        if (real_bits != 32 and real_bits != 64)
          throw Error( "--real can only be set to 32 or 64." )
        endIf
        Program.real_bits = real_bits
      endIf

      local api_includes = command//options//api.contains(true)

      local rogue_folder = File( File( System.executable_filepath ).folder )
      if ((rogue_folder/"Libraries").exists)
        rogue_folder /= "Libraries"
      else
        if ((rogue_folder/"Source/Libraries").exists)
          rogue_folder /= "Source/Libraries"
        else
          rogue_folder .= parent
          if ((rogue_folder/"Source/Libraries").exists) rogue_folder /= "Source/Libraries"
          else                                          rogue_folder = File(".")
        endIf
      endIf

      Program.add_include_search_path( rogue_folder )

      Program.include( forEach in command//args, &api=api_includes )

      Program.include( "Standard" )

      forEach (option in command//options//api)
        if (option == Value(true)) nextIteration
        if (option->String.ends_with(".rogue"))
          Program.include( option->String, &api )
        else
          Program.api_patterns.add( option->String )
        endIf
      endForEach

      while (Scanner.uses_autoinclude)
        local t = Program.t
        Scanner.uses_autoinclude = false
        if (Scanner.uses_DateTime) Program.include( t, "DateTime" ); Scanner.uses_DateTime = false
        if (Scanner.uses_File)     Program.include( t, "FileIO" ); Scanner.uses_File = false
        if (Scanner.uses_Introspection) Program.include( t, "Introspection" ); Scanner.uses_Introspection = false
        if (Scanner.uses_Process)  Program.include( t, "Core/Process" ); Scanner.uses_Process = false
        if (Scanner.uses_Scanner)  Program.include( t, "IO/Scanner" ); Scanner.uses_Scanner = false
        if (Scanner.uses_Set)      Program.include( t, "Collection/Set" ); Scanner.uses_Set = false
        if (Scanner.uses_Table)    Program.include( t, "Collection/Table" ); Scanner.uses_Table = false
        if (Scanner.uses_Value)    Program.include( t, "Core/Value" ); Scanner.uses_Value = false
      endWhile

      Program.resolve

      Analytics.generate_c.start
      Program.generate_c
      Analytics.generate_c.stop
      Analytics.total_time.stop

      #if ($defined(DEBUG)) Analytics.display

    method parse_args( args:String[] )->Value
      local command = CommandLineParser().
      [
        option( "--api=", &optional, &multi )
        option( "--debug" )
        option( "--define=", &alias="-D", &multi )
        option( "--gc=" )
        option( "--gc-threshold=" )
        option( "--help",       &aliases=["-h","-?"] )
        option( "--libraries=", &alias="-L", &multi )
        option( "--main" )
        option( "--output=" )
        option( "--real=", &alias="-r" )
        option( "--target=", &alias="-t", &multi )
        option( "--version", &alias="-v" )
      ].parse( args )

      local debug_t : Token
      if (command//options.contains("debug"))
        Program.debug_mode  = true
        Program.stack_trace = true
        debug_t = Program.t.cloned( TokenType.KEYWORD_TRUE )
      else
        debug_t = Program.t.cloned( TokenType.KEYWORD_FALSE )
      endIf
      Program.definitions["DEBUG"] = Token[].[add(debug_t)]

      if (command//options.contains("define"))
        forEach (def in command//options//define)
          block def = def->String
            local key   = def.before_first(':')
            local value = def.after_first(':')
            if (value == "") value = "true"
            local tokens = Scanner( "Command Line Option", value ).tokenize
            tokens.remove_last  # EOL
            Program.definitions[key] = tokens
          endBlock
        endForEach
      endIf

      if (command//options.contains("gc"))
        which (command//options//gc->String)
          case "auto":   Program.gc_auto = true
          case "manual": Program.gc_auto = false
          others
            throw Program.t.error( "Valid --gc modes are 'auto' and 'manual'." )
        endWhich
      endIf

      if (command//options.contains("gc-threshold"))
        local option = command//options["gc-threshold"]->String
        local value = option->Int32
        if (option.ends_with("m",&ignore_case) or option.ends_with("mb",&ignore_case))
          value *= 1024*1024
        elseIf (option.ends_with("k",&ignore_case) or option.ends_with("kb",&ignore_case))
          value *= 1024
        endIf
        Program.gc_threshold = value
      endIf

      if (command//options//main)
        Program.generate_main = true
      endIf

      if (command//options//target)
        forEach (target_option in command//options//target)
          local targets = target_option->String.replacing(';',',')
          if (not System.is_windows) targets .= replacing(':',',')
          forEach (target in targets.split(',') )
            if (target.begins_with('"') or target.begins_with('\''))
              target = target.leftmost(-1).rightmost(-1)
            endIf
            Program.targets[target] = target
          endForEach
        endForEach
      endIf
      if (not Program.targets.count) Program.targets//C = "C"

      if (command//args.count > 0)
        if (command//options//output)
            local filepath = command//options//output->String
            if (File(filepath).is_folder)
              filepath /= command//args.first->String.before_suffix( ".rogue" )
            else
              local parent = File( filepath ).folder
              if (String.exists(parent)) File( parent ).create_folder
            endIf
            Program.output_filepath = filepath
        else
          Program.output_filepath = command//args.first->String.before_suffix( ".rogue" )
        endIf
      endIf

      return command

    method print_usage
      print   "RogueC v"
      println VERSION
      println "$ by Abe Pralle" (DATE)
      println
      println @|USAGE
               |  rogue [OPTIONS] <filepath>
               |
               |OPTIONS
               |  --api, --api=[Module::]ClassName, --api="Filename.rogue"
               |    --api
               |      All routines and classes in the files specified on the command line are
               |      marked [essential api], ensuring those routines, classes, and methods are
               |      available to introspection.
               |    --api=[Module::]ClassName, --api="Module::*", --api="*::*", --api="*"
               |      Marks the specified class or classes as [essential api].
               |    --api="Filename.rogue"
               |      The specified file is included and its routines and classes are marked
               |      [essential api].
               |
               |  --debug
               |    Compile in debug mode:
               |    - 'DEBUG' is defined as 'true' instead of 'false'.
               |    - Call history is tracked, which allows for stack frame display at the cost
               |      of additional overhead.
               |
               |  --define="name[:value]", -D "name[:value]"
               |    Adds a single preprocessor define.
               |    Defining "name:value" is equivalent to: $define name value
               |    Defining "name" is equivalent to:       $define name true
               |
               |  --help, -h, -?
               |    Show this help text.
               |
               |  --gc=[auto|manual]
               |    Sets garbage collection mode:
               |      --gc=auto   - Collects after every [--gc-threshold] number of bytes have
               |                    been allocated (default 1 MB). This is slower than 'manual'
               |                    due to the extra overhead of tracking local variables.
               |      --gc=manual - Rogue_collect_garbage() should be called by the C framework
               |                    at a regular interval (such as after every frame) outside of
               |                    any calls into Rogue code. Or: never call GC for programs
               |                    that complete a task and then halt; this will allow them to
               |                    execute as fast as possible. Calling Rogue_collect_garbage()
               |                    only results in a GC if the --gc-threshold has been reached.
               |  --gc-threshold={number}[MB|K]
               |    Sets the GC threshold in bytes (default), megabytes, or kilobytes.
               |    '1048576', '1024K', and '1MB' are all equivalent. The default is 1MB.
               |
               |  --libraries="path1;path2", -L path1:path2
               |    Specify paths RogueC should look through for '$include' and 'uses'
               |    directives. This option can be listed multiple times. Both ';' and ':' can
               |    be used as a path separator on quoted paths.
               |
               |  --main
               |    Generates a main() function with the C output.
               |
               |  --output=<filepath>
               |   Specify the destination folder and/or the base filename for generated C
               |   output.
               |
               |  --real=32, -r 32
               |    Specifies that the 'Real' datatype should be Real32 instead of Real64.
               |    This affects the type of floating point literals (2.54, pi) as well.
               |
               |  --target=Target1,"Target2",..., -t Target
               |    Specify arbitrary target languages, platforms, operating systems,
               |    frameworks, etc. that can be checked during compile time with '$target("C")'
               |    etc. This option can be listed multiple times. If no targets are given, a
               |    default target of "C" is used.
               |
               |  --version, -v
               |    Prints the Rogue version number and release date.

endClass

