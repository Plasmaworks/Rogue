module RogueC

class GlobalPropertyOrganizer : Visitor
  METHODS
    method init( this_module )

    method visit( this_type, class_def:Cmd )
      # Called when instantiating a template
      visit( class_def )

    method on( cmd:GlobalPropertyDeclarations )->Cmd
      local type = cmd.type
      if (type)
        forEach (decl in cmd.declarations)
          local p = decl->(as Property)
          if (p)
            p.type = type
            p.attributes.flags |= cmd.attributes.flags
            collect_global( decl.t, p )
          else
            throw decl.t.error( "Global properties cannot be native." )
          endIf
        endForEach
      else
        forEach (decl in cmd.declarations)
          local p = decl->(as Property)
          if (p)
            p.attributes.flags |= cmd.attributes.flags
            collect_global( p.t, p )
          else
            local native_property = decl->(as NativeProperty)
            if (native_property)
              throw native_property.t.error( "Global properties cannot be native." )
            endIf
          endIf
        endForEach
      endIf
      return null

    method collect_global( t:Token, p:Property )
      visit( p )

      assert this_type
      p.type_context = this_type
      p.attributes.is_global = true

      if (not p.type)
        if (p.initial_value)
          p.type = p.initial_value.type
          if (not p.type)
            if ((p.initial_value instanceOf ContextAccess and p.initial_value->(as ContextAccess).args) or
                (p.initial_value instanceOf TemplatedAccess and p.initial_value->(as TemplatedAccess).args))
              throw p.t.error(
                ''Cannot implicitly determine type of property "$" from initial value. ''(p.name) +
                ''Add an explicit ': Type' at the end of the line and/or add any necessary '$include' and 'uses' directives.''
              )
            else
              throw p.t.error(
                ''Cannot implicitly determine type of property "$" from initial value. ''(p.name) +
                ''Add an explicit ': Type' at the end of the line.''
              )
            endIf
          endIf
        else
          throw p.t.error( ''Global property "$" must have an initial assignment or a declared ': Type'.''(p.name) )
        endIf
      endIf

      p.type.[ ensure_definition, organize_properties ]

      if (p.type.is_reference or (p.type.is_compound and p.type.contains_embedded_reference))
        p.type.attributes.contains_reference = true
      endIf

      local existing_p = this_type.global_properties[p.name]
      if (existing_p and existing_p.type_context is this_type)
        throw t.error( ''Type $ already defines a property called "$".''(this_type,p.name) )
      endIf
      this_type.global_properties[ p.name ] = p

endClass
