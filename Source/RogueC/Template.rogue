class Template
  PROPERTIES
    t                         : Token
    name                      : String
    tokens=Token[]            : Token[]
    attributes                = Attributes()
    type_parameters           : TypeParameter[]
    alternates_by_param_count : Table<<Int32,Template>>

  METHODS
    method init( t, name, attribute_flags=0:Int32 )
      attributes.add( attribute_flags )

    method add_type_parameter( p_t:Token, p_name:String )->TypeParameter
      if (type_parameters is null) type_parameters = TypeParameter[]
      local param = TypeParameter( p_t, p_name )
      type_parameters.add( param )
      return param

    method element_type->Int32
      return (attributes.flags & Attribute.type_mask)

    method best_alternate_for_type( type_name:String )->Template
      if (not alternates_by_param_count) return this

      local specializer_count = 0
      if (type_name.contains('<'))
        specializer_count = Parser(t,type_name,type_name.from_first('<')).parse_specializer_count()
      endIf

      if (type_parameter_count == specializer_count) return this

      local alternate = alternates_by_param_count[ specializer_count ]
      if (alternate) return alternate

      return this

    method instantiate( type:Type, scope:Scope, reference_t=null:Token )
      if (alternates_by_param_count)
        local specializer_count = 0
        if (type.name.contains('<'))
          specializer_count = Parser(type.t,type.name,type.name.from_first('<')).parse_specializer_count()
        endIf
        if (type_parameter_count != specializer_count)
          local alternate = alternates_by_param_count[ specializer_count ]
          if (alternate)
            alternate.instantiate( type, scope )
            return
          else
            throw type.t.error( "No $ template accepting $ is defined." (name,"# parameter".pluralized(specializer_count)) )
          endIf
        endIf
      endIf

      type.t = t
      # replace location of first reference to type with location of type definition

      type.attributes.add( attributes )
      type.source_template = this

      local augmented_tokens = tokens
      augmented_tokens = add_augmented_tokens( type, name, augmented_tokens )  # ex: Table
      if (type.name == name)
        augmented_tokens = add_augmented_tokens( type, type.name+"<<>>", augmented_tokens ) # ex: Table<<>>
      else
        augmented_tokens = add_augmented_tokens( type, type.name, augmented_tokens ) # ex: Table<<String,Int32>>
      endIf

      augmented_tokens = replace_thistype( type, augmented_tokens )

      if (type.name.ends_with(']'))
        instantiate_list( type, augmented_tokens )
      elseIf (type.name.ends_with('?'))
        instantiate_optional( type, augmented_tokens )
      elseIf (type_parameters)
        instantiate_parameterized_type( type, augmented_tokens, scope, reference_t )
      else
        instantiate_standard_type( type, augmented_tokens )
      endIf

    method add_augmented_tokens( type:Type, augment_name:String, augmented_tokens:Token[] )->Token[]
      local augments = Program.augment_lookup[ augment_name ]

      if (not augments) return augmented_tokens

      # +2 for an extra begin_augment_tokens at the beginning and an extra EOL at the end
      # +2 per augment for additional CATEGORIES [EOL] at begining of each augment for enums
      local t_count = 2
      forEach (aug in augments) t_count += aug.tokens.count + 2

      if (augmented_tokens is tokens)
        # Use a working copy
        augmented_tokens = Token[]( tokens.count + t_count ).[ add(augmented_tokens) ]
      else
        augmented_tokens.reserve( t_count )
      endIf

      augmented_tokens.add( Token(TokenType.begin_augment_tokens) )
      forEach (aug in augments)
        forEach (base_type in aug.base_types)
          type.base_types.add( base_type )
        endForEach
        if (type.is_enum)
          augmented_tokens.add( TokenType.keyword_CATEGORIES.create_token(aug.t) )
          augmented_tokens.add( TokenType.eol.create_token(aug.t) )
        endIf
        augmented_tokens.add( aug.tokens )
      endForEach
      augmented_tokens.add( tokens.last )  # add an EOL to the end

      return augmented_tokens

    method replace_thistype( type:Type, augmented_tokens:Token[] )->Token[]
      # Replace $ThisType with this type name
      contingent
        forEach (t in augmented_tokens)
          sufficient (t.type is TokenType.placeholder_id and t->String == "$ThisType")
        endForEach

        # No occurrences of $ThisType
        return augmented_tokens
      endContingent

      local result_tokens = Token[]( augmented_tokens.count )
      local type_name_tokens = Tokenizer().tokenize( type.name, type.name )

      forEach (t in augmented_tokens)
        if (t.type is TokenType.placeholder_id and t->String == "$ThisType")
          forEach (t2 in type_name_tokens)
            result_tokens.add( t2.cloned.set_location(t) )
          endForEach
        else
          result_tokens.add( t )
        endIf
      endForEach

      return result_tokens

    method instantiate_list( type:Type, augmented_tokens:Token[] )
      type.is_list = true
      type.element_type = Program.get_type_reference( t, type.name.leftmost(-2) )

      local instance_tokens = Token[]( augmented_tokens.count )
      forEach (template_t in augmented_tokens)
        if (template_t.type is TokenType.placeholder_id)
          if (template_t->String == "$DataType")
            instance_tokens.add( TokenType.identifier.create_token(template_t,type.element_type.name) )
          else
            instance_tokens.add( template_t )
          endIf
        else
          instance_tokens.add( template_t )
        endIf
      endForEach

      Parser(instance_tokens).parse_type_def( type )

    method instantiate_optional( type:Type, augmented_tokens:Token[] )
      type.is_optional = true
      type.element_type = Program.get_type_reference( t, type.name.leftmost(-1) )

      local instance_tokens = Token[]( augmented_tokens.count )
      forEach (template_t in augmented_tokens)
        if (template_t.type is TokenType.placeholder_id)
          if (template_t->String == "$DataType")
            instance_tokens.add( TokenType.identifier.create_token(template_t,type.element_type.name) )
          else
            instance_tokens.add( template_t )
          endIf
        else
          instance_tokens.add( template_t )
        endIf
      endForEach

      Parser(instance_tokens).parse_type_def( type )

    method instantiate_parameterized_type( type:Type, augmented_tokens:Token[], scope:Scope, reference_t=null:Token )
      local instance_tokens = augmented_tokens

      local type_specializers = Table<<String,TypeSpecializer>>()

      local specialization_string = type.name.from_first('<')
      if (specialization_string.count == 0)
        local ref_t = ?:{ reference_t || type.t }
        throw ref_t.error( "Reference to $ is missing required type parameters ($<<...>>)." (type.name,type.name) )
      endIf

      local parser = Parser( t, type.name, specialization_string, &column_delta=(type.name.count - specialization_string.count) )
      parser.read  # '<<'

      local buffer = StringBuilder()
      local first = true
      while (first or parser.consume(TokenType.symbol_comma))
        first = false
        local specializer_tokens = Token[]
        parser.parse_specializer( buffer.clear, specializer_tokens )

        local index = type_specializers.count
        if (index >= type_parameters.count) throw t.error( "Too many type specializers given." )

        local param = type_parameters[index]
        local specializer = TypeSpecializer( param.name, index )
        specializer.tokens = specializer_tokens
        type_specializers[specializer.name] = specializer

        if (not type.specializers) type.specializers = TypeSpecializer[]
        type.specializers.add( specializer )
      endWhile

      if (type_specializers.count < type_parameters.count)
        throw type.t.error( "Insufficient number of type parameters in $; $ given, $ expected." (type.name,type_specializers.count,type_parameters.count) )
      endIf

      # Create specialized instance tokens
      instance_tokens = Token[]( augmented_tokens.count * 2 )
      forEach (template_t in augmented_tokens)
        if (template_t.type is TokenType.placeholder_id)
          local specializer = type_specializers[ template_t->String ]
          if (specializer)
            # Insert template copy of tokens
            forEach (specializer_t in specializer.tokens)
              instance_tokens.add( specializer_t )
            endForEach
          else
            instance_tokens.add( template_t )
          endIf
        else
          instance_tokens.add( template_t )
        endIf
      endForEach

      Parser(instance_tokens).parse_type_def( type )

    method instantiate_standard_type( type:Type, augmented_tokens:Token[] )
      if (type.name.contains('<'))
        throw t.error( "Type parameters given for non-template type." )
      endIf

      Parser(augmented_tokens).parse_type_def( type )

    method is_essential->Logical
      return (this.attributes.flags & (Attribute.is_essential))

    method is_task->Logical [macro]
      (this.attributes.flags & Attribute.is_task)

    method type_parameter_count->Int32
      if (type_parameters) return type_parameters.count
      return 0

endClass


class TypeParameter
  PROPERTIES
    t               : Token
    name            : String

  METHODS
    method init( t, name )

    method to->String
      return name
endClass


class TypeSpecializer
  PROPERTIES
    name            : String
    index           : Int32

    tokens          : Token[]  # for templates

  METHODS
    method init( name, index )
endClass


class ModuleTemplate
  PROPERTIES
    sections          = ModuleTemplateSection[]

  METHODS
    method init

    method instantiate( name:String, args:Token[][], result_tokens:Token[] )
      (forEach in sections).instantiate( name, args, result_tokens )
endClass

class ModuleTemplateSection
  PROPERTIES
    module_t     : Token
    name_t       : Token
    placeholders : Token[]
    tokens       = Token[]

  METHODS
    method init( module_t, name_t, placeholders )

    method instantiate( name:String, args:Token[][], result_tokens:Token[] )
      local placeholder_lookup = StringTable<<Token[]>>()
      forEach (placeholder at index in placeholders)
        placeholder_lookup[ placeholder->String ] = args[ index ]
      endForEach

      result_tokens.add( module_t )
      result_tokens.add( TokenType.identifier.create_token(name_t,name) )

      forEach (t in tokens)
        contingent
          necessary (t.type is TokenType.placeholder_id)
          local replacement = placeholder_lookup[ t->String ]
          necessary (replacement)
          result_tokens.add( replacement )
        unsatisfied
          result_tokens.add( t )
        endContingent
      endForEach
endClass

class ModuleInstance
  PROPERTIES
    t                 : Token
    as_name           : String
    instance_name         : String
    template_name     : String
    args              : Token[][]

  METHODS
    method init( t, instance_name, template_name, args, as_name )

    method instantiate->Parser
      local template = Program.module_templates[ template_name ]
      if (not template)
        throw t.error( "Reference to undefined module template $." (template_name) )
      endIf

      resolve_name

      local tokens = Token[]
      template.instantiate( as_name, args, tokens )
      return Parser( tokens, &preprocess )

    method resolve_name->String
      if (as_name) return as_name

      # For Name<<X,Y>>, try santized name XYName first and then tweak until
      # the sanitized name is unique.
      use raw=StringBuilder.pool
        forEach (arg in args) raw.print( arg )
        raw.print( template_name.before_first('<') )
        use filtered=StringBuilder.pool
          forEach (ch in raw)
            if (ch.is_letter or ch.is_number or ch == '_') filtered.print( ch )
          endForEach
          local candidate = filtered->String
          if (candidate[0].is_number) candidate = "Module" + candidate
          if (Program.module_names.contains(candidate))
            local index = 2
            local next_candidate = candidate + index
            while (Program.module_names.contains(next_candidate))
              ++index
              next_candidate = candidate + index
            endWhile
            candidate = next_candidate
          endIf
          as_name = candidate
        endUse
      endUse
      Program.module_names.add( as_name )
      Program.module_as_name_to_instance_name[ as_name ] = instance_name
      return as_name
endClass

