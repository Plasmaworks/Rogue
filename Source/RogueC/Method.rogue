$include "IntrospectionCall.rogue"
$include "MethodTemplate.rogue"

class Method
  PROPERTIES
    t            : Token
    type_context : Type
    name         : String
    signature    : String
    full_name    : String

    attributes   = Attributes()

    return_type      : Type

    task_result_type : Type
      # When a [task] is organized, task_result_type gets set to the original return_type
      # and return_type gets set to Task or TaskWithResult<<ResultType>>

    parameters = Local[] : Local[]

    min_args     : Int32

    statements            = CmdStatementList()
    aspect_statements     : CmdStatementList
    incorporating_classes : Type[]

    overridden_method  : Method
    overriding_methods = Method[]
    native_code        : String
    native_return_type : Type

    organized : Logical
    resolved  : Logical
    index     : Int32

    is_used            : Logical
    called_dynamically : Logical
    introspection_call_handler : IntrospectionCallHandler

    label_list   = CmdLabel[]
    label_lookup = Table<<String,CmdLabel>>()
    cur_label    : CmdLabel

    source_template   : MethodTemplate
    specializer_count : Int32
    unspecialized_name  : String

    deprecated_message : String

    source_tokens : Token[]  # Retained by propagated methods in order to adjust and re-parse when necessary

  METHODS
    method init( t, type_context, name )

    method cloned( &skip_body )->Method
      local result = Method( t, type_context, name )

      <initialize_result>
      result.signature = signature
      result.attributes = attributes.cloned
      result.return_type = return_type
      result.task_result_type = task_result_type
      result.source_template = this.source_template
      result.specializer_count = this.specializer_count
      result.unspecialized_name = this.unspecialized_name

      result.parameters = Local[]
      forEach (p in parameters) result.parameters.add( p.cloned )

      result.min_args = min_args

      if (not skip_body)
        # Label list and lookup will be filled in by the CmdLabel nodes being
        # cloned.
        result.label_list = CmdLabel[]( label_list.count )
        result.label_lookup = Table<<String,CmdLabel>>()

        result.statements = statements.cloned( CloneMethodArgs(result) )
        result.native_code = native_code
      endIf

      result.index = index

      if (source_tokens) result.source_tokens = source_tokens.cloned

      return result

    method add_incorporating_class( incorporating_class:Type )
      ensure incorporating_classes
      incorporating_classes.add( incorporating_class )

    method dispatch( v:Visitor )
      v.visit( this )

    method incorporate( into_type:Type )->Method
      local m = cloned.set_type_context( into_type ).set_incorporated

      <initialize_m>
      if (aspect_statements)
        # If aspect_statements is non-null then the aspect method was already resolved
        # prior to the cloned() above and we need to copy the statements.
        # If it's null then we've already cloned the statement list when we cloned()d
        # the method above.
        m.statements = aspect_statements.cloned(null->(as CloneArgs))
      endIf

      m.signature = null
      m.assign_signature

      return m

    method accepts_arg_count( n:Int32, &var_args )->Logical
      if (n >= min_args and n <= parameters.count) return true
      if (not var_args) return false
      if (parameters.is_empty or parameters.last.type is not Program.type_VarArgs) return false
      return n >= (parameters.count-1)

    method add_parameter( p_t:Token, p_name:String, p_type=null:Type )->Local
      local p = Local( p_t, p_name, p_type )
      parameters.add( p )
      return p

    method assign_signature
      if (signature) return
      local buffer = StringBuilder()
      buffer.print name
      buffer.print "("
      local first = true
      forEach (param in parameters)
        if (first) first = false
        else       buffer.print( "," )
        buffer.print( param.type.name )
      endForEach
      buffer.print ")"
      signature = buffer->String

    method begin_label( label_t:Token, label_name:String, consolidate_duplicates:Logical )->CmdLabel
      if (consolidate_duplicates)
        cur_label = label_lookup[ label_name ]
        if (cur_label) return cur_label

      else
        if (label_name == "insert" and label_lookup.contains(label_name))
          throw label_t.error( "All methods implicitly define the label <insert> at the beginning of the method.  No duplicates are allowed." )
        elseIf (label_name == "append" and label_lookup.contains(label_name))
          throw label_lookup[label_name].t.error( "All methods implicitly define the label <append> at the end of the method.  No duplicates are allowed." )
        endIf

      endIf

      cur_label = CmdLabel( label_t, label_name )
      label_lookup[ label_name ] = cur_label
      label_list.add( cur_label )
      return cur_label

    method can_operate_on_literal_null->Logical
      return (attributes.flags & Attribute.can_operate_on_literal_null)

    method get_locals->Local[]
      return CollectLocalsVisitor().collect_locals( this )

    method hash_code->Int32
      if (not signature) throw t.error( "[Internal] Method.hash_code() used before signature established." )
      return this->String.hash_code

    method is_abstract->Logical
      return (attributes.flags & Attribute.is_abstract)

    method is_augment->Logical
      return (attributes.flags & Attribute.is_augment)

    method is_deprecated->Logical
      return (attributes.flags & Attribute.is_deprecated)

    method is_dynamic->Logical
      return (overridden_method or overriding_methods.count or (attributes.flags & Attribute.is_dynamic))

    method is_fallback->Logical
      return (attributes.flags & Attribute.is_fallback)

    method is_generated->Logical
      return (attributes.flags & Attribute.is_generated)

    method is_incorporated->Logical
      return (attributes.flags & Attribute.is_incorporated)

    method is_initializer->Logical
      return (attributes.flags & Attribute.is_initializer)

    method is_macro->Logical
      return (attributes.flags & Attribute.is_macro)

    method is_mutating->Logical
      return (attributes.flags & Attribute.is_mutating)

    method is_native->Logical
      return (attributes.flags & Attribute.is_native)

    method is_override->Logical
      return (attributes.flags & Attribute.is_override)

    method is_preferred->Logical
      return (attributes.flags & Attribute.is_preferred)

    method is_overridden->Logical
      return overriding_methods.count

    method is_api->Logical
      return (attributes.flags & Attribute.is_api)

    method is_essential->Logical
      return (attributes.flags & Attribute.is_essential) or is_api or type_context.is_api

    method is_global->Logical
      return (attributes.flags & Attribute.is_global)

    method is_nonAPI->Logical
      return (attributes.flags & Attribute.is_nonAPI)

    method is_propagated->Logical
      return (attributes.flags & Attribute.is_propagated)

    method is_special->Logical
      return (attributes.flags & Attribute.is_special)

    method is_task->Logical
      return (attributes.flags & Attribute.is_task)

    method is_task_conversion->Logical
      return (attributes.flags & Attribute.is_task_conversion)

    method is_synchronized->Logical
      return (attributes.flags & Attribute.is_synchronized)

    method make_propagated->this
      attributes.add( Attribute.is_propagated )
      return this

    method make_essential->this
      if (not is_essential)
        attributes.add( Attribute.is_essential )
        if (type_context.is_used)
          # Containing type already traced; trace this method now
          trace_used_code
        endIf
      endIf
      return this

    method omit_output->Logical
      if (is_native or not is_used) return true
      if (is_abstract and not type_context.is_aspect)
        return (overriding_methods.count > 0)
      endIf
      return false

    method organize( scope=null:Scope, add_to_lookup=true:Logical )->Method
      if (organized) return this
      organized = true

      if (name.before_first('<') == "init")
        if (is_global)
          throw t.error( "init() methods cannot be global methods.  Rename your method init_class() if you need to perform class setup." )
        elseIf (type_context.is_compound)
          throw t.error( "Compounds cannot have initializers.  Use global create(...) methods instead." )
        endIf
        attributes.flags |= Attribute.is_initializer
        return_type = type_context
      endIf

      if (is_task)
        #if (is_global) throw t.error( "Global methods and routines cannot be tasks." )

        task_result_type = return_type
        if (return_type)
          return_type.configure
          return_type = Program.get_type_reference( t, "TaskWithResult<<$>>"(return_type.name) )
        else
          return_type = Program.get_type_reference( t, "NilTask" )
        endIf
        return_type.configure
      endIf

      forEach (param in parameters step -1)
        if (not is_global)
          local property = type_context.find_property( param.name )

          if (property)
            if (param.is_flag)
              throw param.t.error( ''Shadowing a property with a flag parameter is not allowed. Change "&$" to be e.g. "$=false:Logical" or "$=false" instead.'' (param.name,param.name,param.name) )
            endIf
            if (param.type is null)
              # Autostore parameter
              local new_name = Program.create_unique_id
              local pt = param.t
              statements.insert( CmdAssign(pt,CmdAccess(pt,param.name),CmdAccess(pt,new_name)) )
              param.name = new_name
              param.type = property.type
            endIf
          endIf
        endIf

        if (not param.type) throw param.t.error( ''No type declared for parameter "$".'' (param.name) )
      endForEach

      assign_signature

      if (add_to_lookup and not is_augment)
        # Add method to lookup tables.

        local list = Program.methods_by_signature[ signature ]
        if (not list)
          list = Method[]
          Program.methods_by_signature[ signature ] = list
        endIf
        list.add( this )

        if (is_global)
          local existing_m = type_context.global_method_lookup_by_signature[signature]
          if (existing_m and existing_m.type_context is type_context)
            if (type_context == Program.get_type_reference(t, "Global"))
              throw t.error( "A routine with the signature $ is already defined." (signature) )
            else
              throw t.error( "A global method with the signature $ is already defined." (signature) )
            endIf
          endIf
          type_context.global_method_lookup_by_signature[signature] = this
        else
          local existing_m = type_context.method_lookup_by_signature[signature]
          if (existing_m and existing_m.type_context is type_context)
            throw t.error( "A method with the signature $ is already defined." (signature) )
          endIf
          type_context.method_lookup_by_signature[signature] = this
        endIf
      endIf

      min_args = parameters.count
      while (min_args >= 1 and parameters[min_args-1].initial_value)
        --min_args
      endWhile

      if (is_global and is_synchronized)
        throw t.error( "Global methods cannot be synchronized." )
      endIf

      return this


    method resolve
      if (resolved) return
      resolved = true

      try
        if (is_override and not overridden_method)
          throw t.error( "$.$ is declared as an override but no such method exists in base class $." (type_context,signature,type_context.base_class) )
        endIf

        forEach (param in parameters)
          param.type.configure
        endForEach
        if (return_type) return_type.configure

        if (type_context.is_aspect and not is_global)
          aspect_statements = statements
          statements = CmdStatementList()
        endIf

        # Assign indices to local variables
        forEach (v at i in get_locals) v.index = i

        if (is_task) convert_to_task

        resolve_statements

        introspection_call_handler = IntrospectionCallManager.handler( this )

        if (is_initializer)
          local return_t = t
          if (statements.count) return_t = statements.last.t
          local scope = Scope( type_context, this )
          statements.add( CmdReturn(return_t,CmdLiteralThis(return_t,type_context)).resolve(scope) )
        endIf

      catch (error:Error)
        resolved = false
        throw error

      endTry

    method resolve_statements
      if (not resolved) resolve

      local scope = Scope( type_context, this )
      forEach (p in parameters) scope.push_local( p )

      statements.resolve( scope )

      if (scope.local_list.count > parameters.count) throw t.error( "[INTERNAL] Locals left on scope stack." )
      if (scope.control_stack.count) throw t.error( "[INTERNAL] Control stucture left on scope stack." )

    method returns_this->Logical
      return (attributes.flags & Attribute.returns_this)

    method convert_augment_to_standalone
      attributes.flags &= !Attribute.is_augment
      if (not native_code)
        # Turn this augment method into a standalone method containing the
        # <insert> and <append> label contents.  Throw an error if there are
        # any other labels defined besides <replace> to avoid silently dropping
        # that code.
        if (label_list.count > 2)
          if (label_list.count > 3 or label_list.last.name != "replace")
            # More than the default <insert> and <append> labels and not a <replace> label
            local label = label_list.last
            throw label.t.error( "No corresponding label <$> in augmented code." (label.name) )
          endIf
        endIf

        local insert_label  = label_lookup[ "insert" ]
        local append_label  = label_lookup[ "append" ]
        local replace_label = label_lookup[ "replace" ]
        label_lookup.clear
        label_list.clear

        # Insert the label content.  Give the method its own <insert>
        # and <append> labels for any successive augments.
        if (insert_label and append_label)
          statements.add( begin_label(t,"insert",false) )
          statements.add( insert_label.statements )
          if (replace_label) statements.add( replace_label.statements )
          statements.add( append_label.statements )
          statements.add( begin_label(t,"append",false) )
        endIf
      endIf

    method convert_to_task
      # Create the class that will store the converted method
      local task_type = Program.get_type_reference( t, "$__$__task$" (type_context.name,name,Program.next_unique_integer) )
      task_type.attributes.add( Attribute.is_class )
      task_type.base_types.add( return_type )  # Task or TaskWithResult<<ResultType>>

      # Add an init method that accepts the original class context as well as all method parameters
      local m_init = task_type.add_method( t, "init" )
      if (not is_global)
        m_init.add_parameter( t, "context" )
      endIf
      forEach (p in parameters)
        m_init.add_parameter( t, "$_$" (p.name,p.index) )
      endForEach

      local m_update = task_type.add_method( t, "update" )
      m_update.return_type = Program.type_Logical
      m_update.statements.add( CmdAssign( t, CmdAccess(t,"has_result"), CmdLiteralLogical(t,false) ) )
      m_update.statements.add( CmdGenericLoop( t, CmdControlStructure.type_while, CmdAccess(t,"execute",CmdArgs()) ) )
      m_update.statements.add( CmdReturn( t, CmdCompareNE(t,CmdAccess(t,"ip"),CmdLiteralInt32(t,-1)) ) )

      local m_execute = task_type.add_method( t, "execute" )
      m_execute.return_type = Program.type_Logical
      task_type.is_defined = true

      # Create a temporary method to store the task body and resolve all statements and variable
      # binding.  Then convert the resolved method to a task - locals to properties, this.properties
      # to context.properties, etc.
      local m_name = "__task_resolver" + Program.create_unique_id
      local m_temp = Method( t, type_context, m_name )
      m_temp.return_type = task_result_type
      m_temp.attributes.add( Attribute.is_task_conversion )

      # Move the Local var objects to the temp method (since Cmd code might reference them directly)
      # along with the statements and resolve the temp method
      m_temp.parameters = parameters
      m_temp.statements = statements
      m_temp.organize( null, false )  # organize but don't add to type's method tables
      m_temp.resolve

      # Now come back and fix up this method's parameters and statements
      parameters = Local[]
      forEach (v in m_temp.parameters)
        add_parameter( v.t, v.name, v.type )
      endForEach

      # Original method gets a "return TaskObjectName()"
      statements = CmdStatementList()
      local args = CmdArgs()
      if (not is_global) args.add( CmdLiteralThis(t,this.type_context) )
      forEach (p in m_temp.parameters) args.add( CmdAccess(t,p.name) )
      statements.add( CmdReturn( t, CmdAccess(t,task_type.name,args) ) )

      # Convert resolved method into task "functor"
      forEach (v in m_temp.get_locals)
        local p_name = v.name + "_" + v.index
        task_type.add_property( v.t, p_name, v.type )
      endForEach

      local task_args = TaskArgs( task_type, m_execute, this.type_context, this )
      if (not is_global) task_args.context_property = task_type.add_property( t, "context", this.type_context )
      task_args.ip_property = task_type.add_property( t, "ip", Program.type_Int32 )

      forEach (statement in m_temp.statements)
        statement = statement.cloned( task_args )
        if (statement) task_args.add( statement )
      endForEach
      if (task_args.cmd_task_control.current_section.statements.count == 0)
        task_args.cmd_task_control.current_section.statements.add( task_args.create_return(t) )
      endIf

      m_execute.statements.add( task_args.cmd_task_control )

      task_type.configure

    method set_incorporated->Method
      attributes.add( Attribute.is_incorporated )
      return this

    method set_type_context( @type_context )->Method
      return this

    method to->String
      if (signature)
        if (not full_name) full_name = "$.$" (type_context.name,signature)
        return full_name
      else
        return "$.$" (type_context.name,name)
      endIf

    method trace_used_code
      if (is_used) return   # Already traced
      is_used = true

      type_context.trace_used_code

      forEach (param in parameters) param.type.trace_used_code
      if (return_type) return_type.trace_used_code

      statements.trace_used_code

      if (introspection_call_handler) introspection_call_handler.is_used = true

    method address->Int64 [macro]
      native "(RogueInt64)(intptr_t)$this"

    method signature_with_named_args->String
      local buffer = StringBuilder()
      buffer.print name
      buffer.print "("
      local first = true
      forEach (param in parameters)
        if (first) first = false
        else       buffer.print( "," )
        buffer.print( param.original_name ).print( ':' ).print( param.type.name )
      endForEach
      buffer.print ")"
      return buffer->String

    method validate
      # Perform miscellaneous validation
      if (is_used)
        if (overridden_method)
          if( index != overridden_method.index )
            @trace this, index, overridden_method, overridden_method.index
          endIf
          require( index == overridden_method.index )
        endIf
      endIf
endClass

