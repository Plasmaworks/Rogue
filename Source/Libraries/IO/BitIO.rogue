$include IO/DataIO

class BitReader : DataReader
  PROPERTIES
    bit_buffer   : Int64
    buffer_count : Int32

  METHODS
    method flush
      buffer_count = 0

    method has_another->Logical
      return buffer_count or input.has_another

    method has_another( nbits:Int32 )->Logical
      while (buffer_count < nbits and input.has_another)
        bit_buffer = (bit_buffer :<<: 8) | input.read
        buffer_count += 8
      endWhile
      return (buffer_count >= nbits)

    method peek->Byte
      return peek(8)->Byte

    method peek( nbits:Int32 )->Int32
      has_another( nbits )  # buffer enough bits

      if (buffer_count <= nbits)
        return (bit_buffer & ((Int64(1):<<:buffer_count)-1))
      endIf

      return (bit_buffer :>>: (buffer_count-nbits)) & ((Int64(1):<<:nbits)-1)

    method read->Byte
      return read( 8 )->Byte

    method read( nbits:Int32 )->Int32
      has_another( nbits )  # buffer enough bits

      if (buffer_count <= nbits)
        local result = bit_buffer & ((Int64(1):<<:buffer_count)-1)
        buffer_count = 0
        bit_buffer = 0
        return result
      endIf

      buffer_count -= nbits
      return (bit_buffer :>>: buffer_count) & ((Int64(1):<<:nbits)-1)
endClass

class BitWriter : DataWriter
  PROPERTIES
    bit_buffer   : Int64
    buffer_count : Int32

  METHODS
    method flush
      if (buffer_count) write( 0, 8-buffer_count )
      prior.flush

    method write( value:Byte )
      write( value, 8 )

    method write( value:Int32, nbits:Int32 )
      bit_buffer = (bit_buffer :<<: nbits) | (value & ((Int64(1):<<:nbits)-1))
      buffer_count += nbits
      while (buffer_count >= 8)
        buffer_count -= 8
        output.write( bit_buffer :>>: buffer_count )
      endWhile

endClass
