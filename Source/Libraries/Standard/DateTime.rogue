#==============================================================================
# DateTime.rogue
#
# 2020.03.16 - Created by Abe Pralle
#==============================================================================
class DateTime( date:Date, time:Time ) [compound]
  GLOBAL METHODS
    method create( t:Timestamp )->DateTime
      return DateTime(
        Date( t.year, t.month, t.day ),
        Time( t.hour, t.minute, t.second, t.millisecond )
      )

    method create( timestamp:Real64 )->DateTime
      return DateTime( Timestamp(timestamp) )

    method create( text:String )->DateTime
      # text: assumes "<date> <time>" separated by a space
      local parts = text.trimmed.split( ' ' )
      if (parts.count != 2) throw SyntaxError( "Unsupported DateTime format: " + text )
      return DateTime( Date(parts.first), Time(parts.last) )

    method now->DateTime
      return DateTime( Timestamp.now )

  METHODS
    method adjusted( years=0:Int32, months=0:Int32, weeks=0:Int32, days=0:Int32,
                 hours=0:Int32, minutes=0:Int32, seconds=0:Int32, milliseconds=0:Int32 )->DateTime
      return plus( years, months, weeks, days, hours, minutes, seconds, milliseconds )

    method plus( years=0:Int32, months=0:Int32, weeks=0:Int32, days=0:Int32,
                 hours=0:Int32, minutes=0:Int32, seconds=0:Int32, milliseconds=0:Int32 )->DateTime
      local date = date
      local time = time
      loop (years.abs)  date += date.days_in_year * years.sign
      loop (months.abs) date += date.days_in_month * years.sign
      date += weeks * 7 + days
      local dt = (((hours*3600 + minutes*60 + seconds) * 1000) + milliseconds) / 1000.0
      if (dt > 0)
        local dt_days = Int32(dt / (24*60*60))
        date += dt_days
        dt -= dt_days * 24 * 60 * 60
        local total_seconds = time.total_seconds + dt
        if (total_seconds >= 24*60*60)
          total_seconds %= 24 * 60 * 60
          ++date
        endIf
        time = Time( total_seconds )
      elseIf (dt < 0)
        local dt_days = Int32(-dt / (24*60*60))
        date -= dt_days
        dt += dt_days * 24 * 60 * 60
        local total_seconds = time.total_seconds + dt
        if (total_seconds < 0)
          total_seconds %= 24 * 60 * 60
          --date
        endIf
        time = Time( total_seconds )
      endIf
      return DateTime(date,time)

    method minus( years=0:Int32, months=0:Int32, weeks=0:Int32, days=0:Int32,
                 hours=0:Int32, minutes=0:Int32, seconds=0:Int32, milliseconds=0:Int32 )->DateTime
      return plus( -years, -months, -weeks, -days, -hours, -minutes, -seconds, -milliseconds )

    method operator+( interval:TimeInterval )->DateTime
      return plus( &seconds=interval.total_seconds )

    method operator-( interval:TimeInterval )->DateTime
      return minus( &seconds=interval.total_seconds )

    method operator-( other:DateTime )->TimeInterval
      local lower  = other
      local higher = this
      if (higher < lower) swapValues( lower, higher )

      local this_seconds  = (date - lower.date) * (24*3600) + time.total_seconds
      local other_seconds = (other.date - lower.date) * (24*3600) + other.time.total_seconds

      return TimeInterval( this_seconds - other_seconds )

    method operator<( other:DateTime )->Logical
      return (date < other.date) or (date == other.date and time < other.time)

    method operator==( other:DateTime )->Logical
      return (date == other.date) and (time == other.time)

    method to->Date
      return date

    method description->String
      return "$ $" (date,time)
      # Equivalent to:
      #   return "D(yyyy-mm-dd) T(hh:mm:ss)"

    method to->String( format:String )
      use builder = StringBuilder.pool
        local scanner = Scanner( format )
        forEach (ch in scanner)
          if (ch == 'D')
            if (scanner.consume('('))
              local paren_count = 1
              use format_builder = StringBuilder.pool
                while (scanner.has_another)
                  if (paren_count == 1 and scanner.consume(')')) escapeWhile
                  local ch2 = scanner.read
                  if (ch2 == '(')     ++paren_count
                  elseIf (ch2 == ')') --paren_count
                  format_builder.print( ch2 )
                endWhile
                builder.print( date->String(format_builder->String) )
              endUse
            else
              builder.print( date->String )
            endIf
          elseIf (ch == 'T')
            if (scanner.consume('('))
              local paren_count = 1
              use format_builder = StringBuilder.pool
                while (scanner.has_another)
                  if (paren_count == 1 and scanner.consume(')')) escapeWhile
                  local ch2 = scanner.read
                  if (ch2 == '(')     ++paren_count
                  elseIf (ch2 == ')') --paren_count
                  format_builder.print( ch2 )
                endWhile
                builder.print( time->String(format_builder->String) )
              endUse
            else
              builder.print( time->String )
            endIf
          else
            builder.print( ch )
          endIf
        endForEach
        return builder->String
      endUse

    method to->Time
      return time

    method to->Timestamp
      return Timestamp( (this.adjusted(&hours=-Timestamp.gmt_time_zone_offset) - DateTime(Date(1970,1,1),Time(0))).total_seconds )

    method with_date( date:Date )->DateTime
      return DateTime( date, time )

    method with_time( time:Time )->DateTime
      return DateTime( date, time )

endClass

