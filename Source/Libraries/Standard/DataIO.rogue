#==============================================================================
# DataIO.rogue
#==============================================================================

class DataReader : Reader<<Byte>>
  PROPERTIES
    source : Reader<<Byte>>

  METHODS
    method init

    method init( source )

    method init( file:File )
      init( file.reader )

    method init( list:Byte[] )
      init( ListReader<<Byte>>(list) )

    method has_another->Logical
      return source.has_another

    method position->Int32
      return source.position

    method peek->Byte
      if (not source.has_another) return 0
      return source.peek

    method read->Byte
      if (not source.has_another) return 0
      return source.read

    method read_real64->Real64
      return read_int64.real_bits

    method read_real32->Real32
      return read_int32.real_bits

    method read_int64->Int64
      local result = read_int32 : Int64
      return (result :<<: 32) | read_int32->Int64(&unsigned)

    method read_int64x->Int64
      # Reads a variable-length encoded value that is stored in 1..9 bytes.
      # Encoded values are treated as signed.
      #
      # - If the first two bits are not "10" then the first byte is cast to
      #   a signed integer value and returned. This allows for the range
      #   -64..127 using the following bit patterns:
      #
      #     0xxxxxxx    0 .. 127
      #     11xxxxxx  -64 ..  -1
      #
      # - If the first two bits are "10" then the data has been encoded
      #   in the next 6 bits as well as any number of following bytes,
      #   using 7 data bits per byte with an MSBit of 0 representing a halt
      #   or 1 a continuation. The next bit after the leading 10 is
      #   treated as negative magnitude.
      #
      #     10xxxxxx 0yyyyyyy            (13-bit number xxxxxxyyyyyyy)
      #     10xxxxxx 1yyyyyyy 0zzzzzzz   (20-bit number xxxxxxyyyyyyyzzzzzzz)
      #     etc.
      local b = read : Int32
      if ((b & 0xc0) != 0x80) return b->Byte.signed

      local result = (b & 0b0011_1111) : Int64   #  0..63  (unsigned)
      if (result >= 32) result -= 64             # -64..63 (signed)

      loop
        local next = read
        result = (result :<<: 7) | (next & 0b0111_1111)
        if (not (next & 0b1000_0000)) escapeLoop
      endLoop

      return result

    method read_int32->Int32
      local result = read : Int32
      result = (result:<<:8) | read
      result = (result:<<:8) | read
      return (result:<<:8) | read

    method read_int32x->Int32
      return read_int64x->Int32

    method read_byte->Byte [macro]
      return this.read

    method read_bytes->Byte[]
      return read_bytes( Byte[] )

    method read_bytes( buffer:Byte[] )->Byte[]
      local count = read_int32x
      buffer.reserve( count )
      loop (count) buffer.add( read_byte )
      return buffer

    method read_logical->Logical
      return (read != 0)

    method read_string->String
      return read_string( StringBuilder() )->String

    method read_string( buffer:StringBuilder )->StringBuilder
      local count = read_int32x
      buffer.reserve( count )  # Reserves bytes, not characters, so may be less than required. That's okay.
      loop (count) buffer.print( read_int32x->Character )
      return buffer

    method reset->this
      source.reset
      return this

    method seek( pos:Int32 )->this
      source.seek( pos )
      return this

    method skip( n:Int32 )->this
      source.skip( n )
      return this

endClass

class BufferedDataReader : DataReader
  PROPERTIES
    buffer : Byte[]

  METHODS
    method init
      buffer = Byte[]
      prior.init( buffer )

    method init( buffer )
      prior.init( buffer )
endClass

class DataWriter : Writer<<Byte>>
  PROPERTIES
    output : Writer<<Byte>>

  METHODS
    method init( output )

    method init( file:File )
      init( file.writer )

    method init( list:Byte[] )
      init( list.writer )

    method close
      flush
      output.close

    method flush
      output.flush

    method position->Int32
      return output.position

    method reset->this
      output.reset
      return this

    method seek( pos:Int32 )->this
      output.seek( pos )
      return this

    method seek_end()->this
      output.seek_end
      return this

    method skip( n:Int32 )->this
      output.skip( n )
      return this

    method write( value:Byte )
      output.write( value )

    method write_real64( value:Real64 )
      write_int64( value.integer_bits )

    method write_real32( value:Real32 )
      write_int32( value.integer_bits )

    method write_int64( value:Int64 )
      write_int32( value:>>>:32 )
      write_int32( value )

    method write_int64x( value:Int64 )
      # See read_int64x for format notes.
      if (value >= -64 and value < 128)
        write( value )
      else
        local extra_bytes = 1
        local shift = 7
        local min = -0x1000
        local max =  0x0FFF
        loop 7
          if (value >= min and value <= max) escapeLoop
          ++extra_bytes
          shift += 7
          min = min :<<: 7
          max = (max :<<: 7) | 0xFF
        endLoop
        write( 0b10_000000 | ((value:>>>:shift)&0b11_1111) )
        loop extra_bytes-1
          shift -= 7
          write( 0b1000_0000 | ((value:>>>:shift) & 0b0111_1111) )
        endLoop
        shift -= 7
        write( (value:>>>:shift) & 0b0111_1111 )
      endIf

    method write_int32( value:Int32 )
      write( value:>>>:24 )
      write( value:>>>:16 )
      write( value:>>>:8 )
      write( value )

    method write_int32x( value:Int32 )
      write_int64x( value->Int64 )

    method write_byte( value:Byte ) [macro]
      this.write( value )

    method write_bytes( data:Byte[], index=0:Int32, count=null:Int32? )
      if (index > data.count)
        write_int32x( 0 )
        return
      endIf

      if (index < 0)
        if (count.exists) count = count.value + index  # reduce count
        index = 0
      endIf

      if (count.exists) count = count.value.clamped( 0, data.count-index )
      else              count = data.count - index
      write_int32x( count.value )
      loop (count.value) write_byte( data[index] ); ++index

    method write_logical( value:Logical )
      write( which{value:1 || 0} )

    method write_string( value:String )
      if (not value) value = ""
      write_int32x( value.count )
      forEach (ch in value) write_int32x( ch )

  GLOBAL METHODS
    method int64x_byte_count( value:Int64 )->Int32
      # See read_int64x for format notes.
      if (value >= -64 and value < 128)
        return 1
      else
        local extra_bytes = 1
        local shift = 7
        local min = -0x1000
        local max =  0x0FFF
        loop 7
          if (value >= min and value <= max) escapeLoop
          ++extra_bytes
          shift += 7
          min = min :<<: 7
          max = (max :<<: 7) | 0xFF
        endLoop
        return extra_bytes + 1
      endIf


endClass

class BufferedDataWriter : DataWriter
  PROPERTIES
    buffer : Byte[]

  METHODS
    method init
      buffer = Byte[]
      prior.init( buffer )

    method init( buffer )
      prior.init( buffer )

    method clear->BufferedDataWriter
      buffer.clear
      output.reset
      return this

    method write( list:Byte[] )
      buffer.reserve( list.count ).data.set( position, list.data, 0, list.count )
      skip( list.count )
endClass

