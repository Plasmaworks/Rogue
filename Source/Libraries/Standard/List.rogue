class GenericList [abstract]
endClass

class List<<$DataType>> : GenericList
  PROPERTIES
    data      : Array<<$DataType>>
    count     : Int32

  METHODS
    method init
      init( 0 )

    method init( initial_capacity:Int32 )
      if (initial_capacity != capacity) data = Array<<$DataType>>( initial_capacity )
      clear

    method init( initial_capacity:Int32, initial_value:$DataType ) [preferred]
      if (initial_capacity)
        data = Array<<$DataType>>( initial_capacity )
        count = initial_capacity
        forEach (i in 0..<initial_capacity) data[i] = initial_value
      else
        clear
      endIf

    method init( initial_capacity:Int32, fn:(Function()->$DataType) )
      if (initial_capacity)
        data = Array<<$DataType>>( initial_capacity )
        count = initial_capacity
        forEach (i in 0..<initial_capacity) data[i] = fn()
      else
        clear
      endIf

    method init( initial_capacity:Int32, fn:(Function(Int32)->$DataType) )
      if (initial_capacity)
        data = Array<<$DataType>>( initial_capacity )
        count = initial_capacity
        forEach (i in 0..<initial_capacity) data[i] = fn( i )
      else
        clear
      endIf

    method apply( fn:(Function($DataType)) )
      forEach (item in this) fn( item )

    method applying( fn:(Function($DataType)) )->$DataType[]
      return cloned.[ apply(fn) ]

    method cloned->$DataType[]
      local result = $DataType[]( count )
      forEach (value in this)
        result.add( value )
      endForEach
      return result

    method add( value:$DataType ) [preferred]
      reserve(1)[count] = value
      ++count

    method add( other:$DataType[] )
      reserve(other.count)
      forEach (value in other) add( value )

    method capacity->Int32
      if (not data) return 0
      return data.count

    method clear
      discard_from( 0 )

    method contains( value:$DataType )->Logical
      return this.locate( value )?

    method contains( query:(Function($DataType)->Logical) )->Logical
      return first( query ).exists

    method contains( other:$DataType[] )->Logical
      return this.locate( other )?

    method count( query:(Function($DataType)->Logical) )->Int32
      # Counts the number of items that pass the query function.
      local result = 0
      forEach (value in this)
        if (query(value)) ++result
      endForEach
      return result

    method dim( n:Int32 )
      clear
      reserve( n )
      local default_value : $DataType
      loop (n) add( default_value )

    method dim( n:Int32, fn:Function()->$DataType )
      clear
      reserve( n )
      loop (n) add( fn() )

    method dim( n:Int32, fn:Function(Int32)->$DataType )
      clear
      reserve( n )
      forEach (index in 0..<n) add( fn(index) )

    method dim( n:Int32, o:Int32 )
      if ($DataType instanceOf GenericList)
        clear
        reserve( n )
        loop (n)
          local row = $DataType()
          row.dim( o )
          add( row )
        endLoop
      else
        throw UnsupportedOperationError()
      endIf

    method discard( i1:Int32, n=1:Int32 )
      local i2 = i1 + n
      data.set( i1, data, i2, (count-i2) )
      discard_from( count-n )

    method discard( discard_if:(Function($DataType)->Logical) )
      # Discards any item that passes the query function.
      use rewriter = this.rewriter
        forEach (value in rewriter)
          if (not discard_if(value)) rewriter.write( value )
        endForEach
      endUse

    method discarding( discard_if:(Function($DataType)->Logical) )->$DataType[]
      # Returns a copy of the list without any item that passes the query function.
      return cloned.[ discard(discard_if) ]

    method discard_from( index:Int32 )
      if (data)
        local n = (count - index)
        if (n > 0)
          data.zero( index, n )
          count = index
        endIf
      endIf

    method ensure_capacity( desired_capacity:Int32 )
      reserve( desired_capacity - count )

    method expand( additional_count:Int32 )
      # Adds 'additional_count' items to this list, each with the default
      # value of null/0/false.
      reserve( additional_count )
      count += additional_count

    method expand_to_count( minimum_count:Int32 )
      # Expands the list if necessary to have at least 'minimum_count' elements.
      if (count < minimum_count)
        ensure_capacity( minimum_count )
        count = minimum_count
      endIf

    method expand_to_include( index:Int32 )
      # Expands the list if necessary to include the specified index.
      expand_to_count( index + 1 )

    method fill( value:$DataType )
      this[ forEach of this ] = value

    method filter( keep_if:(Function($DataType)->Logical) )
      this.keep( keep_if )

    method filtered( keep_if:(Function($DataType)->Logical) )->$DataType[]
      return this.keeping( keep_if )

    method find( query:(Function($DataType)->Logical) )->$DataType?
      forEach (value in this)
        if (query(value)) return value
      endForEach
      return null

    method first->$DataType
      return this.data[0]

    method first( query:(Function($DataType)->Logical) )->$DataType?
      forEach (value in this)
        if (query(value)) return value
      endForEach

      return null

    method from( i1:Int32 )->ListIterator<<$DataType>>
      return ListIterator<<$DataType>>( this, i1 )

    method from( i1:Int32, i2:Int32 )->ListIterator<<$DataType>>
      return ListIterator<<$DataType>>( this, i1, i2+1 )

    method get( index:Int32 )->$DataType [essential macro]
      return this.data[ index ]

    method get( query:(Function($DataType)->Logical) )->$DataType[]
      local results = $DataType[]

      forEach (value in this)
        if (query(value)) results.add( value )
      endForEach

      return results

    method get_x( index:Int32 )->$DataType
      # Expands this list to include 'index', if necessary, and then returns
      # the value at 'index'.
      if (native("(((unsigned int)$index) < (unsigned int)$count)")->Logical)
        return this.data[index]
      else
        if (index < 0) throw OutOfBoundsError( index, count )
        expand_to_count( index+1 )
        return this[ index ]
      endIf

    method heapsort( compare_fn:(Function($DataType,$DataType)->Logical) )
      Heapsort<<$DataType>>.sort( this, compare_fn )

    method insert( value:$DataType, before_index=0:Int32 )
      if (before_index < 0) before_index = 0

      if (before_index >= count)
        add( value )
        return
      else
        reserve( 1 )

        shift( &i1=before_index, &delta=1 )

        # Copy in the new value
        data[ before_index ] = value
      endIf

    method insert( other:$DataType[], before_index=0:Int32 )
      if (before_index < 0) before_index = 0

      local n = other.count
      if (n == 0) return

      if (before_index >= count)
        add( other )
        return
      else
        reserve( n )

        # Shift everything over
        shift( &i1=before_index, &delta=n )

        # Copy in the new values
        forEach (value in other)
          data[ before_index ] = value
          ++before_index
        endForEach
      endIf

    method insertion_sort( compare_fn:(Function($DataType,$DataType)->Logical) )
      InsertionSort<<$DataType>>.sort( this, compare_fn )

    method is_empty->Logical
      return count == 0

    method iterator->ListIterator<<$DataType>>
      return ListIterator<<$DataType>>( this, 0 )

    method join( separator="\n":String )->String
      local builder = StringBuilder()
      local first = true
      forEach (item in this)
        if (first) first = false
        else       builder.print( separator )
        builder.print( item )
      endForEach
      return builder->String

    method keep( keep_if:(Function($DataType)->Logical) )
      use rewriter = this.rewriter
        forEach (value in rewriter)
          if (keep_if(value)) rewriter.write( value )
        endForEach
      endUse

    method keeping( keep_if:(Function($DataType)->Logical) )->$DataType[]
      return cloned.[ keep(keep_if) ]

    method last->$DataType
      return this.data[ count - 1 ]

    method last( query:(Function($DataType)->Logical) )->$DataType?
      forEach (value in this step -1)
        if (query(value)) return value
      endForEach

      return null

    method limit_capacity( max_capacity:Int32 )
      # If necessary, reduce the backing array to be no larger than 'max_capacity'.
      # Content will be truncated if necessary - the resulting 'count' will be
      # <= 'max_capacity'.
      if (capacity > max_capacity)
        if (max_capacity <= 0)
          data = null
          count = 0
        else
          count = count.or_smaller( max_capacity )
          local new_data = Array<<$DataType>>( max_capacity )
          new_data.set( 0, data, 0, count )
          data = new_data
        endIf
      endIf

    method locate( value:$DataType, i1=0:Int32 )->Int32? [preferred]
      if (isReference($DataType))
        if (value is null)
          forEach (i of this from i1)
            if (value is this[i]) return i
          endForEach
          return null
        endIf
      endIf

      forEach (i of this from i1)
        if (value == this[i]) return i
      endForEach
      return null

    method locate( query:(Function($DataType)->Logical), i1=0:Int32 )->Int32?
      forEach (value at index in this from i1)
        if (query(value)) return index
      endForEach
      return null

    method locate( other:$DataType[], i1=0:Int32 )->Int32?
      local other_count = other.count
      if (count < other_count) return null
      forEach (starting_index in i1..(count-other_count))

        contingent

          forEach (i in 0..<other_count)
            local a = this[ starting_index + i ]
            local b = other[ i ]
            if (a is null)
              necessary (b is null)
            elseIf (b is null)
              necessary (a is null)
            else
              necessary (a == b)
            endIf
          endForEach

        satisfied
          return starting_index
        endContingent

      endForEach
      return null

    method locate_last( value:$DataType, i1=null:Int32? )->Int32?
      local starting_index = ?:{ i1 || count-1 }
      if (isReference($DataType))
        if (value is null)
          forEach (i of this from starting_index step -1)
            if (value is this[i]) return i
          endForEach
          return null
        endIf
      endIf

      forEach (i of this from starting_index step -1)
        if (value == this[i]) return i
      endForEach
      return null

    method locate_last( query:(Function($DataType)->Logical), i1=null:Int32? )->Int32?
      local starting_index = ?:{ i1 || count-1 }
      forEach (value at index in this from starting_index step -1)
        if (query(value)) return index
      endForEach
      return null

    method locate_last( other:$DataType[], i1=null:Int32? )->Int32?
      local starting_index = ?:{ i1 || count-1 }
      local other_count = other.count
      if (count < other_count) return null
      forEach (first_i in starting_index.or_smaller(count-other_count) downTo 0)

        contingent

          forEach (i in 0..<other_count)
            local a = this[ first_i + i ]
            local b = other[ i ]
            if (a is null)
              necessary (b is null)
            elseIf (b is null)
              necessary (a is null)
            else
              necessary (a == b)
            endIf
          endForEach

        satisfied
          return first_i
        endContingent

      endForEach
      return null

    method map<<$ToType>>( map_fn:(Function($DataType)->$ToType) )->$ToType[]
      local result = $ToType[]( capacity )
      forEach (element in this) result.add( map_fn(element) )
      return result

    method modify( fn:(Function($DataType)->$DataType) )
      forEach (index of this) this[index] = fn(this[index])

    method modified( fn:(Function($DataType)->$DataType) )->$DataType[]
      return cloned.[ modify(fn) ]

    method operator==( other:$DataType[] )->Logical
      if (this is other) return true
      return count == other.count and locate(other).exists

    method operator*( n:Int32 )->$DataType[]
      # Creates a new list containing 'n' concatenated copies of this list.
      # Useful for creating an array-style list. For example, a list of 256 0's: [0] * 256
      local result = $DataType[]( this.count * n )
      loop (n) result.add( this )
      return result

    method to_value_package->Value
      return this->Value

    method permutation( n:Int64, output_list=null:$DataType[] )->$DataType[]
      # n           - A value between 0 and (permutation_count-1).  0 gives the
      #               original list and (permutation_count-1) gives the list in
      #               reverse order.
      # output_list - A optional existing list to store the output permutation in.
      #               Will be created dynamically if not passed in.
      if (not output_list) output_list = $DataType[]( count )
      output_list.clear
      if (count == 0) return output_list

      forEach (value in this) output_list.add( value )

      local c = count
      while (c)
        output_list.add( output_list.remove_at(n % c) )
        n /= c
        --c
      endWhile

      return output_list

    method permutation_count->Int64
      # The permutation count is the factorial of the list size
      if (count == 0) return 0

      local c = 1 : Int64
      forEach (n in 2..count)
        c *= n
      endForEach

      return c

    method quicksort( compare_fn:(Function($DataType,$DataType)->Logical) )
      Quicksort<<$DataType>>.sort( this, compare_fn )

    method random( generator=Random:Random )->$DataType
      # Returns an element at random
      if (not count)
        local default_value : $DataType
        return default_value
      endIf
      return this[ generator.int32(this.count) ]

    method reader->ListReader<<$DataType>>
      return ListReader<<$DataType>>( this )

    method reduce<<$ToType>>( reduce_fn:(Function(Int32,$DataType,$ToType)->$ToType) )->$ToType
      local result : $ToType
      forEach (index of this)
        result = reduce_fn( index, this[index], result )
      endForEach
      return result

    method reserve( additional_elements:Int32 )->$DataType[]
      local required_capacity = count + additional_elements
      if (required_capacity == 0) return this

      if (not data)
        if (required_capacity == 1) required_capacity = 10
        data = Array<<$DataType>>( required_capacity )
      elseIf (required_capacity > data.count)
        local cap = capacity
        if (required_capacity < cap+cap) required_capacity = cap+cap
        local new_data = Array<<$DataType>>( required_capacity )
        new_data.set( 0, data )
        data = new_data
      endIf

      return this

    method remove( value:$DataType )->$DataType
      local index = locate( value )
      if (index)
        return remove_at( index.value )
      else
        return value
      endIf

    method remove( query:(Function($DataType)->Logical) )->$DataType[]
      # Returns the list of items that pass the query function while removing
      # them from this list.
      local result = $DataType[]
      use rewriter = this.rewriter
        forEach (value in rewriter)
          if (query(value)) result.add( value )
          else              rewriter.write( value )
        endForEach
      endUse
      return result

    method remove_at( index:Int32 )->$DataType
      if (native("(((unsigned int)$index) >= (unsigned int)$count)")->Logical) throw OutOfBoundsError( index, count )

      local result = this[ index ]
      data.set( index, data, index+1 )
      local zero_value : $DataType
      --count
      data[count] = zero_value
      return result

    method remove_first->$DataType
      return this.remove_at(0)

    method remove_last->$DataType
      return remove_at( count - 1 )

    method remove_random( generator=Random:Random )->$DataType
      # Removes and returns an element at random
      # If list is empty, returns the default value for the type (0/false/null).
      if (not count)
        local default_value : $DataType
        return default_value
      endIf
      return remove_at( generator.int32(this.count) )

    method resize( new_count:Int32 )
      if (count != new_count)
        expand_to_count( new_count )
        discard_from( new_count )
      endIf

    method rest( result_list=null:$DataType[] )->$DataType[]
      # Returns the "rest" of this list: a list containing all of the items
      # in this list after the first item.  The `result_list` parameter is
      # used if it's specified; otherwise a new list is created and returned.
      #
      # If this list is empty then an empty list is returned.
      ensure result_list
      result_list.reserve( (count-1).clamped_low(0) )

      forEach (index of this)
        if (index > 0) result_list.add( this[index] )
      endForEach

      return result_list

    method reverse
      reverse( 0, count-1 )

    method reverse( i1:Int32, i2:Int32 )
      if (i1 < 0) i1 = 0
      if (i2 >= count) i2 = count - 1

      local _data = data
      while (i1 < i2)
        local temp = _data[i1]
        _data[i1] = _data[i2]
        _data[i2] = temp
        ++i1
        --i2
      endWhile

    method rewriter->ListRewriter<<$DataType>>
      return ListRewriter<<$DataType>>.acquire( this )

    method set( index:Int32, new_value:$DataType )
      this.data[ index ] = new_value

    method set_first( new_value:$DataType )
      data[ 0 ] = new_value

    method set_last( new_value:$DataType )
      data[ count - 1 ] = new_value

    method set_x( index:Int32, new_value:$DataType )
      # Expands this list to include 'index', if necessary, and then sets
      # the value at 'index' to be 'new_value'.
      if (native("(((unsigned int)$index) < (unsigned int)$count)")->Logical)
        this.data[index] = new_value
      else
        if (index < 0) throw OutOfBoundsError( index, count )
        expand_to_count( index+1 )
        this[ index ] = new_value
      endIf

    method shift( i1=0:Int32, element_count=null:Int32?, delta=0:Int32, fill=null:$DataType? )
      if (delta == 0) return

      local n : Int32
      if (element_count.exists) n = element_count.value
      else                      n = count - i1

      local dest_i2 = (i1 + delta + n) - 1
      expand_to_include( dest_i2 )
      data.set( i1+delta, data, i1, n )
      if (fill.exists)
        local value = fill.value
        if (delta > 0)
          forEach (i in i1..i1+delta-1) data[i] = value
        else
          forEach (i in i1+delta+n..i1+n-1) data[i] = value
        endIf
      endIf

    method shuffle( generator=Random:Random )
      local n = count
      forEach (i of this) swap( i, generator.int32(n) )

    method shuffled( generator=Random:Random )->$DataType[]
      return cloned.[ shuffle(generator) ]

    method sort( compare_fn:(Function($DataType,$DataType)->Logical) )
      this.quicksort( compare_fn )

    method sorted( compare_fn:(Function($DataType,$DataType)->Logical) )->$DataType[]
      return cloned.[ sort(compare_fn) ]

    method subset( i1:Int32 )->$DataType[]
      return subset( i1, count-i1 )

    method subset( i1:Int32, n:Int32 )->$DataType[]
      if (n < 0)
        n = (count - i1) + n
        if (n <= 0) return $DataType[]
      endIf
      local result = $DataType[]( n )
      forEach (i in i1..<i1+n) result.add( this[i] )
      return result

    method swap( i1:Int32, i2:Int32 )
      local temp = data[i1]
      data[i1] = data[i2]
      data[i2] = temp

    method to->String
      return "[$]" (this.join(","))

    method to->Value
      local result = @[]
      forEach (item in this)
        if (isReference(item))
          if (item) result.add( item->Value )
          else      result.add( NullValue )
        else
          result.add( Value(item) )
        endIf
      endForEach
      return result

    method to_array->Array<<$DataType>>
      local result = Array<<$DataType>>( count )
      forEach (i of this)
        result[i] = this[i]
      endForEach
      return result

    method unpack( values:Value )
      clear
      reserve( values.count )

      if (not isAspect($DataType))
        # Can't unpack aspect values because they're abstract types

        forEach (value in values)
          add( $DataType.from_value(value) )
        endForEach
      endIf

    method writer->ListWriter<<$DataType>>
      return ListWriter<<$DataType>>( this )

$if defined(SCRIPT_HELPERS)
    method _get_element( index:Int32 )->$DataType [essential]
      if (index < 0 or index >= count)
        throw Error("Index out of range")
      endIf
      return get(index)

    method _set_element( index:Int32, new_value:$DataType ) [essential]
      if (index < 0 or index >= count)
        throw Error("Index out of range")
      endIf
      set(index, new_value)

    method _get_base_address()->IntPtr [essential]
      return native("&($this->data->as_bytes)")->IntPtr
$endIf
endClass

class ListIterator<<$DataType>>( list:($DataType[]), position=0:Int32, limit=-1:Int32 ) [compound]
  METHODS
    method has_another->Logical
      if (limit == -1) return (position < list.count)
      else             return (position < limit)

    method has_another( n:Int32 )->Logical
      if (limit == -1) return (position + n <= list.count)
      else             return (position + n <= limit)

    method peek( lookahead=0:Int32 )->$DataType
      return list[ position+lookahead ]

    method read->$DataType [mutating]
      ++position
      return list[ position-1 ]

    method read_another->$DataType? [mutating]
      if (limit == -1)
        if (position == list.count) return null
      else
        if (position == limit) return null
      endIf
      ++position
      return list[ position-1 ]

    method to->String
      return to_list->String

    method to->$DataType[]( result=null:$DataType[] )
      return to_list( result )

    method to_list( result=null:$DataType[] )->$DataType[]
      ensure result( list.count )
      result.add( forEach in this )
      return result
endClass

class ListReader<<$DataType>> : Reader<<$DataType>>
  PROPERTIES
    list       : $DataType[]
    position   : Int32
    limit      : Int32
    is_limited : Logical

  METHODS
    method init( list, position=0 )

    method init( list, position, limit )
      is_limited = true

    method has_another->Logical
      if (is_limited) return (position < limit)
      else            return (position < list.count)

    method peek->$DataType
      return list[ position ]

    method read->$DataType
      ++position
      return list[ position - 1 ]

    method reset
      seek( 0 )

    method seek( pos:Int32 )
      if (pos < 0) pos = 0

      if (is_limited)
        if (pos > limit) pos = limit
      else
        if (pos > list.count) pos = list.count
      endIf

      position = pos

endClass

class ListWriter<<$DataType>> : Writer<<$DataType>>
  PROPERTIES
    list     : $DataType[]
    position : Int32

  METHODS
    method init( list )
      position = list.count

    method close
      list.discard_from( position )

    method seek( pos:Int32 )
      if (pos < 0) pos = 0
      position = pos
      list.expand_to_count( pos )

    method seek_end()
      position = list.count

    method write( value:$DataType )
      if (position == list.count) list.add( value )
      else                        list[ position ] = value
      ++position
endClass

augment Byte[]
  GLOBAL METHODS
    method create( file:File )->Byte[]
      return file.load_as_bytes

  METHODS
    method init( hex:String )
      add( hex )

    method add( hex:String )
      if (hex.count & 1)
        println "ERROR: odd number of characters in Byte[].add(hex:String)."
        return
      endIf

      local dest_i = count
      reserve( hex.count/2 )
      count += hex.count/2

      forEach (hex_i of hex step 2)
        data[ dest_i ] = (hex[hex_i].to_number(16) :<<: 4) | hex[hex_i+1].to_number(16)
        ++dest_i
      endForEach

    method has_byte_order_mark->Logical
      if (count < 3) return false
      if (this[0] != 0xEF) return false
      if (this[1] != 0xBB) return false
      if (this[2] != 0xBF) return false
      return true

    method is_valid_utf8->Logical
      native @|int n = $count;
              |unsigned char* src = $this->data->as_bytes - 1;
              |while (--n >= 0)
              |{
              |  int b = *(++src);
              |  if (b & 0x80)
              |  {
              |    // 1xxx_xxxx
              |    if (b & 0x40)
              |    {
              |      // 11xx_xxxx
              |      if (b & 0x20)
              |      {
              |        // 111x_xxxx
              |        if (b & 0x10)
              |        {
              |          // 1111_xxxx
              |          if (b & 8)
              |          {
              |            // 1111_1xxx is illegal
              |            return false;
              |          }
              |          else
              |          {
              |            // 1111_0xxx
              |            if (n < 2) return false;
              |            if ((*(++src) & 0xC0) != 0x80) return false;
              |            if ((*(++src) & 0xC0) != 0x80) return false;
              |            if ((*(++src) & 0xC0) != 0x80) return false;
              |            n -= 3;
              |          }
              |        }
              |        else
              |        {
              |          // 1110_xxxx
              |          if (n < 1) return false;
              |          if ((*(++src) & 0xC0) != 0x80) return false;
              |          if ((*(++src) & 0xC0) != 0x80) return false;
              |          n -= 2;
              |        }
              |      }
              |      else
              |      {
              |        // 110x_xxxx
              |        if (--n < 0) return false;
              |        if ((*(++src) & 0xC0) != 0x80) return false;
              |      }
              |    }
              |    else
              |    {
              |      // 10xx_xxxx is an illegal first byte of UTF8
              |      return false;
              |    }
              |  //else 0xxx_xxxx is fine
              |  }
              |}
              |return true;

    method to_base64->String
      local base64_count = ((count+2) / 3) * 4
      local result = StringBuilder( base64_count )
      local reader = BitReader( this )
      while (reader.has_another(6))
        result.print( reader.read(6).to_digit(&base64) )
      endWhile
      if (reader.buffer_count)
        local available_bits = reader.buffer_count
        result.print( (reader.read(available_bits) :<<: (6-available_bits)).to_digit(&base64) )
      endIf
      while ((result.count & 3) != 0) result.print('=')
      return String( result )

    method to_hex_string( &uppercase, &lowercase )->String
      # Returns a string of hexadecimal digit pairs encoding each byte.
      # Uppercase by default unless &lowercase is specified.
      #
      # Example:
      #
      #   println Byte[][0,127,160,255].to_hex_string  # "007FA0FF"
      local buffer = StringBuilder( count*2 )
      forEach (b in this) buffer.print( ((b:>>:4)&15).to_hex_character ).print( (b&15).to_hex_character )
      if (lowercase) return buffer->String.to_lowercase
      else           return buffer->String.to_uppercase
endAugment

augment String[]
  METHODS
    method join( separator="\n":String )->String
      <replace>
      # A better version of join() for String lists
      local total_count = 0
      forEach (line in this) total_count += line.count
      if (this.count) total_count += separator.count * (this.count-1)

      local builder = StringBuilder( total_count )
      local first = true
      forEach (line in this)
        if (first) first = false
        else       builder.print( separator )
        builder.print( line )
      endForEach

      return builder->String
endAugment

class GenericListRewriter [abstract];

class ListRewriter<<$DataType>> : GenericListRewriter, Writer<<$DataType>>
  GLOBAL PROPERTIES
    pool [threadLocal] : GenericListRewriter[]

  PROPERTIES
    list        : $DataType[]
    read_index  : Int32
    write_index : Int32

  GLOBAL METHODS
    method acquire( list:$DataType[] )->ListRewriter<<$DataType>>
      if (pool and pool.count)
        return (pool.remove_last as ListRewriter<<$DataType>>).[ reset(list) ]
      else
        return ListRewriter<<$DataType>>( list )
      endIf

  METHODS
    method init( list )

    method finish
      list.discard_from( write_index )

    method has_another->Logical
      if (read_index < list.count)
        return true
      else
        # automatically finish up
        finish
        return false
      endIf

    method on_use->this
      return this

    method on_end_use( err:Exception )->Exception
      finish
      (ensure pool).add( this )
      return err

    method peek( lookahead=0:Int32 )->$DataType
      return list[ read_index + lookahead ]

    method read->$DataType
      ++read_index
      return list[ read_index - 1 ]

    method reset( new_list=null:$DataType[] )
      if (new_list) list = new_list  # else use same as before
      read_index = 0
      write_index = 0

    method write( value:$DataType )
      if (write_index == read_index)
        # We're adding more items to the list then it originally had.

        # Make sure there's at least one more spot
        list.reserve( 1 )

        local unread_count = list.count - read_index

        # Shift all the unread elements over to the end of the backing array,
        # effectively inserting 1 or more empty spots for us to write
        # additional data to.
        list.data.set( list.capacity-unread_count, list.data, read_index, unread_count )

        read_index += (list.capacity - list.count)

        # Change the list count to include the shifted data
        list.count = list.capacity
      endIf

      if (write_index == list.count)
        # Values can be written after has_another initially finalizes the list
        list.add( value )
      else
        list[ write_index ] = value
      endIf
      ++write_index
endClass
