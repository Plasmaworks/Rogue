class Object [native]
  METHODS
    method init_object
      noAction

    method init
      noAction

    method description->String [nonAPI]
      return "($ 0x$)" (type_name, object_id.to_hex_string)

    method hash_code->Int32
      return object_id->Int32

    method introspector->Introspector [nonAPI]
      return Introspector( this )

    method object_id->Int64
      local addr : Int64
      native "$addr = (RogueInt64)(intptr_t)$this;"
      return addr

    method operator==( other:Object )->Logical
      return this is other

    method to_value_package->Value [nonAPI]
      local result = @{}
      local i = introspector
      forEach (p in i.type.properties)
        local name = p.name
        if (p.type.is_primitive or p.type.is_compound)
          result[ name ] = i[ name ]
        else
          result[ name ] = i[ name ].to_value_package
        endIf
      endForEach
      return result

    method to->String [nonAPI]
      return description

    method to->Value [nonAPI]
      return Value( this )

    method type_info->TypeInfo [nonAPI]
      native @|return RogueType_type_info( $this->type );

    method unpack( values:Value ) [nonAPI]
      local i = introspector
      forEach (p in i.type.properties)
        local name = p.name
        if (values.contains(name))
          if (p.type.is_primitive or p.type.is_compound or p.type.name == "String")
            i[ name ] = values[ name ]
          elseIf (p.type.is_class)
            # Wrap created object in ObjectValue() to avoid converting Int32[] -> ValueList etc.
            i[ name ] = ObjectValue( p.type.create_object(values[name]) )
          endIf
        endIf
      endForEach

endClass

