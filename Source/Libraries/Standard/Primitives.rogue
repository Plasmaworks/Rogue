class Real64 [primitive]
  GLOBAL METHODS
    method create( value:Real64 )->Real64
      return value

    method create( value:Real32 )->Real64
      return value->Real64

    method create( value:Int64 )->Real64
      return value->Real64

    method create( value:Int32 )->Real64
      return value->Real64

    method create( value:Character )->Real64
      return value->Real64

    method create( value:Byte )->Real64
      return value->Real64

    method create( value:Logical )->Real64
      return which{ value:1 || 0 }

    method from_value( value:Value )->Real64
      return value->Real64

  METHODS
    method abs->Real64
      if (this >= 0) return this
      else           return -this

    method ceiling->Real64 [macro]
      return Math.ceiling( this )

    method clamped( low:Real64, high:Real64 )->Real64
      if (this < low)  return low
      if (this > high) return high
      return this

    method clamped_low( low:Real64 )->Real64
      if (this < low) return low
      return this

    method clamped_high( high:Real64 )->Real64
      if (this > high) return high
      return this

    method decimal_digit_count->Int32
      use buffer = StringBuilder.pool
        buffer.print( this )
        local dot = buffer.locate( '.' )

        # NaN, +/- infinity
        if (not dot.exists) return 0

        local start = dot.value + 1
        local count = buffer.count

        # Check for "3.0" etc.
        if (count == start + 1 and buffer[start] == '0') return 0

        return (count - start)
      endUse

    method digit_count->Int32
      use buffer = StringBuilder.pool
        return buffer.print( this ).count
      endUse

    method floor->Real64 [macro]
      return Math.floor( this )

    method format( decimal_digits=null:Int32? )->String
      local digits = which{ decimal_digits || decimal_digit_count }
      return StringBuilder().print( this, digits )->String

    method format( fmt:String )->String
      # fmt
      #   C-style ",0N.D" (everything is optional)
      #   '0' - pad with 0's instead of spaces
      #   'N' - Minimum digits before decimal point
      #   '.' - Include decimal (fractional) value in output.
      #   'D' - Number of digits after decimal point.
      if (fmt.contains(','))
        # Move comma to beginning
        fmt = "," + fmt.before_first(',') + fmt.after_first(',')
      endIf

      local decimal_fmt = fmt.from_first( '.' )
      local this_int64 = Int64( this )
      local decimal_st : String
      if (decimal_fmt.count > 1)
        local decimal_digits = decimal_fmt.from(1)->Int32
        decimal_st = this.format( decimal_digits )
        this_int64 = decimal_st->Real64->Int64
      else
        decimal_st = this->String
      endIf

      local result = this_int64.format( fmt.before_first('.') )

      return result + decimal_st.from_first( '.' )

    method fractional_part->Real64
      if (this >= 0) return this - whole_part
      else           return whole_part - this

    method hash_code->Int32
      return integer_bits.hash_code

    method integer_bits->Int64
      $if (target("C++"))
        native "return *((RogueInt64*)&$this);"
      $endIf

    method introspector->Introspector
      return BoxedIntrospector<<Real64>>( this->Object )

    method is_finite->Logical
      return (this == this) and (this - this == 0)

    method is_infinite->Logical
      # Returns true for positive OR negative infinity
      return (this == this) and (this - this != 0)

    method is_power_of_two->Logical
      if (this.floor != this) return false
      return this->Int64.is_power_of_two

    method is_NaN->Logical
      return (this != this)

    method is_not_a_number->Logical
      return (this != this)

    method is_number->Logical
      return (this == this) and (this - this == 0)

    method left_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.left_justified( spaces, fill )

    method lerp( a:Real64, b:Real64 )->Real64
      # Assumes this Real64 is a progress value in the 0.0 to 1.0 range.
      # Returns the position from 'a' to 'b' based on this progress.
      return Math.lerp( a, b, this )

    method or_larger( other:Real64 )->Real64
      return which{ this>=other:this || other }

    method or_smaller( other:Real64 )->Real64
      return which{ this<=other:this || other }

    method progress( a:Real64, b:Real64 )->Real64
      # Returns the progress of this number along the interval from a to b.
      # Examples:
      #   4.progress(0,16) -> 0.25
      #   4.progress(16,0) -> 0.75
      if (a == b) return 1.0
      return (this - a) / (b - a)

    method right_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.right_justified( spaces, fill )

    method sign->Real64
      return Real64( which{ this>0:1 || this<0:-1 || 0 } )

      unitTest assert( (5.0).sign == 1.0 )
      unitTest assert( (0.0).sign == 0.0 )
      unitTest assert( (-5.0).sign == -1.0 )

    method sqrt->Real64 [macro]
      return Math.sqrt( this )

    method to->Object
      return Boxed<<Real64>>(this)

    method to->String
      return "" + this

    method to->Value
      return Value( this )

    method to_power_of_two->Real64
      return this->Int64.to_power_of_two->Real64

    method whole_digit_count->Int32
      use buffer = StringBuilder.pool
        return buffer.print( this ).locate( '.' ).value
      endUse

    method whole_part->Real64
      if (this >= 0) return floor
      else           return ceiling
endClass

class Real32 [primitive]
  GLOBAL METHODS
    method create( value:Real64 )->Real32
      return value->Real32

    method create( value:Real32 )->Real32
      return value

    method create( value:Int64 )->Real32
      return value->Real32

    method create( value:Int32 )->Real32
      return value->Real32

    method create( value:Character )->Real32
      return value->Real32

    method create( value:Byte )->Real32
      return value->Real32

    method create( value:Logical )->Real32
      return which{ value:1 || 0 }

    method from_value( value:Value )->Real32
      return value->Real32

  METHODS
    method abs->Real32
      if (this >= 0) return this
      else           return -this

    method ceiling->Real32 [macro]
      return Real32( Math.ceiling(this) )

    method clamped( low:Real32, high:Real32 )->Real32
      if (this < low)  return low
      if (this > high) return high
      return this

    method clamped_low( low:Real32 )->Real32
      if (this < low) return low
      return this

    method clamped_high( high:Real32 )->Real32
      if (this > high) return high
      return this

    method digit_count->Int32
      use buffer = StringBuilder.pool
        return buffer.print( this ).count
      endUse

    method decimal_digit_count->Int32
      return this->Real64.decimal_digit_count

    method floor->Real32 [macro]
      return Real32( Math.floor(this) )

    method format( decimal_digits=null:Int32? )->String
      return Real64(this).format( decimal_digits )

    method format( fmt:String )->String
      return Real64( this ).format( fmt )

    method fractional_part->Real32
      if (this >= 0) return this - whole_part
      else           return whole_part - this

    method hash_code->Int32
      return integer_bits

    method integer_bits->Int32
      $if (target("C++"))
        native "return *((RogueInt32*)&$this);"
      $endIf

    method introspector->Introspector
      return BoxedIntrospector<<Real32>>( this->Object )

    method is_finite->Logical
      return (this == this) and (this - this == 0)

    method is_infinite->Logical
      # Returns true for positive OR negative infinity
      return (this == this) and (this - this != 0)

    method is_NaN->Logical
      return (this != this)

    method is_not_a_number->Logical
      return (this != this)

    method is_number->Logical
      return (this == this) and (this - this == 0)

    method is_power_of_two->Logical
      if (this.floor != this) return false
      return this->Int64.is_power_of_two

    method left_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.left_justified( spaces, fill )

    method lerp( a:Real32, b:Real32 )->Real32
      # Assumes this Real32 is a progress value in the 0.0 to 1.0 range.
      # Returns the position from 'a' to 'b' based on this progress.
      return Math.lerp( a, b, this )->Real32

    method or_larger( other:Real32 )->Real32
      return which{ this>=other:this || other }

    method or_smaller( other:Real32 )->Real32
      return which{ this<=other:this || other }

    method progress( a:Real32, b:Real32 )->Real64
      # Returns the progress of this number along the interval from a to b.
      # Examples:
      #   4.progress(0,16) -> 0.25
      #   4.progress(16,0) -> 0.75
      if (a == b) return 1.0
      return Real64(this - a) / Real64(b - a)

    method right_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.right_justified( spaces, fill )

    method sign->Real32
      return Real32( which{ this>0:1 || this<0:-1 || 0 } )

      unitTest assert( Real32(5.0).sign == Real32(1.0) )
      unitTest assert( Real32(0.0).sign == Real32(0.0) )
      unitTest assert( Real32(-5.0).sign == Real32(-1.0) )

    method sqrt->Real32 [macro]
      return Real32( Math.sqrt(this) )

    method to->Object
      return Boxed<<Real32>>(this)

    method to->String
      return "" + this

    method to->Value
      return Value( this )

    method to_power_of_two->Real32
      return this->Int64.to_power_of_two->Real32

    method whole_digit_count->Int32
      return this->Real64.whole_digit_count

    method whole_part->Real32
      if (this >= 0) return floor
      else           return ceiling
endClass

class Int64 [primitive]
  GLOBAL METHODS
    method create( value:Real64 )->Int64
      return value->Int64

    method create( value:Real32 )->Int64
      return value->Int64

    method create( value:Int64 )->Int64
      return value

    method create( value:Int32 )->Int64
      return value->Int64

    method create( value:Character )->Int64
      return value->Int64

    method create( value:Byte )->Int64
      return value->Int64

    method create( value:Logical )->Int64
      return which{ value:1 || 0 }

    method from_value( value:Value )->Int64
      return value->Int64

    method maximum->Int64 [macro]
      return 0x7FFFffffFFFFffff

    method minimum->Int64 [macro]
      return native("(-9223372036854775807LL - 1)")->Int64

  METHODS
    method abs->Int64
      if (this >= 0) return this
      else           return -this

    method real_bits->Real64
      $if (target("C++"))
        native "return *((RogueReal64*)&$this);"
      $endIf

    method clamped( low:Int64, high:Int64 )->Int64
      if (this < low)  return low
      if (this > high) return high
      return this

    method clamped_low( low:Int64 )->Int64
      if (this < low) return low
      return this

    method clamped_high( high:Int64 )->Int64
      if (this > high) return high
      return this

    method digit_count->Int32
      use buffer = StringBuilder.pool
        return buffer.print( this ).count
      endUse

    method format( fmt:String, bits=64:Int32 )->String
      # fmt
      #   Semi-C-style "$%,0N" - attributes can come in any order
      #   '$' - make hexadecimal
      #   '%' - make binary
      #   ',' - add commas (decimal formatting only)
      #   '0' - pad with 0's instead of spaces
      #   'N' - Minimum digits
      local is_hex = false
      local is_binary = false
      local add_commas = false
      local zero_fill = false
      local number_start : Int32?
      forEach (ch at index in fmt)
        which (ch)
          case '$': is_hex = true
          case '%': is_binary = true
          case ',': add_commas = true
          case '0': zero_fill = true
          others:   number_start = index; escapeForEach
        endWhich
      endForEach

      local digits = 0
      if (number_start.exists) digits = fmt.from( number_start.value )->String

      if (is_hex)
        add_commas = false
        if (this < 0)
          digits = bits / 4
        else
          local n = 1
          local value = this :>>>: 4
          while (value) ++n; value = value :>>>: 4
          digits = digits.or_larger( n )
        endIf

      elseIf (is_binary)
        add_commas = false
        if (this < 0)
          digits = bits
        else
          local n = 1
          local value = this :>>>: 1
          while (value) ++n; value = value :>>>: 1
          digits = digits.or_larger( n )
        endIf

      endIf

      if (zero_fill) add_commas = false

      local result : String
      if (is_hex)        result = this->String( digits, &hex )
      elseIf (is_binary) result = this->String( digits, &binary )
      else               result = this->String

      if (zero_fill) result = result.right_justified( digits, '0' )

      if (add_commas)
        local work = result
        result = ""
        while (work.count > 3)
          if (result.count) result = ',' + result
          result = work.rightmost( 3 ) + result
          work = work.leftmost( -3 )
        endWhile
        if (work.count)
          if (result.count) result = work + ',' + result
          else              result = work
        endIf
      endIf

      if (result.begins_with("-,"))
        result = '-' + result.rightmost(-2)
      endIf

      if (not zero_fill) result = result.right_justified( digits, ' ' )

      return result

    method hash_code->Int32
      return Int32(this :>>: 32) ~ Int32(this)

    method introspector->Introspector
      return BoxedIntrospector<<Int64>>( this->Object )

    method is_power_of_two->Logical
      return ((this & (this-1)) == 0)

    method left_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.left_justified( spaces, fill )

    method or_larger( other:Int64 )->Int64
      return which{ this>=other:this || other }

    method or_smaller( other:Int64 )->Int64
      return which{ this<=other:this || other }

    method print_in_power2_base( base:Int32, digits=16:Int32, buffer:PrintWriter )->PrintWriter
      local bits = 0
      local temp = base
      while (temp > 1) ++bits; temp = temp:>>>:1

      local remaining = this :>>: bits
      if (digits > 1 or remaining) remaining.print_in_power2_base( base, digits-1, buffer )
      buffer.print( (this & (base-1)).to_digit )
      return buffer

    method progress( a:Int64, b:Int64 )->Real64
      # Returns the progress of this number along the interval from a to b.
      # Examples:
      #   1.progress(1,5) -> 0.00
      #   2.progress(1,5) -> 0.25
      #   3.progress(1,5) -> 0.50
      #   4.progress(1,5) -> 0.75
      #   5.progress(1,5) -> 1.00
      #   2.progress(5,1) -> 0.75
      if (a == b) return 1.0
      return Real64(this-a) / Real64(b-a)

    method required_bit_count->Int32
      if (this < 0)
        if (this < 0xC000_0000_0000_0000) return 64
        local bits = 1 : Int64
        local threshold = -1 : Int64
        while (this < threshold)
          ++bits
          threshold = threshold :<<: 1
        endWhile
        return bits
      endIf

      if (this & 0x8000_0000_0000_0000) return 64
      if (this & 0x4000_0000_0000_0000) return 63
      local bits = 1 : Int64
      while ((Int64(1):<<:bits) <= this) ++bits
      return bits

    method right_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.right_justified( spaces, fill )

    method rol( nbits:Int32 )->Int64
      if (nbits <= 0) return this
      nbits &= 63
      return (this :<<: nbits) | (this :>>: (64-nbits))

    method ror( nbits:Int32 )->Int64
      if (nbits <= 0) return this
      nbits &= 63
      return (this :>>: nbits) | (this :<<: (64-nbits))

    method sign->Int64
      return Int64( which{ this>0:1 || this<0:-1 || 0 } )

      unitTest assert( Int64(5).sign == Int64(1) )
      unitTest assert( Int64(0).sign == Int64(0) )
      unitTest assert( Int64(-5).sign == Int64(-1) )

    method sqrt->Int64 [macro]
      return Int64( Math.sqrt(this) )

    method th->String
      # Returns Xst, Xnd, Xrd, Xth as appropriate
      # Example:
      #   local n = 23
      #   println n.th  # 23rd
      if (this == 0)     return "0th"
      if (-this == this) return "-9223372036854775808th"
      local result = StringBuilder()
      local n = this
      if (n < 0)
        result.print( '-' )
        n = -n
      endIf
      result.print( n )
      which (n % 100)
        case 11, 12, 13
          result.print( "th" )
        others
          which (n % 10)
            case 1: result.print( "st" )
            case 2: result.print( "nd" )
            case 3: result.print( "rd" )
            others: result.print( "th" )
          endWhich
      endWhich
      return result->String

    method to_hex_character->Character
      return Int32(this).to_hex_character

    method to->Object
      return Boxed<<Int64>>(this)

    method to->String
      return StringBuilder().print( this )->String

    method to->String( digits=0:Int32, &hex, &octal, &binary )
      if (hex)    return to_hex_string( which{digits||16} )
      if (octal)  return to_octal_string( which{digits||22} )
      if (binary) return to_binary_string( which{digits||64} )
      return this->String.right_justified( digits )

    method to->Value
      return Value( Real64(this) )

    method to_digit->Character [macro]
      return (this->Int32).to_digit

    method to_binary_string( digits=64:Int32 )->String
      return print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_string( digits=16:Int32 )->String
      return print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=22:Int32 )->String
      return print_in_power2_base( 8, digits, StringBuilder() )->String

    method to_power_of_two->Int64
      if (this & 0xC000000000000000 or not this) return this
      local p2 = 1 : Int64
      while (p2 < this) p2 = p2 :<<: 1
      return p2
endClass

class Int32 [primitive]
  GLOBAL METHODS
    method create( value:Real64 )->Int32
      return value->Int32

    method create( value:Real32 )->Int32
      return value->Int32

    method create( value:Int64 )->Int32
      return value->Int32

    method create( value:Int32 )->Int32
      return value

    method create( value:Character )->Int32
      return value->Int32

    method create( value:Byte )->Int32
      return value->Int32

    method create( value:Logical )->Int32
      return which{ value:1 || 0 }

    method from_value( value:Value )->Int32
      return value->Int32

    method maximum->Int32 [macro]
      return 2147483647

    method minimum->Int32 [macro]
      return native "(-2147483647 - 1)"

  METHODS
    method abs->Int32
      if (this >= 0) return this
      else           return -this

    method real_bits->Real32
      $if (target("C++"))
        native "return *((RogueReal32*)&$this);"
      $endIf

    method clamped( low:Int32, high:Int32 )->Int32
      if (this < low)  return low
      if (this > high) return high
      return this

    method clamped_low( low:Int32 )->Int32
      if (this < low) return low
      return this

    method clamped_high( high:Int32 )->Int32
      if (this > high) return high
      return this

    method digit_count->Int32
      use buffer = StringBuilder.pool
        return buffer.print( this ).count
      endUse

    method format( fmt:String )->String
      return Int64( this ).format( fmt, 32 )

    method hash_code->Int32
      return this

    method introspector->Introspector
      return BoxedIntrospector<<Int32>>( this->Object )

    method is_power_of_two->Logical
      return ((this & (this-1)) == 0)

    method left_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.left_justified( spaces, fill )

    method or_larger( other:Int32 )->Int32
      return which{ this>=other:this || other }

    method or_smaller( other:Int32 )->Int32
      return which{ this<=other:this || other }

    method progress( a:Int32, b:Int32 )->Real64
      # Returns the progress of this number along the interval from a to b.
      # Examples:
      #   2.progress(1,5) -> 0.25
      #   2.progress(5,1) -> 0.75
      if (a == b) return 1.0
      return Real64(this-a) / Real64(b-a)

    method required_bit_count->Int32
      if (this < 0)
        if (this < 0xC000_0000) return 32
        local bits = 1
        local threshold = -1
        while (this < threshold)
          ++bits
          threshold = threshold :<<: 1
        endWhile
        return bits
      endIf

      if (this & 0x8000_0000) return 32
      if (this & 0x4000_0000) return 31
      local bits = 1
      while ((1:<<:bits) <= this) ++bits
      return bits

    method right_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.right_justified( spaces, fill )

    method rol( nbits:Int32 )->Int32
      if (nbits <= 0) return this
      nbits &= 31
      return (this :<<: nbits) | (this :>>: (32-nbits))

    method ror( nbits:Int32 )->Int32
      if (nbits <= 0) return this
      nbits &= 31
      return (this :>>: nbits) | (this :<<: (32-nbits))

    method sqrt->Int32 [macro]
      return Int32( Math.sqrt(this) )

    method th->String
      return this->Int64.th

    method to->Int64 [macro]
      return native "((RogueInt64)$this)"

    method to->Int64( unsigned:Logical )
      if (unsigned) return this & 0x0FFFFffff
      else          return this->Int64

    method to->Object
      return Boxed<<Int32>>(this)

    method to->String
      return "" + this

    method to->String( digits=0:Int32, &hex, &octal, &binary )
      if (hex)    return to_hex_string( which{digits||8} )
      if (octal)  return to_octal_string( which{digits||11} )
      if (binary) return to_binary_string( which{digits||32} )
      return this

    method to->Value
      return Value( this )

    method to_digit( &base64 )->Character
      if (base64)
        if (this >= 0  and this <= 25) return (this + 'A')->Character
        if (this >= 26 and this <= 51) return ((this-26) + 'a')->Character
        if (this >= 52 and this <= 61) return ((this-52) + '0')->Character
        if (this == 62) return '+'
        if (this == 63) return '/'
        return '='
      else
        if (this >= 0 and this <= 9)   return (this + '0')->Character
        if (this >= 10 and this <= 35) return ((this - 10) + ('A'))->Character
        return '0'
      endIf

    method to_binary_string( digits=32:Int32 )->String
      return (this->Int64 & 0x00FFFFFFFF).print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_character->Character
      if (this < 0 or this > 35) return '0'
      if (this <= 9) return Character( '0' + this )
      return Character( 'A' + (this-10) )

    method to_hex_string( digits=8:Int32 )->String
      return (this->Int64 & 0x00FFFFFFFF).print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=11:Int32 )->String
      return (this->Int64 & 0x00FFFFFFFF).print_in_power2_base( 8, digits, StringBuilder() )->String

    method to_power_of_two->Int32
      if (this & 0xC0000000 or not this) return this
      local p2 = 1
      while (p2 < this) p2 = p2 :<<: 1
      return p2

    method sign->Int32
      return which{ this>0:1 || this<0:-1 || 0 }

      unitTest assert( 5.sign  == 1 )
      unitTest assert( 0.sign  == 0 )
      unitTest assert( -5.sign == -1 )
endClass

class Character [primitive]
  GLOBAL METHODS
    method create( value:Real64 )->Character
      return value->Character

    method create( value:Real32 )->Character
      return value->Character

    method create( value:Int64 )->Character
      return value->Character

    method create( value:Int32 )->Character
      return value->Character

    method create( value:Character )->Character
      return value

    method create( value:Byte )->Character
      return value->Character

    method create( value:Logical )->Character
      return which{ value:1 || 0 }

    method from_value( value:Value )->Character
      return value->Character

  METHODS
    method clamped( low:Character, high:Character )->Character
      if (this < low)  return low
      if (this > high) return high
      return this

    method clamped_low( low:Character )->Character
      if (this < low) return low
      return this

    method clamped_high( high:Character )->Character
      if (this > high) return high
      return this

    method digit_count->Int32
      return 1

    method equals( other:Character, &ignore_case )->Logical
      if (ignore_case) return this.to_lowercase == other.to_lowercase
      return this == other

    method hash_code->Int32
      return this->Int32

    method introspector->Introspector
      return BoxedIntrospector<<Character>>( this->Object )

    method is_alphanumeric->Logical
      return (this >= '0' and this <= '9') or
             (this >= 'a' and this <= 'z') or
             (this >= 'A' and this <= 'Z')

    method is_base64_digit->Logical
      return is_alphanumeric or this == '+' or this == '/'

    method is_identifier( &start, &allow_dollar )->Logical
      if ((this >= 'a' and this <= 'z') or (this >= 'A' and this <= 'Z') or (this == '_')) return true
      if (not start and (this >= '0' and this <= '9')) return true
      if (allow_dollar and this == '$') return true
      return false

    method is_letter->Logical
      return (this >= 'a' and this <= 'z') or
             (this >= 'A' and this <= 'Z')

    method is_lowercase->Logical
      return (this >= 'a' and this <= 'z')

    method is_number( base=10:Int32 )->Logical
      return to_number(base) != -1

    method is_power_of_two->Logical
      return this->Int32.is_power_of_two

    method is_uppercase->Logical
      return (this >= 'A' and this <= 'Z')

    method left_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.left_justified( spaces, fill )

    method or_larger( other:Character )->Character
      return which{ this>=other:this || other }

    method or_smaller( other:Character )->Character
      return which{ this<=other:this || other }

    method print_escaped_ascii( writer:PrintWriter, additional_characters_to_escape="":String )
      which (this)
        case '\\': writer.print( "\\\\" )
        case '\0': writer.print( "\\0" )
        case '\b': writer.print( "\\b" )
        case '\e': writer.print( "\\e" )
        case '\f': writer.print( "\\f" )
        case '\n': writer.print( "\\n" )
        case '\r': writer.print( "\\t" )
        case '\v': writer.print( "\\v" )
        others
          if (additional_characters_to_escape.contains(this))
            writer.print( "\\" ).print( this )
          elseIf (this >= 256)
            writer.print( "\\[" )
            this->Int64.print_in_power2_base( 16, 3, writer )
            writer.print( ']' )
          elseIf (this < 32 or this >= 127)
            writer.print( "\\x" )
            this->Int64.print_in_power2_base( 16, 2, writer )
          else
            writer.print( this )
          endIf
      endWhich

    method required_bit_count->Int32
      return this->Int32.required_bit_count

    method right_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.right_justified( spaces, fill )

    method sqrt->Character [macro]
      return Character( Math.sqrt(this) )

    method to->Object
      return Boxed<<Character>>(this)

    method to->String
      return "" + this

    method to->Value
      return Value( this->String )

    method to->String( digits=0:Int32, &hex, &octal, &binary )
      if (hex)    return to_hex_string( which{digits||4} )
      if (octal)  return to_octal_string( which{digits||6} )
      if (binary) return to_binary_string( which{digits||16} )
      return this

    method to_base64_value->Int32
      if (this >= 'A' and this <= 'Z') return (this - 'A')
      if (this >= 'a' and this <= 'z') return 26 + (this - 'a')
      if (this >= '0' and this <= '9') return 52 + (this - '0')
      if (this == '+') return 62
      if (this == '/') return 63
      return 0

    method to_binary_string( digits=16:Int32 )->String
      return (this->Int64 & 0x00FFFFFFFF).print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_string( digits=4:Int32 )->String
      return (this->Int64 & 0x00FFFFFFFF).print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=6:Int32 )->String
      return (this->Int64 & 0x00FFFFFFFF).print_in_power2_base( 8, digits, StringBuilder() )->String

    method to_power_of_two->Character
      return this->Int32.to_power_of_two->Character

    method to_escaped_ascii( additional_characters_to_escape="":String )->String
      use builder = StringBuilder.pool
        print_escaped_ascii( builder, additional_characters_to_escape )
        return builder->String
      endUse

    method to_number( base=10:Int32 )->Int32
      local value : Int32
      if (this >= '0' and this <= '9')     value = this - '0'
      elseIf (this >= 'A' and this <= 'Z') value = 10 + (this - 'A')
      elseIf (this >= 'a' and this <= 'z') value = 10 + (this - 'a')
      else return -1

      if (value < base) return value
      else              return -1

    method to_lowercase->Character
      if (not is_uppercase) return this
      return Character( this + ('a'-'A') )

    method to_uppercase->Character
      if (not is_lowercase) return this
      return Character( this + ('A'-'a') )
endClass

class Byte [primitive]
  GLOBAL METHODS
    method create( value:Real64 )->Byte
      return value->Byte

    method create( value:Real32 )->Byte
      return value->Byte

    method create( value:Int64 )->Byte
      return value->Byte

    method create( value:Int32 )->Byte
      return value->Byte

    method create( value:Character )->Byte
      return value->Byte

    method create( value:Byte )->Byte
      return value

    method create( value:Logical )->Byte
      return which{ value:1 || 0 }

    method from_value( value:Value )->Byte
      return value->Byte

  METHODS
    method clamped( low:Byte, high:Byte )->Byte
      if (this < low)  return low
      if (this > high) return high
      return this

    method clamped_low( low:Byte )->Byte
      if (this < low) return low
      return this

    method clamped_high( high:Byte )->Byte
      if (this > high) return high
      return this

    method digit_count->Int32
      use buffer = StringBuilder.pool
        return buffer.print( this ).count
      endUse

    method format( fmt:String )->String
      return Int64( this ).format( fmt, 8 )

    method hash_code->Int32
      return this->Int32

    method introspector->Introspector
      return BoxedIntrospector<<Byte>>( this->Object )

    method is_power_of_two->Logical
      return ((this & (this-1)) == 0)

    method left_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.left_justified( spaces, fill )

    method or_larger( other:Byte )->Byte
      return which{ this>=other:this || other }

    method or_smaller( other:Byte )->Byte
      return which{ this<=other:this || other }

    method progress( a:Byte, b:Byte )->Real64
      # Returns the progress of this number along the interval from a to b.
      # Examples:
      #   2.progress(1,5) -> 0.25
      #   2.progress(5,1) -> 0.75
      if (a == b) return 1.0
      return Real64(this-a) / Real64(b-a)

    method required_bit_count->Int32
      if (this & 0x80) return 8
      local bits = 1
      while ((1:<<:bits) <= this) ++bits
      return bits

    method right_justified( spaces:Int32, fill=' ':Character )->String
      return this->String.right_justified( spaces, fill )

    method rol( nbits:Int32 )->Byte
      if (nbits <= 0) return this
      nbits &= 7
      return (this :<<: nbits) | (this :>>: (8-nbits))

    method ror( nbits:Int32 )->Byte
      if (nbits <= 0) return this
      nbits &= 7
      return (this :>>: nbits) | (this :<<: (8-nbits))

    method signed->Int32
      if (this <= 127) return this
      return (this - 256)

    method sqrt->Byte [macro]
      return Byte( Math.sqrt(this) )

    method to->Object
      return Boxed<<Byte>>(this)

    method to->String
      return "" + this

    method to->String( digits=0:Int32, &hex, &octal, &binary )
      if (hex)    return to_hex_string( which{digits||2} )
      if (octal)  return to_octal_string( which{digits||3} )
      if (binary) return to_binary_string( which{digits||8} )
      return this

    method to->Value
      return Value( this->Int32 )

    method to_binary_string( digits=8:Int32 )->String
      return (this->Int64 & 0xFF).print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_character->Character
      return Int32(this).to_hex_character

    method to_hex_string( digits=2:Int32 )->String
      return (this->Int64 & 0xFF).print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=3:Int32 )->String
      return (this->Int64 & 0xFF).print_in_power2_base( 8, digits, StringBuilder() )->String

    method to_power_of_two->Byte
      return this->Int32.to_power_of_two->Byte
endClass

class Logical [primitive]
  GLOBAL METHODS
    method create( value:Real64 )->Logical
      return value != 0

    method create( value:Real32 )->Logical
      return value != 0

    method create( value:Int64 )->Logical
      return value != 0

    method create( value:Int32 )->Logical
      return value != 0

    method create( value:Character )->Logical
      return value != 0

    method create( value:Byte )->Logical
      return value != 0

    method create( value:Logical )->Logical
      return value

    method from_value( value:Value )->Logical
      return value->Logical

  METHODS
    method digit_count->Int32
      if (this) return 4  # "true"
      else      return 5  # "false"

    method hash_code->Int32
      if (this) return 1
      else      return 0

    method introspector->Introspector
      return BoxedIntrospector<<Logical>>( this->Object )

    method to->Object
      return Boxed<<Logical>>(this)

    method to->String
      return "" + this

    method to->Value
      return Value( this )
endClass

