class System [essential]
  DEPENDENCIES
    nativeHeader
      #if __APPLE__
        #include "TargetConditionals.h"
         #if TARGET_IPHONE_SIMULATOR || TARGET_OS_IPHONE
           #define ROGUE_OS_IOS
         #else
           #define ROGUE_OS_MACOS
         #endif
      #elif _WIN64 || _WIN32
         #define ROGUE_OS_WINDOWS
      #elif ANDROID
         #define ROGUE_OS_ANDROID
      #elif __CYGWIN__
         #define ROGUE_OS_CYGWIN
      #elif defined(EMSCRIPTEN)
        #define ROGUE_OS_WEB
      #else
        #define ROGUE_OS_LINUX
      #endif

    endNativeHeader

  GLOBAL PROPERTIES
    command_line_arguments = String[]
    executable_filepath    : String
    environment            : SystemEnvironment

  GLOBAL METHODS
    method executable_filepath->String
      if (@executable_filepath) return @executable_filepath

      native @|#if defined(ROGUE_PLATFORM_WINDOWS)
              |  char buffer[ 2048 ];
              |  if ( !GetModuleFileName( NULL, buffer, 2048 ) )
              |  {
              |    strcpy( buffer, "rogue.exe" );
              |  }
              |  RogueSystem_executable_filepath = RogueString_create_from_utf8( buffer, -1 );
              |
              |#elif defined(__APPLE__)
              |  char buffer[PATH_MAX];
              |  char raw_filepath[PATH_MAX];
              |  uint32_t buffer_size = (uint32_t) PATH_MAX;
              |  if (0 != _NSGetExecutablePath(raw_filepath,&buffer_size))
              |  {
              |    raw_filepath[0] = 0;
              |  }
              |  realpath( raw_filepath, buffer );
              |  RogueSystem_executable_filepath = RogueString_create_from_utf8( buffer, -1 );
              |
              |#else
              |  // Linux
              |  char buffer[PATH_MAX];
              |  char raw_filepath[PATH_MAX];
              |  #if defined(__sun)
              |    strcpy( raw_filepath, "/proc/self/path/a.out" );
              |  #else
              |    strcpy( raw_filepath, "/proc/self/exe" );
              |  #endif
              |  if (0 == realpath( raw_filepath, buffer )) strcpy( buffer, "" );
              |  RogueSystem_executable_filepath = RogueString_create_from_utf8( buffer, -1 );
              |#endif

      return @executable_filepath

    method exit( result_code=0:Int32 )
      $if (target("C++"))
        native @|Rogue_quit();
                |exit( $result_code );
      $endIf

    method find_program( name:String )->String
      # Returns the executable filepath of the given program or else null.
      # Uses 'where' on Windows and 'which' on other platforms.
      local result = Process.run( "$ $" (which{is_windows:"where"||"which"},name), &env )
      if (not result.success) return null
      return result->String.trimmed

    method home_folder->String
      if (System.is_windows) return System.environment//HOMEDRIVE + System.environment//HOMEPATH
      else                   return System.environment//HOME

    method is_android->Logical
      local result = false
      native @|#if defined(ROGUE_OS_ANDROID)
      result = true
      native @|#endif
      return result

    method is_cygwin->Logical
      local result = false
      native @|#if defined(ROGUE_OS_CYGWIN)
      result = true
      native @|#endif
      return result

    method is_ios->Logical
      local result = false
      native @|#if defined(ROGUE_OS_IOS)
      result = true
      native @|#endif
      return result

    method is_linux->Logical
      local result = false
      native @|#if defined(ROGUE_OS_LINUX)
      result = true
      native @|#endif
      return result

    method is_macos->Logical
      local result = false
      native @|#if defined(ROGUE_OS_MACOS)
      result = true
      native @|#endif
      return result

    method is_web->Logical
      local result = false
      native @|#if defined(ROGUE_OS_WEB)
      result = true
      native @|#endif
      return result

    method is_windows->Logical
      local result = false
      native @|#if defined(ROGUE_OS_WINDOWS)
      result = true
      native @|#endif
      return result

    method os->String
      # Returns one of:
      #   macOS
      #   Windows
      #   iOS
      #   Android
      #   Cygwin
      #   Web
      #   Linux (includes Unix and Posix)
      local result : String
      native @|#if defined(ROGUE_OS_ANDROID)
      result = "Android"
      native @|#elif defined(ROGUE_OS_CYGWIN)
      result = "Cygwin"
      native @|#elif defined(ROGUE_OS_IOS)
      result = "iOS"
      native @|#elif defined(ROGUE_OS_MACOS)
      result = "macOS"
      native @|#elif defined(ROGUE_OS_WEB)
      result = "Web"
      native @|#elif defined(ROGUE_OS_WINDOWS)
      result = "Windows"
      native @|#else
      result = "Linux"
      native @|#endif
      return result


    method run( command:String )->Int32
      # TODO: http://stackoverflow.com/questions/27046728/how-do-you-use-posix-spawn-to-replace-the-deprecated-system-to-launch-opendiff
      local return_val = 0
      native @|$return_val = system( (char*)$command->utf8 );
      if (return_val == -1) return -1
      native @|#if !defined(ROGUE_PLATFORM_WINDOWS)
              |$return_val = (RogueInt32) WEXITSTATUS($return_val);
              |#endif
      return return_val

    method sleep( seconds:Real64 )
      # Suspends execution of this program for the specified number of seconds.
      local do_exit = seconds > 0.5 # Or should it be lower? Used for multithreaded synchronization.

      native @|#ifdef ROGUE_PLATFORM_WINDOWS
               local ms = (seconds * 1000)->Int32
      native @|if ($do_exit) ROGUE_EXIT;
              |Sleep( $ms );
              |if ($do_exit) ROGUE_ENTER;
              |#else
               local nanoseconds = Int32( seconds.fractional_part * 1000000000.0 )
               seconds = seconds.whole_part
      native @|timespec sleep_time;
              |sleep_time.tv_sec = (time_t) $seconds;
              |sleep_time.tv_nsec = (long) $nanoseconds;
              |if ($do_exit) ROGUE_EXIT;
              |nanosleep( &sleep_time, NULL );
              |if ($do_exit) ROGUE_ENTER;
              |#endif

    method sync_storage
      noAction

    method time->Real64
      $if (target("C++"))
        native @|#if defined(_WIN32)
                |  struct __timeb64 time_struct;
                |  RogueReal64 time_seconds;
                |  _ftime64_s( &time_struct );
                |  time_seconds = (RogueReal64) time_struct.time;
                |  time_seconds += time_struct.millitm / 1000.0;
                |  return time_seconds;
                |
                |#else
                |  struct timeval time_struct;
                |  RogueReal64 time_seconds;
                |  gettimeofday( &time_struct, 0 );
                |  time_seconds = (RogueReal64) time_struct.tv_sec;
                |  time_seconds += (time_struct.tv_usec / 1000000.0);
                |  return time_seconds;
                |#endif
      $endIf
endClass

class SystemEnvironment [compound]
  METHODS
    method contains( name:String )->Logical
      local result : Logical
      native @|char* c_result = getenv( (char*)$name->utf8 );
              |if (c_result)
              |{
              |  $result = true;
              |}
      return result

    method get( name:String )->String
      local result : String

      native @|char* c_result = getenv( (char*)$name->utf8 );
              |if (c_result)
              |{
              |  $result = RogueString_create_from_utf8( c_result );
              |}

      return which{ result:result || null }

    method listing->String[]
      nativeHeader extern "C" char **environ;

      local result = String[]
      native "char** env = environ;"
      while (native("*env")->Logical)
        result.add( native("RogueString_create_from_utf8( *(env++) )")->String.before_first('=') )
      endWhile

      return result;

    method set( name:String, value:String )
      if (value and value.count)
        native @|setenv( (char*)$name->utf8, (char*)$value->utf8, 1 );
      else
        native @|unsetenv( (char*)$name->utf8 );
      endIf
endClass
