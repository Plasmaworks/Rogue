$if (target("Cython") or target("Python"))
$define SCRIPT_HELPERS true
$endIf

$include "Standard/Array.rogue"
$include "Standard/Atomics.rogue"
$include "Standard/BitIO.rogue"
$include "Standard/Boxed.rogue"
$include "Standard/Console.rogue"
$include "Standard/DataIO.rogue"
$include "Standard/Date.rogue"
$include "Standard/DateTime.rogue"
$include "Standard/Dim.rogue"
$include "Standard/Exception.rogue"
$include "Standard/ExtendedASCIIReader.rogue"
$include "Standard/File.rogue"
$include "Standard/Files.rogue"
$include "Standard/Global.rogue"
$include "Standard/Global.rogue"
$include "Standard/Introspection.rogue"
$include "Standard/JSON.rogue"
$include "Standard/LineReader.rogue"
$include "Standard/LineRebuilder.rogue"
$include "Standard/List.rogue"
$include "Standard/LookupList.rogue"
$include "Standard/Math.rogue"
$include "Standard/NativeData.rogue"
$include "Standard/Object.rogue"
$include "Standard/Optional.rogue"
$include "Standard/Primitives.rogue"
$include "Standard/PrintWriter.rogue"
$include "Standard/Process.rogue"
$include "Standard/Random.rogue"
$include "Standard/Range.rogue"
$include "Standard/Reader.rogue"
$include "Standard/Runtime.rogue"
$include "Standard/Scanner.rogue"
$include "Standard/Set.rogue"
$include "Standard/Sort.rogue"
$include "Standard/StackTrace.rogue"
$include "Standard/String.rogue"
$include "Standard/StringBuilder.rogue"
$include "Standard/System.rogue"
$include "Standard/Table.rogue"
$include "Standard/Task.rogue"
$include "Standard/Time.rogue"
$include "Standard/TimeInterval.rogue"
$include "Standard/Timing.rogue"
$include "Standard/Timestamp.rogue"
$include "Standard/Tuple.rogue"
$include "Standard/TypeInfo.rogue"
$include "Standard/UTF8.rogue"
$include "Standard/Value.rogue"
$include "Standard/WeakReference.rogue"
$include "Standard/WebSocket.rogue"
$include "Standard/Writer.rogue"

$if (THREAD_MODE != "NONE")
$include "Standard/Thread.rogue"
$include "Standard/ThreadWorker.rogue"
$endIf

$if (THREAD_MODE != "NONE") or target("Web")
$include "Standard/Sockets.rogue"
$endIf

# Ensure String[] exists so that command line arguments may be set by native code.
$essential String[].add(String)

$essential Character[]

routine compare_versions( a:String, b:String )->Int32
  # Compares two multipart versions and returns:
  #   -1 if a < b
  #    0 if a = b
  #    1 if a > b
  #
  # Each version can have any number of parts; mismatched numbers of parts are allowed.
  # "Missing" parts are treated as 0.
  #
  # No allocations are made to perform the comparison.
  #
  # Examples:
  #
  #   compare_versions("1.0",   "1.0.0") ->  0
  #   compare_versions("1.0",   "1.0.1") -> -1
  #   compare_versions("1.10.0","1.2.3") ->  1
  local max_parts = compare_verisons_count_dots(a).or_larger(compare_verisons_count_dots(b)) + 1
  forEach (part in 0..<max_parts)
    local delta = compare_versions_extract_part(a,part) - compare_versions_extract_part(b,part)
    if (delta != 0) return delta.sign
  endForEach
  return 0  # equal
endRoutine

routine compare_verisons_count_dots( st:String )->Int32
  local result = 0
  if ((forEach in st) == '.') ++result
  return result
endRoutine

routine compare_versions_extract_part( v:String, part:Int32 )->Int32
  local cur_p = 0
  local result = 0
  forEach (ch in v)
    if (ch == '.')
      ++cur_p
      if (cur_p > part) return result
    elseIf (cur_p == part and ch.is_number)
      result = result * 10 + ch.to_number
    endIf
  endForEach
  return result
endRoutine

