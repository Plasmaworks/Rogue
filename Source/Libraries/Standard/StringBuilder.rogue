class StringBuilder : PrintWriter [essential]
  GLOBAL PROPERTIES
    work_bytes [threadLocal] = Byte[]

    pool [threadLocal] = StringBuilderPool()
    # To acquire a unique StringBuilder for a given scope:
    #
    #   use builder = StringBuilder.pool
    #     # builder starts out clear()d and ready to go.
    #     ...
    #     return builder->String
    #   endUse

  PROPERTIES
    utf8          : Byte[]
    count         : Int32  # character count
    indent        : Int32
    cursor_offset : Int32  # in bytes
    cursor_index  : Int32  # in characters
    at_newline = true

  METHODS
    method init [essential]
      init( 40 )

    method init( initial_capacity:Int32 )
      utf8 = Byte[]( initial_capacity )

    method init( initial_content:String )
      if (initial_content is null) initial_content = "null"
      local initial_capacity = initial_content.byte_count
      if (initial_capacity < 40) initial_capacity = 40
      init( initial_capacity )
      print( initial_content )

    method capacity->Int32
      return this.utf8.capacity

    method clear->this [essential]
      utf8.clear
      count = 0
      at_newline = true
      cursor_index = 0
      cursor_offset = 0
      return this

    method close
      # Concrete definition of the abstract method PrintWriter.close()
      noAction

    method compare_to( st:String )->Int32
      local limit = count.or_smaller( st.count )
      forEach (i in 0..<limit)
        local cmp = Int32(this[i]) <> Int32(st[i])
        if (cmp < 0) return -1
        if (cmp > 0) return  1
      endForEach

      local cmp = this.count - st.count
      if (cmp < 0) return -1
      if (cmp > 0) return  1
      return 0

    method compare_to( other:StringBuilder )->Int32
      local limit = count.or_smaller( other.count )
      forEach (i in 0..<limit)
        local cmp = Int32(this[i]) <> Int32(other[i])
        if (cmp < 0) return -1
        if (cmp > 0) return  1
      endForEach

      local cmp = this.count - other.count
      if (cmp < 0) return -1
      if (cmp > 0) return  1
      return 0

    method consolidated->String
      # Returns the equivalent string to the data in this StringBuilder,
      # reusing a previously consolidated String object if possible.
      return StringConsolidationTable[ this ]

    method contains( ch:Character )->Logical
      return locate(ch).exists

    method discard_from( index:Int32 )
      this[ index ]  # sets cursor position
      utf8.discard_from( cursor_offset )
      count = cursor_index

    method flush
      # Concrete definition of the abstract method PrintWriter.flush()
      noAction

    method get( index:Int32 )->Character
      if (index == 0)
        cursor_offset = 0
        cursor_index = 0
      elseIf (index == count - 1)
        cursor_offset = utf8.count
        cursor_index = count
      endIf

      while (cursor_index < index)
        ++cursor_offset
        while ((utf8[cursor_offset] & 0xC0) == 0x80) ++cursor_offset
        ++cursor_index
      endWhile

      while (cursor_index > index)
        --cursor_offset
        while ((utf8[cursor_offset] & 0xC0) == 0x80) --cursor_offset
        --cursor_index
      endWhile

      local ch = utf8[ cursor_offset ]
      if (ch & 0x80)
        if (ch & 0x20)
          if (ch & 0x10)
            return ((ch&7):<<:18) | ((utf8[cursor_offset+1] & 0x3F) :<<: 12) ...
                 | ((utf8[cursor_offset+2] & 0x3F) :<<: 6) | (utf8[cursor_offset+3] & 0x3F)
          else
            return ((ch&15):<<:12) | ((utf8[cursor_offset+1] & 0x3F) :<<: 6) | (utf8[cursor_offset+2] & 0x3F)
          endIf
        else
          return ((ch&31):<<:6) | (utf8[cursor_offset+1] & 0x3F)
        endIf
      else
        return ch
      endIf

    method hash_code->Int32
      local code = 0
      forEach (ch in utf8)
        code = ((code:<<:3) - code) + ch
      endForEach
      return code

    method insert( ch:Character )->this
      local i1 = utf8.count
      print( ch, &!formatted )   # put new UTF8 bytes on end
      local n = utf8.count - i1
      utf8.shift( 0, null, n, null )  # shift data over to make room for same bytes at beginning
      utf8.shift( i1, n, -i1, null )  # copy bytes to beginning
      return this

    method insert_spaces( index=0:Int32, spaces=2:Int32 )->this
      if (spaces > 0 and index >= 0 and index < count)
        utf8.shift( index, null, spaces, ' '->Byte )
        count += 2
      endIf
      return this

    method last->Character
      return this[ count-1 ]

    method locate( ch:Character )->Int32?
      forEach (i of this)
        if (this[i] == ch) return i
      endForEach
      return null

    method locate_last( ch:Character )->Int32?
      forEach (i of this step -1)
        if (this[i] == ch) return i
      endForEach
      return null

    method needs_indent->Logical
      return (at_newline and indent > 0)

    method operator==( value:String )->Logical
      if (value is null) return false
      if (count != value.count) return false
      forEach (i of this)
        if (this[i] != value[i]) return false
      endForEach
      return true

    method operator==( value:StringBuilder )->Logical
      if (value is null) return false
      if (count != value.count) return false
      forEach (i of this)
        if (this[i] != value[i]) return false
      endForEach
      return true

    method print( value:Byte )->this
      return print( value->Int32 )

    method print( value:Character )->this
      return print( value, &formatted )

    method print( value:Character, formatted:Logical )->this
      if (formatted)
        if (value == '\n')    at_newline = true
        elseIf (needs_indent) print_indent
      endIf

      ++count
      if (value < 0)
        utf8.add( 0 )
      elseIf (value <= Character(0x7F))
        utf8.add( value )
      elseIf (value <= Character(0x7FF))
        utf8.[ add(0xC0 | (value:>>>:6)), add(0x80 | (value & 0x3F)) ]
      elseIf (value <= Character(0xFFFF))
        utf8.[ add(0xE0 | (value:>>>:12)), add(0x80 | ((value:>>>:6) & 0x3F)), add(0x80 | (value & 0x3F)) ]
      elseIf (value <= Character(0x10FFFF))
        utf8.[ add(0xF0 | (value:>>>:18)), add(0x80 | ((value:>>>:12) & 0x3F)) ]
        utf8.[ add(0x80 | ((value:>>>:6) & 0x3F)), add(0x80 | (value & 0x3F)) ]
      else
        utf8.add( '?' )
      endIf
      return this

    method print( value:Real32 )->StringBuilder
      return this.print( value->Real64 )

    method print( value:Int32 )->this
      return print( value->Int64 )

    method print( value:Logical )->this
      if (value) return print( "true" )
      else       return print( "false" )

    method print( value:Int64 )->this
      if (value == (1->Int64 :<<: 63))
        return print( "-9223372036854775808" )
      elseIf (value < 0)
        print( '-' )
        return print( -value )
      elseIf (value >= 10)
        print( value / 10 )
        return print( ('0'+(value%10))->Character )
      else
        return print( ('0'+value)->Character )
      endIf


    method print( value:Object )->this
      if (value) return print( value->String )
      return print( "null" )

    method print( value:Real64 )->StringBuilder
      if (value == 0)
        print( "0.0" )
        return this
      elseIf (value.is_infinite)
        if (value < 0) print( "-infinity" )
        else           print( "infinity" )
        return this
      elseIf (value.is_not_a_number)
        print( "NaN" )
        return this
      endIf

      if (value < 0)
        print( '-' )
        value = -value
      endIf

      # Display power of 10 exponent for numbers >= 1e16 or <= 1e-4
      if (value >= 1000000000000000.0)
        local pow10 = 0
        while (value >= 10.0)
          value /= 10.0
          ++pow10
        endWhile

        return print( value ).print( 'e' ).print( pow10->Int32 )
      endIf

      if (value < 0.00001)
        local pow10 = 0
        while (value < 0.1)
          value *= 10.0
          --pow10
        endWhile

        return print( value ).print( 'e' ).print( pow10->Int32 )
      endIf

      # Standard output
      forEach (decimal_count in 1..18)
        print_to_work_bytes( value, decimal_count )
        if (scan_work_bytes == value) escapeForEach
      endForEach

      print_work_bytes

      return this

    method print( value:Real64, decimal_places:Int32 )->this
      if (value.is_infinite)
        if (value < 0) print( "-infinity" )
        else           print( "infinity" )
        return this
      elseIf (value.is_not_a_number)
        print( "NaN" )
        return this
      endIf

      if (value < 0 )
        print( '-' )
        value = -value
      endIf

      print_to_work_bytes( value, decimal_places )
      print_work_bytes

      return this

    method print( value:String )->this
      if (value)
        if (indent)
          forEach (ch in value) print( ch )
        else
          forEach (i in 0..<value.byte_count) utf8.add( value.byte(i) )
          count += value.count
          if (value.count and value.last == '\n') at_newline = true
        endIf
        return this
      else
        return print( "null" )
      endIf

    method print( value:StringBuilder )->this
      # Concrete definition of the abstract method PrintWriter.print(StringBuilder)
      reserve( value.utf8.count )
      write( forEach in value.utf8 )
      return this

    method print_indent
      if (not needs_indent or indent == 0) return
      forEach (i in 1..indent) utf8.add( ' ' )
      count += indent
      at_newline = false

    method print_to_work_bytes( value:Real64, decimal_places:Int32 )->this
      work_bytes.clear
      local whole = Math.floor( value )
      value -= whole
      while (whole >= 10)
        work_bytes.add( ('0' + ((whole%10)->Int32))->Character )
        whole /= 10
      endWhile
      work_bytes.add( ('0' + ((whole%10)->Int32))->Character )

      work_bytes.reverse

      if (decimal_places != 0)
        work_bytes.add( '.' )
        forEach (1..decimal_places)
          value *= 10
          local digit = Math.floor(value)->Int32
          value -= digit
          work_bytes.add( ('0' + digit)->Character )
        endForEach
      endIf
      if (value >= 0.5)
        work_bytes.add( '5' )
        round_off_work_bytes
      endIf

      return this

    method print_work_bytes
      forEach (digit in work_bytes)
        print( digit->Character )
      endForEach

    method println()->this
      return print( '\n' )

    method println( value:Byte )->this
      return print( value->Int32 ).print( '\n' )

    method println( value:Character )->this
      return print( value ).print( '\n' )

    method println( value:Real32 )->this
      return this.println( value->Real64 )

    method println( value:Real32, decimal_places:Int32 )->StringBuilder
      return this.println( value->Real64, decimal_places )

    method println( value:Int32 )->this
      return print( value ).print( '\n' )

    method println( value:Logical )->this
      return print( value ).print( '\n' )

    method println( value:Int64 )->this
      return print( value ).print( '\n' )

    method println( value:Real64 )->this
      return print( value ).print( '\n' )

    method println( value:Real64, decimal_places:Int32 )->this
      return print( value, decimal_places ).print( '\n' )

    method println( value:Object )->this
      return print( value ).print( '\n' )

    method println( value:String )->this
      return print( value ).print( '\n' )

    method remove_at( index:Int32 )->Character
      local ch = this[ index ]  # sets cursor position
      --count
      if (index == count)
        utf8.discard_from( cursor_offset )
      else
        utf8.remove_at( cursor_offset )
        while ((utf8[cursor_offset] & 0xC0) == 0x80) utf8.remove_at( cursor_offset )
      endIf
      return ch

    method remove_first->Character
      return this.remove_at(0)

    method remove_last->Character
      return remove_at( count-1 )

    method reserve( additional_bytes:Int32 )->this [essential]
      utf8.reserve( additional_bytes )
      return this

    method reverse
      # Reverses the characters in this StringBuilder.
      use builder=StringBuilder.pool
        builder.reserve( count )
        builder.print( forEach in this step -1 )
        clear
        print builder
      endUse

    method round_off_work_bytes
      if (work_bytes.remove_last >= '5')
        local i = work_bytes.count - 1
        while (i >= 0)
          if (work_bytes[i] != '.')
            ++work_bytes[i]
            if (work_bytes[i] == ('9'+1)) work_bytes[i] = '0'
            else                          return
          endIf
          --i
        endWhile
        work_bytes.insert( '1' )
      endIf

    method scan_work_bytes->Real64
      local whole = 0.0
      local decimal = 0.0
      local decimal_count = 0
      local scanning_whole = true
      forEach (digit in work_bytes)
        if (scanning_whole)
          if (digit == '.') scanning_whole = false
          else              whole = whole * 10 + (digit - '0')
        else
          decimal = decimal * 10 + (digit - '0')
          ++decimal_count
        endIf
      endForEach
      return whole + decimal / 10.0^decimal_count

    method to->Int32
      if (this.contains(','))
        use builder = StringBuilder.pool
          forEach (ch in this)
            if (ch != ',') builder.print ch
          endForEach
          return builder->Int32
        endUse
      endIf
      utf8.reserve( 1 )
      utf8[ utf8.count ] = 0
      return native( "(RogueInt32)strtol( (char*)$utf8->data->as_bytes, 0, 10 )" )->Int32

    method to->Int64
      if (this.contains(','))
        use builder = StringBuilder.pool
          forEach (ch in this)
            if (ch != ',') builder.print ch
          endForEach
          return builder->Int64
        endUse
      endIf
      utf8.reserve( 1 )
      utf8[ utf8.count ] = 0
      return native( "(RogueInt64)strtoll( (char*)$utf8->data->as_bytes, 0, 10 )" )->Int64

    method to->Real64
      if (this.contains(','))
        use builder = StringBuilder.pool
          forEach (ch in this)
            if (ch != ',') builder.print ch
          endForEach
          return builder->Real64
        endUse
      endIf
      utf8.reserve( 1 )
      utf8[ utf8.count ] = 0
      return native( "strtod( (char*)$utf8->data->as_bytes, 0 )" )->Real64

    method description->String
      return String( utf8 )

    method write( byte:Byte )
      # Writes the given raw byte to this StringBuilder.  Any sequence of bytes written
      # must be valid UTF-8.
      utf8.add( byte )
      if ((byte & 0xC0) != 0x80) ++count

    method write( buffer:StringBuilder )
      reserve( buffer.utf8.count )
      write( forEach in buffer.utf8 )
endClass

class StringBuilderPool
  PROPERTIES
    available = StringBuilder[]

  METHODS
    method on_use->StringBuilder
      if (available.is_empty) return StringBuilder()
      return available.remove_last

    method on_end_use( builder:StringBuilder )
      available.add( builder.clear )
endClass

