uses Geometry

class Console : Reader<<Character>>, BufferedPrintWriter<<output_buffer>> [singleton]
  DEPENDENCIES
    nativeHeader
      #if defined(ROGUE_PLATFORM_WINDOWS)
        #include <io.h>
        #define ROGUE_READ_CALL _read
      #else
        #include <termios.h>
        #include <unistd.h>
        #include <sys/ioctl.h>
        #define ROGUE_READ_CALL read
      #endif

      #ifndef STDIN_FILENO      /* Probably Windows */
        #define STDIN_FILENO  0 /* Probably correct */
        #define STDOUT_FILENO 1
        #define STDERR_FILENO 2
      #endif

      void Rogue_fwrite( const char* utf8, int byte_count, int out );
    endNativeHeader

    nativeCode
      void Rogue_fwrite( const char* utf8, int byte_count, int out )
      {
        while (byte_count)
        {
          int n = (int) write( out, utf8, byte_count );
          if (n > 0)
          {
            utf8 += n;
            byte_count -= n;
          }
        }
      }
    endNativeCode

  ENUMERATE
    UP_ARROW    = 17
    DOWN_ARROW  = 18
    RIGHT_ARROW = 19
    LEFT_ARROW  = 20

  GLOBAL METHODS
    method input( prompt=null:String )->String
      if (prompt) Global.print( prompt ).flush

      native @|char st[4096];
              |if (!fgets( st, 4096, stdin ))
              |{
              |  clearerr( stdin );
                 throw IOError( "End of Input." )
      native @|}
              |
              |// discard \n
              |int len = strlen( st );
              |if (len) st[--len] = 0;
              |else st[0] = 0;
              |
              |return RogueString_create_from_utf8( st, len );

  PROPERTIES
    error             = ConsoleErrorPrinter()

    immediate_mode       = false
    # Set to 'true' to turn off echo and line buffering and to turn on mouse events

    show_cursor          : Logical
    # Starts 'true' but set in init() to bypass the setter

    events = ConsoleEvent[]
    # All keyboard and mouse events get turned into ConsoleEvents and queued here

    windows_in_quick_edit_mode : Logical
    windows_button_state       : Int32
    windows_last_press_type    : Int32

    decode_utf8  = true

    input_buffer = StringBuilder()

    next_input_character : Int32?
    _input_bytes         = Byte[]

    native @|#if !defined(ROGUE_PLATFORM_WINDOWS)
            |  termios original_terminal_settings;
            |  int     original_stdin_flags;
            |#endif

  METHODS
    method init
      native @|#ifdef ROGUE_PLATFORM_WINDOWS
              |  // Enable ANSI colors and styles on Windows
              |  HANDLE h_stdout = GetStdHandle( STD_OUTPUT_HANDLE );
              |  DWORD mode;
              |  GetConsoleMode( h_stdout, &mode );
              |  SetConsoleMode( h_stdout, mode | ENABLE_VIRTUAL_TERMINAL_PROCESSING );
              |  SetConsoleOutputCP(65001);  // Extended characters
              |
              |  HANDLE h_stdin = GetStdHandle( STD_INPUT_HANDLE );
              |  GetConsoleMode( h_stdin, &mode );
                 windows_in_quick_edit_mode = native("!!(mode & ENABLE_QUICK_EDIT_MODE)")->Logical

      native @|#else
              |  tcgetattr( STDIN_FILENO, &$this->original_terminal_settings );
              |  $this->original_stdin_flags = fcntl( STDIN_FILENO, F_GETFL );
              |
              |  if ( !$this->original_terminal_settings.c_cc[VMIN] ) $this->original_terminal_settings.c_cc[VMIN] = 1;
              |  $this->original_terminal_settings.c_lflag |= (ECHO | ECHOE | ICANON);
              |  $this->original_stdin_flags &= ~(O_NONBLOCK);
              |#endif
      on_exit( function with (console=this) => console.reset_io_mode )
      @show_cursor = true

    method bounds->Box
      return Box(size)

    method clear( output=Global:PrintWriter )
      output.flush
      output.print( "\e[2J" ).flush

    method clear_to_eol( output=Global:PrintWriter )
      output.flush
      output.print( "\e[K" ).flush

    method _fill_input_buffer( minimum=1:Int32 )->Logical
      if (_input_bytes.count >= minimum) return true

      local n = 1024  # just to get us into the loop
      while (n == 1024)
        native @|char bytes[1024];
                |$n = (RogueInt32) ROGUE_READ_CALL( STDIN_FILENO, &bytes, 1024 );
        if (n == 0 and not @immediate_mode) throw IOError( "End of Input." )
        if (n > 0)
          forEach (i in 0..<n)
            _input_bytes.add( native("((RogueByte)bytes[$i])")->Byte )
          endForEach
        endIf
      endWhile

      return _input_bytes.count >= minimum

    method flush( buffer:StringBuilder )
      write( buffer )
      buffer.clear

    method has_another->Logical
      # Only reports on character input events, ignoring pointer events.
      # Use has_another_event() instead to check for either kind of event.
      if ((forEach in events).is_character) return true
      _fill_event_queue
      if ((forEach in events).is_character) return true
      return false

    method has_another_event->Logical
      if (events.count) return true
      _fill_event_queue
      return events.count

    method _fill_event_queue
      if (System.is_windows and immediate_mode)
        # Only use special Windows version for immediate mode
        _fill_event_queue_windows
      else
        # Windows will work with Unix mode otherwise
        _fill_event_queue_unix
      endIf

    method _fill_event_queue_windows
      # Used only for Windows and only in immediate mode
      native @|#if defined(ROGUE_PLATFORM_WINDOWS)
              |HANDLE       h_stdin = GetStdHandle( STD_INPUT_HANDLE );
              |DWORD        event_count = 0;
              |
              |GetNumberOfConsoleInputEvents( h_stdin, &event_count );
               while (native("(RogueInt32)event_count")->Int32)
                 _fill_event_queue_windows_process_next
                native @|GetNumberOfConsoleInputEvents( h_stdin, &event_count );
               endWhile

      native @|#endif // ROGUE_PLATFORM_WINDOWS

    method _fill_event_queue_windows_process_next
      native @|#if defined(ROGUE_PLATFORM_WINDOWS)

      # If Windows and in immediate mode use Peek/ReadConsoleInput.
      local unicode, event_flags, new_button_state, x, y : Int32

      native @|HANDLE       h_stdin = GetStdHandle( STD_INPUT_HANDLE );
              |DWORD        event_count = 0;
              |INPUT_RECORD record;
              |ReadConsoleInput( h_stdin, &record, 1, &event_count );
              |if (record.EventType == MOUSE_EVENT)
              |{
              |  $event_flags = (RogueInt32) record.Event.MouseEvent.dwEventFlags;
              |  $new_button_state = (RogueInt32) record.Event.MouseEvent.dwButtonState;
              |  $x = (RogueInt32) record.Event.MouseEvent.dwMousePosition.X;
              |  $y = (RogueInt32) record.Event.MouseEvent.dwMousePosition.Y;
              |
              |  // Adjust Y coordinate to be relative to visible top-left corner of console
              |  CONSOLE_SCREEN_BUFFER_INFO info;
              |  HANDLE h_stdout = GetStdHandle( STD_OUTPUT_HANDLE );
              |  if (GetConsoleScreenBufferInfo(h_stdout,&info))
              |  {
              |    $y -= info.srWindow.Top;
              |  }

                 if (event_flags)
                   if (event_flags & native("DOUBLE_CLICK")->Int32)
                     events.add ConsoleEvent( windows_last_press_type, x, y )
                     events.add ConsoleEvent( ConsoleEventType.POINTER_RELEASE, x, y )
                   elseIf (event_flags & native("MOUSE_MOVED")->Int32)
                     events.add ConsoleEvent( ConsoleEventType.POINTER_MOVE, x, y )
                   elseIf (event_flags & native("MOUSE_WHEELED")->Int32)
                     if ((new_button_state & 0xFFFF0000) > 0)
                       events.add ConsoleEvent( ConsoleEventType.SCROLL_UP, x, y )
                     else
                       events.add ConsoleEvent( ConsoleEventType.SCROLL_DOWN, x, y )
                     endIf
                   endIf
                 else
                   # Button pressed or released
                   local toggled = (windows_button_state ~ new_button_state)
                   if (toggled)
                     if (toggled & native("FROM_LEFT_1ST_BUTTON_PRESSED")->Int32)
                       if (new_button_state & native("FROM_LEFT_1ST_BUTTON_PRESSED")->Int32)
                         windows_last_press_type = ConsoleEventType.POINTER_PRESS_LEFT
                         events.add ConsoleEvent( ConsoleEventType.POINTER_PRESS_LEFT, x, y )
                       else
                         events.add ConsoleEvent( ConsoleEventType.POINTER_RELEASE, x, y )
                       endIf
                     elseIf (toggled & native("RIGHTMOST_BUTTON_PRESSED")->Int32)
                       if (new_button_state & native("RIGHTMOST_BUTTON_PRESSED")->Int32)
                         windows_last_press_type = ConsoleEventType.POINTER_PRESS_RIGHT
                         events.add ConsoleEvent( ConsoleEventType.POINTER_PRESS_RIGHT, x, y )
                       else
                         events.add ConsoleEvent( ConsoleEventType.POINTER_RELEASE, x, y )
                       endIf
                     endIf
                   endIf
                   windows_button_state = new_button_state
                 endIf
                 return

      native @|} // if MOUSE_EVENT
              |
              |if (record.EventType == KEY_EVENT && record.Event.KeyEvent.bKeyDown &&
              |    record.Event.KeyEvent.uChar.UnicodeChar)
              |{
              |  $unicode = (RogueInt32) record.Event.KeyEvent.uChar.UnicodeChar;
                 if (unicode == 13) unicode = 10
                 events.add ConsoleEvent( ConsoleEventType.CHARACTER, unicode, 0 )
                 return
      native @|}
              |
              |#endif // ROGUE_PLATFORM_WINDOWS

    method _fill_event_queue_unix
      _fill_event_queue_unix_process_next

    method _fill_event_queue_unix_process_next
      if (not _fill_input_buffer(1)) return

      local b1 = _input_bytes.remove_first

      if (b1 == 27)
        # Escape sequence
        if ((_input_bytes.count >= 2) and _input_bytes.first == 91)
          _input_bytes.remove_first  # 91 / '['
          if (_input_bytes.first == 77)
            if (_fill_input_buffer(4))
              # Mouse event
              _input_bytes.remove_first  # 77
              local event_type : ConsoleEventType
              local type = UnixConsoleMouseEventType(_input_bytes.remove_first)
              which (type)
                case UnixConsoleMouseEventType.PRESS_LEFT:  event_type = ConsoleEventType.POINTER_PRESS_LEFT
                case UnixConsoleMouseEventType.PRESS_RIGHT: event_type = ConsoleEventType.POINTER_PRESS_RIGHT
                case UnixConsoleMouseEventType.RELEASE:     event_type = ConsoleEventType.POINTER_RELEASE
                case UnixConsoleMouseEventType.DRAG_LEFT:   event_type = ConsoleEventType.POINTER_MOVE
                case UnixConsoleMouseEventType.DRAG_RIGHT:  event_type = ConsoleEventType.POINTER_MOVE
                case UnixConsoleMouseEventType.MOVE:        event_type = ConsoleEventType.POINTER_MOVE
                case UnixConsoleMouseEventType.SCROLL_UP:   event_type = ConsoleEventType.SCROLL_UP
                case UnixConsoleMouseEventType.SCROLL_DOWN: event_type = ConsoleEventType.SCROLL_DOWN
                others: return
              endWhich

              local x = _input_bytes.remove_first->Int32 - 33
              local y = _input_bytes.remove_first->Int32 - 33
              events.add ConsoleEvent( event_type, x, y )
              return
            endIf
          elseIf (_input_bytes.first == 51)
            _input_bytes.remove_first
            if (_fill_input_buffer(1))
              if (_input_bytes.first == 126)
                _input_bytes.remove_first
                events.add ConsoleEvent( ConsoleEventType.CHARACTER, 8, 0 )  # BACKSPACE
                return
              endIf
            endIf
          else
            # Assume arrow event
            local ch = (_input_bytes.remove_first - 65) + Console.UP_ARROW
            events.add ConsoleEvent( ConsoleEventType.CHARACTER, ch, 0 )
            return
          endIf
        else
          # Just an ESCAPE by itself
          events.add ConsoleEvent( ConsoleEventType.CHARACTER, 27, 0 )
          return
        endIf
      endIf

      if (b1 < 0xC0 or not decode_utf8)
        # ASCII or non-UTF-8
        events.add ConsoleEvent( ConsoleEventType.CHARACTER, b1, 0 )
        return
      endIf

      local ch = b1 : Int32

      contingent
        # UTF-8
        if ((b1 & 0b1110_0000) == 0b1100_0000)
          necessary (_fill_input_buffer(1))
          ch = b1 & 0b0001_1111
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
        elseIf ((b1 & 0b1111_0000) == 0b1110_0000)
          necessary (_fill_input_buffer(2))
          ch = b1 & 0b0000_1111
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
        elseIf ((b1 & 0b1111_1000) == 0b1111_0000)
          necessary (_fill_input_buffer(3))
          ch = b1 & 0b0000_0111
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
        elseIf ((b1 & 0b1111_1100) == 0b1111_1000)
          necessary (_fill_input_buffer(4))
          ch = b1 & 0b0000_0011
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
        else
          necessary (_fill_input_buffer(5))
          ch = b1 & 0b0000_0001
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
          ch = (ch :<<: 6) | (_input_bytes.remove_first & 0b11_1111)
        endIf
      endContingent

      events.add ConsoleEvent( ConsoleEventType.CHARACTER, ch, 0 )

    method height->Int32
      native @|#ifdef ROGUE_PLATFORM_WINDOWS
              |  HANDLE h_stdout = GetStdHandle( STD_OUTPUT_HANDLE );
              |  CONSOLE_SCREEN_BUFFER_INFO info;
              |  if (GetConsoleScreenBufferInfo(h_stdout,&info)) return (info.srWindow.Bottom - info.srWindow.Top) + 1;
              |  else return 24;
              |#else
              |  struct winsize sz;
              |  ioctl( STDOUT_FILENO, TIOCGWINSZ, &sz );
              |
              |  return sz.ws_row;
              |#endif

    method move_cursor( dx:Int32, dy:Int32, output=Global:PrintWriter )
      output.flush
      if (dx)
        if (dx > 0) output.print( "\e[" ).print(  dx ).print( 'C' )
        else        output.print( "\e[" ).print( -dx ).print( 'D' )
      endIf
      if (dy)
        if (dy > 0) output.print( "\e[" ).print(  dy ).print( 'B' )
        else        output.print( "\e[" ).print( -dy ).print( 'A' )
      endIf
      output.flush

    method peek->Character
      if (has_another)
        forEach (event in events)
          if (event.is_character) return event.x
        endForEach
      endIf
      return 0

    method peek_event->ConsoleEvent
      return events.first

    method read->Character
      if (not has_another) return 0

      while (events.count)
        local event = events.remove_first
        if (event.is_character)
          return event.x
        endIf
      endWhile

      return 0

    method read_event->ConsoleEvent
      return events.remove_first

    method read_line->String
      input_buffer.clear
      forEach (byte in this)
        if (byte == 10) escapeForEach
        input_buffer.write( byte )
      endForEach
      return input_buffer->String

    method read_line( prompt:String )->String
      write prompt
      return read_line

    method read_line( prompt:StringBuilder )->String
      write prompt
      return read_line

    method reset_input
      # Allows stdin to be read again after a CTRL+D
      native @|clearerr( stdin );

    method reset_io_mode
      immediate_mode = false
      show_cursor = true

    method restore_cursor_position( output=Global:PrintWriter )
      output.flush
      output.print( "\e[u" ).flush

    method save_cursor_position( output=Global:PrintWriter )
      output.flush
      output.print( "\e[s" ).flush

    method set_cursor( x:Int32, y:Int32, output=Global:PrintWriter )
      ++x
      ++y
      output.flush
      output.print( "\e[" ).print( y ).print( ';' ).print( x ).print( 'H' ).flush

    method set_enable_mouse_events( setting=true:Logical, output=Global:PrintWriter )
      # Console.enable_mouse_events = true/false

    method set_immediate_mode( setting:Logical )
      # setting==true: turn off echo and line buffer, turn on mouse events.
      #                Must call next_is_mouse_event/read_mouse_event
      if (@immediate_mode != setting)
        @immediate_mode = setting
        if (@immediate_mode)
          # Turn off blocking and line buffering
          windows_button_state = 0
          native @|#if defined(ROGUE_PLATFORM_WINDOWS)
                  |  HANDLE h_stdin = GetStdHandle( STD_INPUT_HANDLE );
                  |  DWORD mode;
                  |  GetConsoleMode( h_stdin, &mode );
                  |  SetConsoleMode( h_stdin, (mode & ~(ENABLE_QUICK_EDIT_MODE)) | ENABLE_EXTENDED_FLAGS | ENABLE_MOUSE_INPUT );
                  |#else
                  |  termios new_settings;
                  |  tcgetattr( STDIN_FILENO, &new_settings );
                  |  new_settings.c_lflag &= ~(ECHO | ECHOE | ICANON);
                  |  new_settings.c_cc[VMIN] = 0;
                  |  new_settings.c_cc[VTIME] = 0;
                  |  tcsetattr( STDIN_FILENO, TCSANOW, &new_settings );
                  |  fcntl( STDIN_FILENO, F_SETFL, fcntl(STDIN_FILENO,F_GETFL)|O_NONBLOCK );

                     # Enable mouse events
                     Global.[flush].print( "\e[?1003h" ).flush
          native @|#endif
        else
          native @|#if defined(ROGUE_PLATFORM_WINDOWS)
                  |  HANDLE h_stdin = GetStdHandle( STD_INPUT_HANDLE );
                  |  DWORD mode;
                  |  GetConsoleMode( h_stdin, &mode );
                  |  if ($this->windows_in_quick_edit_mode) mode |= ENABLE_QUICK_EDIT_MODE;
                  |  mode |= (ENABLE_EXTENDED_FLAGS | ENABLE_MOUSE_INPUT);
                  |  SetConsoleMode( h_stdin, mode );
                  |#else
                  |  tcsetattr( STDIN_FILENO, TCSANOW, &$this->original_terminal_settings );
                  |  fcntl( STDIN_FILENO, F_SETFL, $this->original_stdin_flags );

                     # Disable mouse events
                     Global.[flush].print( "\e[?1003l" ).flush
          native @|#endif
        endIf
      endIf

    method set_show_cursor( setting=true:Logical, output=Global:PrintWriter )
      if (@show_cursor == setting) return
      @show_cursor = setting

      # Console.show_cursor = true / false
      output.flush
      output.print( "\e[?25" ).print( ?:{setting:'h'||'l'} ).flush

    method size->XY
      return XY(width,height)

    method width->Int32
      native @|#ifdef ROGUE_PLATFORM_WINDOWS
              |  HANDLE h_stdout = GetStdHandle( STD_OUTPUT_HANDLE );
              |  CONSOLE_SCREEN_BUFFER_INFO info;
              |  if (GetConsoleScreenBufferInfo(h_stdout,&info)) return info.dwSize.X;
              |  else return 80;
              |#else
              |  struct winsize sz;
              |  ioctl( STDOUT_FILENO, TIOCGWINSZ, &sz );
              |
              |  return sz.ws_col;
              |#endif

    method write( value:String )
      $if (target("Android"))
        native @|__android_log_print( ANDROID_LOG_INFO, "Rogue", "%s", $value->utf8 );
      $else
      native @|Rogue_fwrite( (char*)$value->utf8, $value->byte_count, STDOUT_FILENO );
      $endIf

    method write( buffer:StringBuilder )
      $if (target("Android"))
        buffer.reserve(1).utf8[ buffer.count ] = 0  # null terminate
        native @|__android_log_print( ANDROID_LOG_INFO, "Rogue", "%s", $buffer->utf8->data->as_bytes );
      $else
        native @|Rogue_fwrite( (char*)$buffer->utf8->data->as_bytes, $buffer->utf8->count, STDOUT_FILENO );
      $endIf

endClass

class ConsoleErrorPrinter : BufferedPrintWriter<<output_buffer>>
  METHODS
    method flush( buffer:StringBuilder )
      write( buffer )
      buffer.clear

    method write( value:String )
      $if (target("Android"))
        native @|__android_log_print( ANDROID_LOG_ERROR, "Rogue", "%s", $value->utf8 );
      $else
        native @|Rogue_fwrite( (char*)$value->utf8, $value->byte_count, STDERR_FILENO );
      $endIf

    method write( buffer:StringBuilder )
      $if (target("Android"))
        buffer.reserve(1).utf8[ buffer.count ] = 0  # null terminate
        native @|__android_log_print( ANDROID_LOG_ERROR, "Rogue", "%s", $buffer->utf8->data->as_bytes );
      $else
        native @|Rogue_fwrite( (char*)$buffer->utf8->data->as_bytes, $buffer->utf8->count, STDERR_FILENO );
      $endIf

endClass

enum ConsoleEventType
  CHARACTER
  POINTER_PRESS_LEFT
  POINTER_PRESS_RIGHT
  POINTER_RELEASE
  POINTER_MOVE
  SCROLL_UP
  SCROLL_DOWN
endEnum

class ConsoleEvent( type:ConsoleEventType, x:Int32, y:Int32 ) [compound]
  METHODS
    method is_character->Logical
      return (type == ConsoleEventType.CHARACTER)

    method is_pointer_press->Logical
      return (type==ConsoleEventType.POINTER_PRESS_LEFT or type==ConsoleEventType.POINTER_PRESS_RIGHT)

    method is_pointer_press_left->Logical
      return (type==ConsoleEventType.POINTER_PRESS_LEFT)

    method is_pointer_press_right->Logical
      return (type==ConsoleEventType.POINTER_PRESS_RIGHT)

    method is_pointer_release->Logical
      return (type==ConsoleEventType.POINTER_RELEASE)

    method is_scroll_up->Logical
      return (type==ConsoleEventType.SCROLL_UP)

    method is_scroll_down->Logical
      return (type==ConsoleEventType.SCROLL_DOWN)

    method description->String
      which (type)
        case ConsoleEventType.CHARACTER
          which (Int32(x))
            case 8:                   return "BACKSPACE"
            case '\t':                return "TAB"
            case 10:                  return "NEWLINE"
            case 27:                  return "ESCAPE"
            case Console.UP_ARROW:    return "UP"
            case Console.DOWN_ARROW:  return "DOWN"
            case Console.RIGHT_ARROW: return "RIGHT"
            case Console.LEFT_ARROW:  return "LEFT"
            case 127:                 return "DELETE"
            others:                   return ""+Character(x)
          endWhich
        case ConsoleEventType.SCROLL_UP,
             ConsoleEventType.SCROLL_DOWN
          return type->String
      endWhich
      return "$($,$)" (type,x->Int32,y->Int32)

    method unicode->Character
      return Character(x)
endClass

enum UnixConsoleMouseEventType
  PRESS_LEFT  = 32
  PRESS_RIGHT = 34
  RELEASE     = 35
  DRAG_LEFT   = 64
  DRAG_RIGHT  = 66
  MOVE        = 67
  SCROLL_UP   = 96
  SCROLL_DOWN = 97
endEnum

class ConsoleStyle [singleton]
  # USAGE
  #  ConsoleStyle.[ fg_white, bg_red ]
  #  println "Hello World!"
  #  ConsoleStyle.reset
  #
  # OR
  #   ConsoleStyle.print( ConsoleStyle.FG_WHITE )
  #   ConsoleStyle.print( ConsoleStyle.BG_RED )
  #   println "Hello World!"
  #   ConsoleStyle.print( ConsoleStyle.RESET )
  #   ConsoleStyle.flush
  PROPERTIES
    RESET            = 0
    BOLD             = 1
    DIM              = 2
    UNDERLINE        = 4
    BLINK            = 5
    INVERSE          = 7
    HIDDEN           = 8
    BOLD_OFF         = 22
    DIM_OFF          = 22
    UNDERLINE_OFF    = 24
    BLINK_OFF        = 25
    INVERSE_OFF      = 27
    HIDDEN_OFF       = 28

    FG_DEFAULT       = 39
    FG_BLACK         = 30
    FG_RED           = 31
    FG_GREEN         = 32
    FG_YELLOW        = 33
    FG_BLUE          = 34
    FG_MAGENTA       = 35
    FG_CYAN          = 36
    FG_LIGHT_GRAY    = 37
    FG_DARK_GRAY     = 90
    FG_LIGHT_RED     = 91
    FG_LIGHT_GREEN   = 92
    FG_LIGHT_YELLOW  = 93
    FG_LIGHT_BLUE    = 94
    FG_LIGHT_MAGENTA = 95
    FG_LIGHT_CYAN    = 96
    FG_WHITE         = 97

    BG_DEFAULT       = 49
    BG_BLACK         = 40
    BG_RED           = 41
    BG_GREEN         = 42
    BG_YELLOW        = 43
    BG_BLUE          = 44
    BG_MAGENTA       = 45
    BG_CYAN          = 46
    BG_LIGHT_GRAY    = 47
    BG_DARK_GRAY     = 100
    BG_LIGHT_RED     = 101
    BG_LIGHT_GREEN   = 102
    BG_LIGHT_YELLOW  = 103
    BG_LIGHT_BLUE    = 104
    BG_LIGHT_MAGENTA = 105
    BG_LIGHT_CYAN    = 106
    BG_WHITE         = 107

  METHODS
    method print( code:Int32, output=Global:PrintWriter )
      output.flush
      output.print( "\e[" )
      output.print( code )
      output.print( "m" )
      output.flush

    method print( code:Int32, builder:StringBuilder )
      builder.print( "\e[" ).print( code ).print( "m" )

    method print_bg_color( index:Int32, output=Global:PrintWriter )
      # 256 color mode
      output.flush
      output.print( "\e[48;5;" )
      output.print( index )
      output.print( "m" )
      output.flush

    method print_bg_color( index:Int32, builder:StringBuilder )
      # 256 color mode
      builder.print( "\e[48;5;" ).print( index ).print( "m" )

    method print_fg_color( index:Int32, output=Global:PrintWriter )
      # 256 color mode
      output.flush
      output.print( "\e[38;5;" )
      output.print( index )
      output.print( "m" )
      output.flush

    method print_fg_color( index:Int32, builder:StringBuilder )
      # 256 color mode
      builder.print( "\e[38;5;" ).print( index ).print( "m" )

    method flush
      Global.flush

    method string( code:Int32 )->String
      # Returns full escape sequence activating the given code.
      # Example: println ConsoleStyle.string(ConsoleStyle.BG_BLUE)
      return "\e[$m" (code)
endClass

# Use metacode to generate a global print method for each code.
# For example, for FG_RED the following method is generated:
#   method fg_red
#     print( FG_RED )
$metacode<ConsoleStyle.organize_methods>
forEach (p in property_list)
  sourceln "method $( output=Global:PrintWriter )" (p.name.to_lowercase)
  sourceln "  print( $, output ); output.flush" (p.name)
  injectMethod
endForEach
$endMetacode
