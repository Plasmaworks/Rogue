class Files
  # Manages a set of filepath strings.
  PROPERTIES
    base_folder : String
    filepaths   = StringLookupList()

  METHODS
    method init( base_folder:String, &allow_pattern=true )
      base_folder = File.expand_path( File.fix_slashes(base_folder) )

      if (allow_pattern)
        # Treat the folder as a possible pattern
        local path_segments = File.without_trailing_separator( base_folder ).split( '/' )
        local pattern_segments = String[]
        local first_wildcard_i = path_segments.locate( (p) => (p.contains('*') or p.contains('?')) )
        if (first_wildcard_i)
          forEach (p in path_segments from first_wildcard_i.value)
            pattern_segments.add( p )
          endForEach
          path_segments.discard_from( first_wildcard_i.value )
        endIf
        if (pattern_segments.count)
          if (path_segments.is_empty) base_folder = "."
          else                        base_folder = path_segments.join( "/" )
          local pattern : String
          if (pattern_segments.is_empty) pattern = "*"
          else                           pattern = pattern_segments.join( "/" )
          init( base_folder, pattern )
          return
        endIf
      endIf

      if (base_folder == "") base_folder = "./"
      this.base_folder = File.fix_slashes( File.ensure_ends_with_separator( base_folder ) )
      if (this.base_folder.begins_with("./") and this.base_folder.count > 2)
        this.base_folder = this.base_folder.rightmost( -2 )
      endIf

    method init( base_folder:String, pattern:FilePattern, &ignore_hidden=true, &include_folders, &unsorted )
      init( base_folder, &!allow_pattern )
      add( pattern, &=ignore_hidden, &=include_folders, &=unsorted )

    method init( base_folder:String, pattern:String, &ignore_hidden=true, &include_folders )
      init( base_folder, &!allow_pattern )
      add( pattern, &=ignore_hidden, &=include_folders )

    method add( pattern:FilePattern, &ignore_hidden=true, &include_folders, &unsorted )->this
      return add( pattern->String, &=ignore_hidden, &=include_folders, &=unsorted )

    method add( pattern:String, &ignore_hidden=true, &include_folders, &unsorted )->this
      local target = base_folder+pattern
      if (File.exists(target) and not File.is_folder(target))
        filepaths.add( target )
      else
        forEach (listing_filepath in File.listing(base_folder,FilePattern(pattern),&=ignore_hidden,&=unsorted))
          if (not filepaths.contains(listing_filepath))
            if (include_folders or not File.is_folder(listing_filepath))
              filepaths.add( listing_filepath )
            endIf
          endIf
        endForEach
      endIf

      return this

    method any_newer_than( filepath:String )->Logical
      if (not File.exists(filepath)) return true
      local timestamp = newest_timestamp
      if (not timestamp.exists) return false
      return (timestamp.value > File.timestamp(filepath))

    method contains( filepath:String )->Logical
      return filepaths.contains( filepath )

    method copy( to_folder:String, &if_newer, &if_different )
      File.create_folder( to_folder )
      to_folder += File.separator
      forEach (filepath in filepaths)
        local to_filepath = to_folder + relative_filepath(filepath)
        File.copy( filepath, to_filepath, &=if_newer, &=if_different )
      endForEach

    method count->Int32
      return filepaths.count

    method delete( &verbose )
      forEach (filepath in filepaths)
        filepath = relative_filepath( filepath )
        if (verbose) print( "Deleting " ).println( filepath )
        File.delete( filepath )
      endForEach

    method get( index:Int32 )->String
      return filepaths[ index ]

    method newest_timestamp->Real64?
      local result : Real64?
      forEach (filepath in filepaths)
        if (File.exists(filepath))
          local timestamp = File.timestamp( filepath )
          if (not result.exists or timestamp > result.value) result = timestamp
        endIf
      endForEach
      return result

    method oldest_timestamp->Real64?
      local result : Real64?
      forEach (filepath in filepaths)
        if (File.exists(filepath))
          local timestamp = File.timestamp( filepath )
          if (not result.exists or timestamp < result.value) result = timestamp
        endIf
      endForEach
      return result

    method relative_filepath( filepath:String )->String
      if (base_folder.count == 0) return filepath
      if (not filepath.begins_with(base_folder)) return filepath
      return filepath.after_first( base_folder )

    method remove( pattern:String )->this
      if (pattern.contains('*') or pattern.contains('?'))
        forEach (filepath at index in filepaths step -1)
          if (File.matches_wildcard_pattern(filepath,pattern) or
              File.matches_wildcard_pattern(relative_filepath(filepath),pattern))
            filepaths.remove_at( index )
          endIf
        endForEach
      else
        if (filepaths.contains(pattern))
          filepaths.remove( pattern )
        elseIf (base_folder.count and not pattern.begins_with(base_folder))
          local full_filepath = File.join( base_folder, pattern )
          filepaths.remove( full_filepath )
        endIf
      endIf
      return this

    method remove( files:Files )->this
      forEach (filepath in files)
        filepaths.remove( filepath )
      endForEach
      return this

    method description->String
      return filepaths->String[]

    method to->String[]
      return filepaths->String[]
endClass
