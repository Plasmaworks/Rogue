uses Bitmap

# 256 color RGB value info:
# https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
# https://stackoverflow.com/a/27165165/135791

class ANSIColor( index:Int32, color:Color ) [compound]
endClass

class ANSIColors : ANSIColor[] [singleton]
  PROPERTIES
    BLACK       = ANSIColor(  0, Color(0xFF000000) )
    DARK_RED    = ANSIColor(  1, Color(0xFF990000) )
    DARK_GREEN  = ANSIColor(  2, Color(0xFF00A600) )
    DARK_YELLOW = ANSIColor(  3, Color(0xFF999900) )
    DARK_BLUE   = ANSIColor(  4, Color(0xFF729fcf) )
    DARK_PURPLE = ANSIColor(  5, Color(0xFFB200B2) )
    DARK_CYAN   = ANSIColor(  6, Color(0xFF00A6B2) )
    LIGHT_GRAY  = ANSIColor(  7, Color(0xFFBFBFBF) )

    DARK_GRAY   = ANSIColor(  8, Color(0xFF666666) )
    RED         = ANSIColor(  9, Color(0xFFE50000) )
    GREEN       = ANSIColor( 10, Color(0xFF00D900) )
    YELLOW      = ANSIColor( 11, Color(0xFFE5E500) )
    BLUE        = ANSIColor( 12, Color(0xFF0000ff) )
    PURPLE      = ANSIColor( 13, Color(0xFFE500E5) )
    CYAN        = ANSIColor( 14, Color(0xFF00E5E5) )
    WHITE       = ANSIColor( 15, Color(0xFFE5E5E5) )

  METHODS
    method init
      prior.init( 256 )

      add( BLACK )
      add( DARK_RED )
      add( DARK_GREEN )
      add( DARK_YELLOW )
      add( DARK_BLUE )
      add( DARK_PURPLE )
      add( DARK_CYAN )
      add( LIGHT_GRAY )

      add( DARK_GRAY )
      add( RED )
      add( GREEN )
      add( YELLOW )
      add( BLUE )
      add( PURPLE )
      add( CYAN )
      add( WHITE )

      # RGB colors 16..231
      local intensities = [0, 95, 135, 175, 215, 255]
      forEach (r in 0..5)
        forEach (g in 0..5)
          forEach (b in 0..5)
            add( ANSIColor(count,Color(intensities[r],intensities[g],intensities[b])) )
          endForEach
        endForEach
      endForEach

      # Grayscale 232..255
      forEach (n in 232..255)
        local v = (n - 232) * 10 + 8
        add( ANSIColor(count,Color(v,v,v)) )
      endForEach
endClass


class ANSIColorLookup : Byte[] [singleton]
  DEFINITIONS
    COLOR_240 = 0
    COLOR_16  = 1
    GRAY_24   = 2
    GRAY_4    = 3

  METHODS
    method init
      init( COLOR_240 )

    method init( color_mode:Int32 )
      # color_mode
      #   COLOR_240, COLOR_16, GRAY_24, or GRAY_4
      #   Windows is limited to COLOR_16 and GRAY_4
      prior.init( 16*16*16 )
      count = 16*16*16

      local target_colors = Int32[](256)
      target_colors.add( (forEach in ANSIColors).color.argb )

      local palette = Int32[](240)  # indices into target_colors[]
      which (color_mode)
        case GRAY_4
          palette.[ add(0), add(7), add(8), add(15) ]
        case COLOR_16
          palette.add( forEach in 0..15 )
        case GRAY_24
          palette.add( forEach in 232..255 )
        others
          palette.add( forEach in 16..255 )
      endWhich

      native @|RogueInt32* target_colors = $target_colors->as_int32s;
              |RogueInt32* palette = $palette->as_int32s;
              |RogueByte*  mapping = $this->as_bytes - 1;
              |
              |for (RogueInt32 r4=-1; ++r4<=15; )
              |{
              |  for (RogueInt32 g4=-1; ++g4<=15; )
              |  {
              |    for (RogueInt32 b4=-1; ++b4<=15; )
              |    {
              |      RogueInt32 best_i = -1;
              |      RogueInt32 best_score = 0;
              |      for (RogueInt32 i=$palette->count; --i>=0; )
              |      {
              |        RogueInt32 color = target_colors[palette[i]];
              |        RogueInt32 dr = ((r4<<4)|r4) - ((color>>16)&255);
              |        RogueInt32 dg = ((g4<<4)|g4) - ((color>>8)&255);
              |        RogueInt32 db = ((b4<<4)|b4) - (color&255);
              |        RogueInt32 score = dr*dr + dg*dg + db*db;
              |        if (best_i == -1 || score < best_score)
              |        {
              |          best_i = i;
              |          best_score = score;
              |        }
              |      }
              |      *(++mapping) = (RogueByte) palette[best_i];
              |    }
              |  }
              |}
endClass

