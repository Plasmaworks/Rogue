module Geometry

class Anchor( position:XY ) [compound]
  DEFINITIONS
    TOP_LEFT      = Anchor( XY( 0.0, 0.0) )
    TOP           = Anchor( XY( 0.5, 0.0) )
    TOP_RIGHT     = Anchor( XY( 1.0, 0.0) )
    LEFT          = Anchor( XY( 0.0, 0.5) )
    CENTER        = Anchor( XY( 0.5, 0.5) )
    RIGHT         = Anchor( XY( 1.0, 0.5) )
    BOTTOM_LEFT   = Anchor( XY( 0.0, 1.0) )
    BOTTOM        = Anchor( XY( 0.5, 1.0) )
    BOTTOM_RIGHT  = Anchor( XY( 1.0, 1.0) )

    LEFT_TOP      = TOP_LEFT
    TOP_CENTER    = TOP
    CENTER_TOP    = TOP
    RIGHT_TOP     = TOP_RIGHT
    LEFT_CENTER   = LEFT
    CENTER_LEFT   = LEFT
    LEFT_BOTTOM   = BOTTOM_LEFT
    BOTTOM_CENTER = BOTTOM
    CENTER_BOTTOM = BOTTOM
    RIGHT_BOTTOM  = BOTTOM_RIGHT

  GLOBAL METHODS
    method operator*( size:IntXY, anchor:Anchor )->IntXY
      # size * anchor -> delta (or the anchor position within the area (0,0,size))
      # Display.size * Anchor.TOP_LEFT     -> IntXY(0,0)
      # Display.size * Anchor.BOTTOM_RIGHT -> Display.size
      return IntXY( anchor.position.x*size.x, anchor.position.y*size.y )

    method operator*( anchor:Anchor, size:IntXY )->IntXY
      # anchor * size -> delta (or the anchor position within the area (0,0,size))
      # Anchor.TOP_LEFT     * Display.size -> IntXY(0,0)
      # Anchor.BOTTOM_RIGHT * Display.size -> Display.size
      return IntXY( anchor.position.x*size.x, anchor.position.y*size.y )

  METHODS
    method hash_code->Int
      return position.hash_code

    method operator==( other:Anchor )->Logical
      return position == other.position

    method print_to( buffer:PrintWriter )
      which (position)
        case TOP_LEFT.position:     buffer.print( "TOP_LEFT" )
        case TOP.position:          buffer.print( "TOP" )
        case TOP_RIGHT.position:    buffer.print( "TOP_RIGHT" )
        case LEFT.position:         buffer.print( "LEFT" )
        case CENTER.position:       buffer.print( "CENTER" )
        case RIGHT.position:        buffer.print( "RIGHT" )
        case BOTTOM_LEFT.position:  buffer.print( "BOTTOM_LEFT" )
        case BOTTOM.position:       buffer.print( "BOTTOM" )
        case BOTTOM_RIGHT.position: buffer.print( "BOTTOM_RIGHT" )
        others:            buffer.print( position )
      endWhich

    method to->String
      local result = String()
      print_to( result )
      return result
endClass
