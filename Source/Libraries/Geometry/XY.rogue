module Geometry

class XY( x:Real, y:Real ) [compound]
  DEFINITIONS
    zero = XY(0,0)

  GLOBAL METHODS
    method create( n:Real )->XY
      return XY(n,n)

    method create( xy:IntXY )->XY
      return XY(xy.x,xy.y)

    method operator?->Logical
      return x or y

    method operator+( a:XY, b:XY )->XY
      return XY( a.x+b.x, a.y+b.y )

    method operator-( a:XY, b:XY )->XY
      return XY( a.x-b.x, a.y-b.y )

    method operator*( a:XY, b:XY )->XY
      return XY( a.x*b.x, a.y*b.y )

    method operator*( a:XY, b:Real )->XY
      return XY( a.x*b, a.y*b )

    method operator*( a:XY, b:IntXY )->XY
      return XY( a.x*b.x, a.y*b.y )

    method operator*( a:IntXY, b:XY )->XY
      return XY( a.x*b.x, a.x*b.y )

    method operator/( a:XY, b:XY )->XY
      return XY( a.x/b.x, a.y/b.y )

    method operator/( a:XY, b:Real )->XY
      return XY( a.x/b, a.y/b )

    method operator/( a:XY, b:IntXY )->XY
      return XY( a.x/b.x, a.y/b.y )

    method operator/( a:Real, b:XY )->XY
      return XY( a/b.x, a/b.y )

    method operator/( a:IntXY, b:XY )->XY
      return XY( a.x/b.x, a.x/b.y )

    method operator%( a:XY, b:XY )->XY
      return XY( a.x%b.x, a.y%b.y )

    method operator%( a:XY, b:Real )->XY
      if (b == 0) return a
      return XY( a.x%b, a.y%b )

    method operator%( a:Real, b:XY )->XY
      return XY( a%b.x, a%b.y )

    method operator%( a:IntXY, b:XY )->XY
      return XY( a.x%b.x, a.x%b.y )

    method operator^( a:XY, b:XY )->XY
      return XY( a.x^b.x, a.y^b.y )

    method operator^( a:XY, b:Real )->XY
      return XY( a.x^b, a.y^b )

    method operator*( a:Real, b:XY )->XY
      return XY( a*b.x, a*b.y )

  METHODS
    method abs->XY
      return XY( x.abs, y.abs )

    method ceiling->XY
      return XY( x.ceiling, y.ceiling )

    method clamped( low:XY, high:XY )->XY
      return this.clamped_low(low).clamped_high(high)

    method clamped_high( limit:XY )->XY
      return XY( this.x.clamped_high(limit.x), this.y.clamped_high(limit.y) )

    method clamped_low( limit:XY )->XY
      return XY( this.x.clamped_low(limit.x), this.y.clamped_low(limit.y) )

    method cross( other:IntXY )->Real
      return x * other.y - y * other.x

    method distance_to( other:XY )->Int32
      return (other - this).magnitude

    method dot( other:IntXY )->Real
      return x * other.x + y * other.y

    method floor->XY
      return XY( x.floor, y.floor )

    method is_zero->Logical
      return x == 0 and y == 0

    method magnitude->Real
      return (x*x + y*y).sqrt

    method magnitude2->Real
      return x*x + y*y

    method max->Real
      return which{ x>=y:x || y }

    method min->Real
      return which{ x<=y:x || y }

    method max( other:XY )->XY
      # Returns an XY containing the max X and the max Y of 'this' and 'other'.
      local max_x = which{ x>=other.x:x || other.x }
      local max_y = which{ y>=other.y:y || other.y }
      return XY( max_x, max_y )

    method min( other:XY )->XY
      # Returns an XY containing the min X and the min Y of 'this' and 'other'.
      local min_x = which{ x<=other.x:x || other.x }
      local min_y = which{ y<=other.y:y || other.y }
      return XY( min_x, min_y )

    method normal->XY
      # Returns the normal of this vector.
      return XY( -y, x )

    method normalized->XY
      local msq = x*x + y*y
      if (msq <= 0) return XY(0,0)
      local m = msq.sqrt
      if (m) return XY( x/m, y/m )
      else   return XY.zero

    method operator==( other:XY )->Logical
      return x == other.x and y == other.y

    method operator-()->XY
      return XY( -x, -y )

    method operator<>( other:XY )->Int32
      if (x == other.x) return y <> other.y
      else              return x <> other.x

    method or_larger( other:XY )->XY
      # Returns the largest X and the largest Y between this value and the other value.
      return XY( this.x.or_larger(other.x), this.y.or_larger(other.y) )

    method or_smaller( other:XY )->XY
      # Returns the smaller X and the smaller Y between this value and the other value.
      return XY( this.x.or_smaller(other.x), this.y.or_smaller(other.y) )

    method product->Real
      return x * y

    method sign->XY
      return XY( x.sign, y.sign )

    method to->String
      return "($,$)"(x,y)

    method xv->XY
      return XY(x,0)

    method yv->XY
      return XY(0,y)

    method yx->XY
      return XY(y,x)
endClass

augment Math::Random
  METHODS
    method real_xy( limit:Real )->Geometry::XY
      return Geometry::XY( real(limit), real(limit) )

    method real_xy( limit:Geometry::XY )->Geometry::XY
      return Geometry::XY( real(limit.x), real(limit.y) )
endAugment

