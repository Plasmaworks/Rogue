#==================================================================
# STLPriorityQueue.rogue
#
# March 3, 2016 by Murphy McCauley
#
# A priority queue backed by the STL priority_queue
#==================================================================

class STLPriorityQueue<<$DataType>>
  nativeHeader
    #include <queue>
    #include <vector>
    #include <functional>
  endNativeHeader

  PROPERTIES
    native "std::priority_queue<$($DataType),std::vector<$($DataType)>,std::function<bool($($DataType),$($DataType))>>* _q;"

  METHODS
    method init
      native "$this->_q = new std::priority_queue<$($DataType),std::vector<$($DataType)>,std::function<bool($($DataType),$($DataType))>> ( [] ($($DataType) a,$($DataType) b) -> bool { return " ( native("a")->$DataType < native("b")->$DataType ) native " } );"

    method on_cleanup
      while (count) pop() # Probably a faster way...
      native "delete $this->_q;"

    method push( n:$DataType )->this
      native "$this->_q->push( $(n.retain) );"
      return this

    method count->Int32
      return native( "$this->_q->size()" )->Int32

    method empty->Logical
      return native( "$this->_q->empty()" )->Logical

    method top->$DataType
      return native( "$this->_q->top()" )->$DataType

    method pop->$DataType
      local result = top

      native "$this->_q->pop();"

      return native( "$(result.release)" )->$DataType

    method description->String
      return "$(count:$)" (type_name, count)
endClass


class STLPriorityQueue<<$DataType, $Compare>> : STLPriorityQueue<<$DataType>>
  nativeHeader
    #include <queue>
    #include <vector>
    #include <functional>
  endNativeHeader

  PROPERTIES
    native "std::priority_queue<$($DataType),std::vector<$($DataType)>,std::function<bool($($DataType),$($DataType))>>* _q;"

  METHODS
    method init
      native "$this->_q = new std::priority_queue<$($DataType),std::vector<$($DataType)>,std::function<bool($($DataType),$($DataType))>> ( [] ($($DataType) a,$($DataType) b) -> bool { return (bool) " $Compare( native("a")->$DataType, native("b")->$DataType ) native "; } );"
endClass
