class Global : BufferedPrintWriter<<global_output_buffer>> [singleton]
  NATIVE
    nativeHeader @|#if defined(ROGUE_PLATFORM_LINUX)
                  |  #include <signal.h>
                  |#endif

  PROPERTIES
    output : PrintWriter
    error  : PrintWriter
    exit_functions  : Function[]

  METHODS
    method init
      native @|signal( SIGINT,  (void*)RogueGlobal__on_control_c__RogueInt32 );
              |signal( SIGSEGV, (void*)RogueGlobal__on_segmentation_fault__RogueInt32 );
      configure_standard_output
      on_exit( () => Global.flush )

    method configure_standard_output
      output = Console
      error  = Console.error

    method flush( buffer:String )
      output.[ print(buffer), flush ]
      buffer.clear

    method on_exit( fn:Function )
      if (not exit_functions) exit_functions = Function[]
      exit_functions.add( fn )

  GLOBAL METHODS
    method call_exit_functions [essential]
      # Called by the native layer when the program is ending normally or exiting
      # due to a System.exit(Int32) call.
      # Ensure these functions won't be called multiple times
      local functions = Global.exit_functions
      Global.exit_functions = null

      if (functions)
        forEach (fn in functions)
          fn()
        endForEach
      endIf

    method on_control_c( signum:Int32 ) [essential]
      call_exit_functions
      System.exit 1

    method on_segmentation_fault( signum:Int32 ) [essential]
      call_exit_functions
      System.exit 1
endClass
