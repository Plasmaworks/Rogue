# USAGE
#   uses Utility/Spreadsheet
#
# EXAMPLE
# # Context for this example:
# # - Column 0 contains row names and other columns contain row data.
# # - A row named "Date" contains dates.
# # - We will load CSV, delete all columns with Saturday & Sunday dates, and re-save.
# uses Utility/Spreadsheet
#
# # Class 'Spreadsheet' currently only works with CSV files.
# local table = Spreadsheet( File("Data.csv") )
#
# # "table.rows" and "table.columns" are Row[] and Column[] lists.
# # We'll use standard "query function" syntax to find the row named "Date".
# local row = table.rows.find( $[0].value == "Date" )
# if (not row.exists)
#   Console.error.println "ERROR: Date not found."
#   System.exit 1
# endIf
#
# # Create a function returning true for cells containing Saturday or Sunday dates.
# local find_fn = function( cell:Cell )->Logical
#   try
#     local date = Date( cell.value->String )
#     return which(date.weekday){ Date.SATURDAY,Date.SUNDAY:true || false }
#   catch (Error)
#     # Not a valid Date
#     return false
#   endTry
# endFunction
#
# # 'row' is optional type 'Row?' so "row.value" gives us the object.
# # We could access Row.cells:Cell[]. Row also contains helpers .find(fn)->Cell and .get(fn)->Cell[] helpers.
# forEach (cell in row.value[find_fn])
#   cell.delete_column
# endForEach
#
# # More compact equivalent to the above:
# # (forEach in (row.value[find_fn])).delete_column
#
# # Uncomment for debug printout
# # println table.to_csv
#
# # Write the output
# println "Saving Output.csv"
# table.save( File("Output.csv") )
#
# # Two additional useful methods to mention:
# # - table.get(column:Int32,row:Int32)->Value
# # - table.set(column,row,value)  # expands table size if necessary

module Spreadsheet

class Spreadsheet
  PROPERTIES
    rows    = Row[]
    columns = Column[]

  METHODS
    method init

    method init( csv_file:File )
      CSVParser( this, csv_file )

    method init( csv:String )
      CSVParser( this, csv )

    method add_column->Column
      local c = Column( this, columns.count )
      columns.add( c )
      forEach (r in rows)
        local cell = Cell( c, r )
        r.add( cell )
        c.add( cell )
      endForEach
      return c

    method add_column( values:Value )->Column
      local i = columns.count
      forEach (value at j in values)
        set( i, j, value )
      endForEach
      return columns[i]

    method add_row->Row
      local r = Row( this, rows.count )
      rows.add( r )
      forEach (c in columns)
        local cell = Cell( c, r )
        r.add( cell )
        c.add( cell )
      endForEach
      return r

    method add_row( values:Value )->Row
      local j = rows.count
      forEach (value at i in values)
        set( i, j, value )
      endForEach
      return rows[j]

    method delete_column( index:Int32 )
      if (index < 0 or index >= columns.count) return
      columns.remove_at( index )
      forEach (row in rows)
        row.cells.remove_at( index )
      endForEach
      _reindex

    method delete_row( index:Int32 )
      if (index < 0 or index >= rows.count) return
      rows.remove_at( index )
      forEach (column in columns)
        column.cells.remove_at( index )
      endForEach
      _reindex

    method get( column:Int32, row:Int32 )->Value
      if (column < 0 or column >= columns.count) return UndefinedValue
      if (row < 0    or row    >= rows.count)    return UndefinedValue
      return columns[ column ][ row ].value

    method save( file:File )
      file.save( to_csv )

    method save( filepath:String )
      File.save( filepath, to_csv )

    method set( column:Int32, row:Int32, value:Value )
      while (column >= columns.count) add_column
      while (row    >= rows.count)    add_row

      columns[ column ][ row ].value = value

    method description->String
      use builder = StringBuilder.pool
        forEach (row in rows)
          forEach (cell at i in row)
            if (i > 0) builder.print( ' ' )
            cell.print( builder, 15 )
          endForEach
          builder.println
        endForEach
        return builder->String
      endUse

    method to_csv->String
      local builder = StringBuilder()
      forEach (row in rows)
        forEach (cell at index in row.cells)
          if (index > 0) builder.print( ',' )
          cell.print( builder, &csv )
        endForEach
        builder.println
      endForEach
      return builder->String

    method _reindex
      forEach (row at index in rows)       row.index = index
      forEach (column at index in columns) column.index = index
endClass


class Header
  PROPERTIES
    table : Spreadsheet
    index : Int32
    cells = Cell[]

  METHODS
    method init( table, index )

    method add( cell:Cell )
      cells.add( cell )

    method count->Int32
      return cells.count

    method find( query:(Function(Cell)->Logical) )->Cell?
      return cells.find( query )

    method get( index:Int32 )->Cell
      if (index < 0 or index >= cells.count) return null
      return cells[ index ]

    method get( query:(Function(Cell)->Logical) )->Cell[]
      return cells[ query ]
endClass


class Row : Header
  METHODS
    method delete
      table.delete_row( index )

    method set( column_index:Int32, value:Value )
      table.set( column_index, index, value )

    method description->String
      use builder = StringBuilder.pool
        forEach (cell at i in cells)
          if (i > 0) builder.print( ' ' )
          cell.print( builder, 15 )
        endForEach
        return builder->String
      endUse
endClass


class Column : Header
  METHODS
    method delete
      table.delete_column( index )

    method set( row_index:Int32, value:Value )
      table.set( index, row_index, value )

    method description->String
      use builder = StringBuilder.pool
        forEach (cell at i in cells)
          if (i > 0) builder.println
          cell.print( builder )
        endForEach
        return builder->String
      endUse
endClass

class Format
  GLOBAL PROPERTIES
    GENERAL = GeneralFormat()
    MONEY   = MoneyFormat()

  GLOBAL METHODS
    method create( value:Value )->Format
      if (value->String.begins_with('$')) return MONEY
      return GENERAL

  METHODS
    method parse( value:Value )->Value
      return value

    method print( value:Value, builder:StringBuilder, width:Int32 )
      loop (width.or_larger(1)) builder.print( '?' )
endClass

class GeneralFormat : Format
  METHODS
    method init

    method print( value:Value, builder:StringBuilder, width:Int32 )
      if (width)
        builder.print( value->String.left_justified(width).leftmost(width) )
      else
        builder.print( value->String )
      endIf
endClass

class MoneyFormat : Format
  METHODS
    method init

    method parse( value:Value )->Value
      return Value( value->String.after_any('$').replacing(",","")->Real64 )

    method print( value:Value, builder:StringBuilder, width:Int32 )
      local st = "$" + value->Real64.format(",.2")
      if (width)
        if (st.count > width)
          st = st.before_first( '.' )
          if (st.count > width) st = "#" * width
        endIf
        builder.print( st.right_justified(width) )
      else
        builder.print( st )
      endIf
endClass

class Cell
  PROPERTIES
    row    : Row
    column : Column
    value  : Value
    format : Format

  METHODS
    method init( column, row, value=UndefinedValue )
      format = Format( value )
      value = format.parse( value )

    method delete_column
      column.delete

    method delete_row
      row.delete

    method is_empty->Logical
      return value.is_empty

    method print( builder:StringBuilder, width=0:Int32, &csv )
      if (csv)
        use temp = StringBuilder.pool
          format.print( value, temp, width )
          if (temp.contains(',') or temp.contains('"'))
            builder.print( '"$"' (temp->String.replacing(''"'','""')) )
          else
            builder.print( temp )
          endIf
        endUse
      else
        format.print( value, builder, width )
      endIf

    method set_value( value:Value )
      if (format is null or format is Format.GENERAL) format = Format( value )
      @value = format.parse( value )

    method to->Logical
      return value->Logical

    method to->Int32
      return value->Int32

    method to->Int64
      return value->Int64

    method to->Real64
      return value->Real64

    method description->String
      return value->String

endClass

class CSVScanner
  PROPERTIES
    scanner : Scanner
    builder = StringBuilder()
    row     : Int32
    column  : Int32

  METHODS
    method init( file:File )
      init( Scanner(file) )

    method init( csv:String )
      init( Scanner(csv) )

    method init( scanner )
      noAction

    method scan_table
      row = 0
      column = 0
      while (scanner.has_another)
        scan_row
      endWhile
      on_table

    method on_cell( content:StringBuilder )
      noAction

    method on_row
      noAction

    method on_table
      noAction

    method consume_eol
      scanner.consume( 13 ) # optional
      scanner.consume( 10 )

    method next_is_end_of_cell->Logical
      return (scanner.next_is(',') or next_is_eol)

    method next_is_eol->Logical
      return (scanner.next_is(10) or scanner.next_is(13))

    method scan_row
      local first = true
      while (first or scanner.consume(','))
        first = false
        scan_cell
      endWhile

      consume_eol
      on_row
      ++row
      column = 0

    method scan_cell
      if (scanner.next_is('"')) read_quoted_content
      else                      read_regular_content

      on_cell( builder )
      builder.clear
      ++column

    method read_regular_content
      while (scanner.has_another and not next_is_end_of_cell)
        builder.print( scanner.read )
      endWhile

    method read_quoted_content
      scanner.consume('"')
      while (scanner.has_another)
        if (scanner.consume('"'))
          if (scanner.consume('"'))
            builder.print('"')
          else
            return
          endIf
        else
          scanner.consume( 13 )  # discard CR if CRLF pair
          builder.print( scanner.read )
        endIf
      endWhile
endClass



class CSVParser : CSVScanner
  PROPERTIES
    table       : Spreadsheet
    row_builder = Value.list : Value

  METHODS
    method init( table:Spreadsheet, file:File )
      init( table, Scanner(file) )

    method init( table:Spreadsheet, csv:String )
      init( table, Scanner(csv) )

    method init( table, scanner:Scanner )
      init( scanner )
      scan_table

    method on_cell( content:StringBuilder ) [override]
      row_builder.add( Value(content->String) )

    method on_row [override]
      table.add_row( row_builder )
      row_builder.clear
endClass

