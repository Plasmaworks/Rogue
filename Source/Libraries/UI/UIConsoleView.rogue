module UI

uses UI [export]

$include UI/UIConsoleFont
$include UI/UIConsoleCanvas

class UIConsoleView : UIView
  GLOBAL PROPERTIES
    #{
    bold_font      : UIConsoleFont
    inverse_font   : UIConsoleFont
    underline_font : UIConsoleFont
    }#

  PROPERTIES
    last_update_ms : Int32
    mouse_position : XY?
    button_pressed = Dim<<Logical>>(2)
    is_running     : Logical

  METHODS
    method init
      prior.init( Console.size )

    method init( size:XY )
      prior.init( size )

      #{
    method init_object
      if (not bold_font)
        bold_font = default_font.cloned.[ bold=true ]
        inverse_font = default_font.cloned.[ inverse=true ]
        underline_font = default_font.cloned.[ underline=true ]
      endIf
      }#

    method default_font->UIConsoleFont
      return UIConsoleFont

    method draw
      prior.draw
      UIConsoleCanvas.display(0,0)
      #Console.set_cursor( 0, bounds.y2 )

      #{
    method handle( e:PointerEvent )
      if (mouse_position.exists) e.delta = e.position - mouse_position.value
      mouse_position = e.position
      prior.handle( e )

    method handle( type:Int32, index:Int32, e:ConsoleEvent )
      # Only called when e is a pointer or scroll event
      local pos = XY( e.x, e.y )
      Pointer.position = pos
      Pointer.positions.[clear].add( pos )
      handle( PointerEvent(type,pos,XY(0,0),index) )
      }#

    method on_draw [override]
      UIConsoleCanvas.resize( placement.size.x, placement.size.y )
      UIConsoleCanvas.fill( '.' )

      #{
    method on_resize
      Console.clear
      UIConsoleCanvas.resize( placement.size.x, placement.size.y )
      prior.on_resize
      }#

      #{
    method on_update
      loop 512
        if (Console.immediate_mode and Console.has_another_event)
          local event = Console.read_event
          which (event.type)
            case ConsoleEventType.CHARACTER
              local unicode = event.unicode
              local (keycode,is_shifted) = Keycode.unicode_to_keycode( unicode )
              local syscode            = which{ keycode==Keycode.UNICODE:unicode->Int32 || 0 }
              local modifier_key_state = which{ is_shifted:Keyboard.SHIFT_MODIFIER_FLAG || 0 }
              Keyboard.key_pressed[ keycode ] = true
              Keyboard.key_pressed[ Keycode.LEFT_SHIFT ]  = is_shifted
              Keyboard.key_pressed[ Keycode.RIGHT_SHIFT ] = is_shifted
              handle( KeyEvent(keycode,syscode,&is_press,&!is_repeat,&=modifier_key_state) )
              Keyboard.key_pressed[ keycode ] = false
              Keyboard.key_pressed[ Keycode.LEFT_SHIFT ]  = false
              Keyboard.key_pressed[ Keycode.RIGHT_SHIFT ] = false
              handle( KeyEvent(keycode,syscode,&!is_press,&!is_repeat,&=modifier_key_state) )
              handle( TextEvent(unicode,null) )

            case ConsoleEventType.POINTER_PRESS_LEFT
              send_release_event( PointerEvent.RIGHT, event )
              button_pressed[ PointerEvent.LEFT ] = true
              handle( PointerEvent.PRESS, PointerEvent.LEFT, event )

            case ConsoleEventType.POINTER_PRESS_RIGHT
              send_release_event( PointerEvent.LEFT, event )
              button_pressed[ PointerEvent.RIGHT ] = true
              handle( PointerEvent.PRESS, PointerEvent.RIGHT, event )

            case ConsoleEventType.POINTER_RELEASE
              send_release_event( PointerEvent.LEFT, event )
              send_release_event( PointerEvent.RIGHT, event )

            case ConsoleEventType.POINTER_MOVE
              handle( PointerEvent.MOVE, 0, event )

            case ConsoleEventType.SCROLL_UP
              handle( ScrollEvent(XY(0,-1)) )

            case ConsoleEventType.SCROLL_DOWN
              handle( ScrollEvent(XY(0, 1)) )

          endWhich
        else
          escapeLoop
        endIf
      endLoop
      }#

      #{
    method run
      System.sleep(0.2)  # helps prevent initial screen corruption
      Console.immediate_mode = true
      Console.cursor.hide
      Console.clear

      try
        is_running = true
        while (is_running)
          update( Box(Console.width,Console.height) )
          draw

          # If it needs a redraw right after drawing then we're animating
          if (dirty_bounds) System.sleep( 1.0/60.0 )
          else              System.sleep( 0.1 )
        endWhile

        Console.immediate_mode = false
        Console.cursor.show

      catch (error:Error)
        Console.immediate_mode = false
        Console.cursor.show
        Console.clear
        println error
      endTry
      }#

      #{
    method send_release_event( index:Int32, event:ConsoleEvent )
      if (not button_pressed[index]) return
      button_pressed[index] = false
      handle( PointerEvent.RELEASE, index, event )
      }#

    method set_clip( @clip )
      UIConsoleCanvas.clip = @clip

    method update
      local cur_ms = System.execution_time_ms
      dt = ((cur_ms - last_update_ms) / 1000.0).clamped_high(1.0)
      last_update_ms = cur_ms

      prior.update
endClass
