library UI

$include Entity
$include UI/Event
$include UI/LayoutMode
$include UI/ParameterNames
$include UI/UIBorder
$include UI/UIComponent
$include UI/UIComponentSizeInfo
$include UI/UIFont
$include UI/UIMetaComponent
$include UI/UIHBox
$include UI/UIHFlow
$include UI/UIText
$include UI/UITextBox
$include UI/UITextStyle
$include UI/UIVBox

class UI : UIComponent [singleton]
  PROPERTIES
    default_font   : UIFont

    clip           : Box?

    pointer_focus  : UIComponent
    keyboard_focus : UIComponent

    parameters     : Variant

    needs_layout   = true
    needs_redraw   = true

  METHODS
    method init_object
      UI = this

    method draw [override]
      temporarily UI = this
        prior.draw
      endTemporarily

    method font->UIFont
      return default_font

    method handle( e:KeyEvent )
      temporarily UI = this
        on( e )
        if (e.is_consumed) return

        if (keyboard_focus)
          if (not keyboard_focus.attributes.hidden and not keyboard_focus.attributes.input_disabled)
            keyboard_focus.handle( e )
          else
            keyboard_focus.release_keyboard_focus
            first_child_component?.dispatch( e )
          endIf
        else
          first_child_component?.dispatch( e )
        endIf
        if (e.is_consumed) return

        on_end( e )
      endTemporarily

    method handle( e:PointerEvent )
      temporarily UI = this
        UI = this

        on( e )
        if (e.is_consumed) return

        if (pointer_focus)
          if (not pointer_focus.attributes.hidden and not pointer_focus.attributes.input_disabled)
            pointer_focus.handle( e )
          else
            pointer_focus.release_pointer_focus
            first_child_component?.dispatch( e )
          endIf
        else
          first_child_component?.dispatch( e )
        endIf
        if (e.is_consumed) return

        on_end( e )
      endTemporarily

    method handle( e:ScrollEvent )
      temporarily UI = this
        UI = this

        on( e )
        if (e.is_consumed) return

        if (pointer_focus)
          pointer_focus.handle( e )
        else
          first_child_component?.dispatch( e )
        endIf
        if (e.is_consumed) return

        on_end( e )
      endTemporarily

    method handle( e:TextEvent )
      temporarily UI = this
        UI = this

        on( e )
        if (e.is_consumed) return

        if (keyboard_focus)
          keyboard_focus.handle( e )
        else
          first_child_component?.dispatch( e )
        endIf
        if (e.is_consumed) return

        on_end( e )
      endTemporarily

    method set_clip( @clip )
      noAction

    method update( bounds:Box )
      temporarily UI = this
        update_layout( bounds )
        update
      endTemporarily

    method update_layout( bounds:Box )
      temporarily UI = this
        position = bounds.position
        update_size
        resolve_layout_size( bounds.size )
        perform_layout( position )
      endTemporarily

endClass
