module UI

$macro UI_DYNAMIC_PROPERTY<<$name,$Type,$default_value,$ComponentType>>
  augment
    METHODS
      method UIComponent.$name->$Type
        return UIDynamicProperties.$name( this )

      method UIComponent.$id(has_,$name)->Logical
        return UIDynamicProperties.$id(has_,$name)( this )

      method UIComponent.$id(set_,$name)( value:$Type )
        UIDynamicProperties.$id(set_,$name)( this, value )

      method UIDynamicProperties.$name( component:UIComponent )->$Type
        if (component.properties) return component.properties.$name
        else                      return $default_value

      method UIDynamicProperties.$id(has_,$name)( component:UIComponent )->Logical
        if (component.properties) return component.properties.$id(has_,$name)
        else                      return false

      method UIDynamicProperties.$id(set_,$name)( component:UIComponent, value:$Type )
        if (component.properties) component.properties.$id(set_,$name)( value )
        else                      component.properties = $ComponentType( value )

      method UIDynamicProperty.$name->$Type
        if (next) return next.$name
        return $default_value

      method UIDynamicProperty.$id(has_,$name)->Logical
        if (next) return next.$id(has_,$name)
        else      return false

      method UIDynamicProperty.$id(set_,$name)( value:$Type )
        if (next) next.$id(set_,$name)( value )
        else      next = $ComponentType( value )
  endAugment

  class $ComponentType( value:$Type ) : UIDynamicProperty
    METHODS
      method $name->$Type
        return value

      method $id(has_,$name)->Logical
        return true

      method $id(set_,$name)( value )
  endClass
$endMacro

$macro UI_INHERITED_DYNAMIC_PROPERTY<<$name,$Type,$default_value,$ComponentType>>
  augment
    METHODS
      method UIComponent.$name->$Type
        return UIDynamicProperties.$name( this )

      method UIComponent.$id(set_,$name)( value:$Type )
        UIDynamicProperties.$id(set_,$name)( this, value )

      method UIDynamicProperties.$name( component:UIComponent )->$Type
        if (component.properties)
          local result = component.properties.$name
          if (result) return result.value
        endIf
        if (component.parent) return component.parent.$name
        return $default_value

      method UIDynamicProperties.$id(set_,$name)( component:UIComponent, value:$Type )
        if (component.properties) component.properties.$id(set_,$name)( value )
        else                      component.properties = $ComponentType( value )

      method UIDynamicProperty.$name->$Type?
        if (next) return next.$name
        return null

      method UIDynamicProperty.$id(set_,$name)( value:$Type )
        if (next) next.$id(set_,$name)( value )
        else      next = $ComponentType( value )
  endAugment

  class $ComponentType( value:$Type ) : UIDynamicProperty
    METHODS
      method $name->$Type?
        return value

      method $id(set_,$name)( value )
  endClass
$endMacro

$macro UI_FN_DYNAMIC_PROPERTY<<$name,$Type,$ComponentType>>
  augment
    METHODS
      method UIComponent.$name( callback:$Type )
        UIDynamicProperties.$id(set_,$name)( this, callback )

      method UIDynamicProperties.$name( component:UIComponent )
        if (component.properties) component.properties.$name(component)

      method UIDynamicProperties.$id(set_,$name)( component:UIComponent, fn:$Type )
        if (component.properties) component.properties.$id(set_,$name)( fn )
        else                      component.properties = $ComponentType( fn )

      method UIDynamicProperty.$name( component:UIComponent )
        if (next) next.$name( component )

      method UIDynamicProperty.$id(set_,$name)( fn:$Type )
        if (next) next.$id(set_,$name)( fn )
        else      next = $ComponentType( fn )
  endAugment

  class $ComponentType( fn:$Type ) : UIDynamicProperty
    METHODS
      method $name( component:UIComponent )
        if (fn) fn( component )

      method $id(set_,$name)( fn )
  endClass
$endMacro

class UIDynamicProperties [singleton]
  METHODS
endClass

class UIDynamicProperty
  PROPERTIES
    next : UIDynamicProperty

  METHODS
endClass

