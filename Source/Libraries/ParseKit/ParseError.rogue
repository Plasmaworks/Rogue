module ParseKit<<$Language>>
uses $Language

class ParseError( filepath:String, source:String, line:Int32, column:Int32, message ) : Error
  METHODS
    method init( message )

    method init( filepath, message )

    method init( t:Token, message )
      filepath = t.filepath
      line = t.line
      column = t.column
      source = t.source

    method description->String
      use builder = StringBuilder.pool
        if (filepath)
          builder.print( filepath )
          if (line)
            builder.print( ':' ).print( line ).print( ':' ).print( column )
          endIf
          builder.print( ' ' )
        endIf

        # Lowercase keeps it compatible with generic C/C++ error messages which can be useful to IDEs
        builder.print( "error: " ).print( message )

        if (line and column and source)
          builder.println.println
          forEach (line at index in LineReader(source))
            if (index+1 == this.line)
              builder.println( line )
              escapeForEach
            endIf
          endForEach
          builder.print( " " * (column-1) ).println( '^' )
        endIf

        return builder->String
      endUse
endClass

