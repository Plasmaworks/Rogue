$macro component<<$Name>> component<<$thisModule,$Name,$id($lowercase($Name))>>

$macro component<<$Name,$property_name>> component<<$thisModule,$Name,$property_name>>

$macro component<<$Module,$Name,$property_name>>
NATIVE_POINTER_TYPE<<$id($Module $Name Pointer),$string($Module $Name "*")>>

augment ECS::ComponentManager<<$Module::$Name>>
  METHODS
    method pointer( entity:ECS::Entity )->$id($Module $Name Pointer)
      local entry = entity_to_index.find( entity.id )
      if (entry)
        return native($string("(" $Module $Name Pointer ")" "{((" $Module $Name "*)$components->as_void)+$entry->value}"))->$id($Module $Name Pointer)
      else
        return $id($Module $Name Pointer)
      endIf
endAugment


augment ECS::Entity
  METHODS
    method $id(has_ $property_name)->Logical
      return ECS::ComponentManager<<$Module::$Name>>.incorporated_by( this )

    method $property_name->$Module::$Name
      return ECS::ComponentManager<<$Module::$Name>>[ this ]

    method $id($property_name _pointer)->$id($Module $Name Pointer)
      return ECS::ComponentManager<<$Module::$Name>>.pointer( this )

    method $id(remove_ $property_name)
      ECS::ComponentManager<<$Module::$Name>>.remove_from( this )

    method $id(set_ $property_name)( new_value:$Module::$Name )
      ECS::ComponentManager<<$Module::$Name>>[ this ] = new_value
endAugment


class $Name : ValueComponent [compound]
  GLOBAL PROPERTIES
    type_id = ComponentTypeID<<$Name>>.value : ComponentSignature
$endMacro

$define endComponent endClass


$macro refComponent<<$Name>> refComponent<<$thisModule,$Name,$id($lowercase($Name))>>

$macro refComponent<<$Name,$property_name>> refComponent<<$thisModule,$Name,$property_name>>

$macro refComponent<<$Module,$Name,$property_name>>

augment ECS::Entity
  METHODS
    method $id(has_ $property_name)->Logical
      return ECS::ComponentManager<<$Module::$Name>>.incorporated_by( this )

    method $property_name->$Module::$Name
      return ECS::ComponentManager<<$Module::$Name>>[ this ]

    method $id(remove_ $property_name)
      ECS::ComponentManager<<$Module::$Name>>.remove_from( this )

    method $id(set_ $property_name)( new_value:$Module::$Name )
      ECS::ComponentManager<<$Module::$Name>>[ this ] = new_value
endAugment


class $Name : RefComponent
  GLOBAL PROPERTIES
    type_id = ComponentTypeID<<$Name>>.value : ComponentSignature
$endMacro

$define endRefComponent endClass

