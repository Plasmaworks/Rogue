module Entity

# This $include must be first
$include Entity/EntityMacros

$include Entity/Actor2D
$include Entity/Component
$include Entity/Constraint

uses Collection/Node
uses Geometry

class Entity : Node<<Entity>>
  ENTITY_ATTRIBUTE<< NEEDS_LAYOUT, needs_layout, (1:<<:0) >>
  ENTITY_ATTRIBUTE<< NEEDS_REDRAW, needs_redraw, (1:<<:1) >>
  ENTITY_ATTRIBUTE<< HIDDEN,       is_hidden,    (1:<<:2) >>  # neither visible, updated, nor drawn
  ENTITY_ATTRIBUTE<< GHOST,        ghost,        (1:<<:3) >>  # visible, updated, & drawn but does not receive input events
  ENTITY_ATTRIBUTE<< DEAD,         dead,         (1:<<:4) >>  # will be removed from the entity graph at the next opportunity

  PROPERTIES
    attributes  : Int32
    components  : Component

  METHODS
    method init

    #method init( size )

    #method init( position, size )

    method add( component:Component )
      component.entity = this
      component.next = components
      components = component

    method after_draw
      noAction

      #{
    method bounds
      return Box( position, size )
      }#

    method collect<<$ComponentType>>( list:$ComponentType[] )->Int32
      local n = 0

      local this_component = components
      while (this_component)
        if local matching_component = this_component->(as $ComponentType)
          list.add( matching_component )
          ++n
          escapeWhile
        endIf
        this_component .= next
      endWhile

      n += (forEach in children).collect<<$ComponentType>>(list)
      return n

    method component<<$ComponentType>>->$ComponentType
      local result = components
      while (result)
        if local result = result->(as $ComponentType)
          return result
        endIf
        result .= next
      endWhile

      #{
    method display_bounds->Box
      if (parent) return Box( parent.display_bounds.position, size ).relative_to( anchor )
      return Box( position, size ).relative_to( anchor )

    method draw
      draw( display_bounds )

    method draw( clip_bounds:Box )
      on_draw
      after_draw

    method on_draw
      noAction
      }#

endClass
