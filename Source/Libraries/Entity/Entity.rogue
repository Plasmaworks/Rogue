uses Collection/Node
uses Control/Action
uses Geometry
uses Math/Quaternion

$include Entity/EntityAttributes

class Entity : Node<<Entity>>
  PROPERTIES
    name       : String
    id         : Int
    attributes : EntityAttributes
    actions    : Action
    position   : XYZ
    size       : XYZ
    scale      = XYZ(1,1,1)
    rotation   = Quaternion()
    anchor     = Anchor.CENTER : Anchor

  METHODS
    method init
      noAction

    method init( name )
      noAction

    method init_object
      id = next_id
      ++next_id

    #method on_draw
    #  noAction

    method on_update
      noAction

    method set_position( @position )
      noAction

    method set_position( pos:XY )
      @position = XYZ( pos, @position.z )

    method set_rotation( @rotation )
      noAction

    method set_rotation( z:Radians )
      local radians = rotation->RadiansXYZ
      radians.z = z
      rotation = Quaternion( radians )

    method set_scale( @scale )
      noAction

    method set_scale( s:XY )
      @scale = XYZ( s, @scale.z )

    method set_size( @size )
      noAction

    method set_size( sz:XY )
      @size = XYZ( sz, @size.z )

    method to->String
      if (@name) return @name
      else       return type_name

    method update
      actions = actions?.updated
      on_update

  GLOBAL PROPERTIES
    next_id = 1

endClass
