module Entity

# This $include must be first
$include Entity/EntityMacros

$include Entity/Drawable2D

uses Collection/Node
uses Control/Action  [export]
uses Geometry        [export]

class Entity : Node<<Entity>>
  ENTITY_ATTRIBUTE<< NEEDS_LAYOUT, needs_layout, (1:<<:0) >>
  ENTITY_ATTRIBUTE<< NEEDS_REDRAW, needs_redraw, (1:<<:1) >>
  ENTITY_ATTRIBUTE<< DEAD,         is_dead,      (1:<<:2) >>  # Will be removed from the entity graph and destroy()ed

  PROPERTIES
    attributes  : Int32
    actions     : Action

  METHODS
    method init

    #method init( size )

    #method init( position, size )

    method after_draw
      noAction

    method after_update
      noAction

      #{
    method bounds
      return Box( position, size )
      }#

      #{
    method display_bounds->Box
      if (parent) return Box( parent.display_bounds.position, size ).relative_to( anchor )
      return Box( position, size ).relative_to( anchor )

    method draw
      draw( display_bounds )

    method draw( clip_bounds:Box )
      on_draw
      after_draw
    }#

    method handle_dead_entities
      if (is_dead)
        (forEach in children).is_dead = true
      endIf

      local cur_child = first_child
      while (cur_child)
        local next_child = cur_child.next
        cur_child.handle_dead_entities
        cur_child = next_child
      endWhile

      if (is_dead)
        detach
        on_destroy
      endIf

    method on_destroy

      #{
    method on_draw
      noAction
      }#

    method on_update
      noAction

    method update
      on_update

      (forEach in children).update

      after_update

      if (actions) actions .= update


endClass
