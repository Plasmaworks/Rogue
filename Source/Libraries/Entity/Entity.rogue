module Entity

# This $include must be first
$include Entity/EntityMacros

$include Entity/Drawable2D
$include Entity/EntityCollector
$include Entity/UIComponent
$include Entity/UILayout
$include Entity/UIView

uses Collection/Node
uses Control/Action  [export]
uses Geometry        [export]

class Entity : Node<<Entity>>
  ENTITY_ATTRIBUTE<< NEEDS_LAYOUT, needs_layout, (1:<<:0) >>
  ENTITY_ATTRIBUTE<< NEEDS_REDRAW, needs_redraw, (1:<<:1) >>
  ENTITY_ATTRIBUTE<< DEAD,         is_dead,      (1:<<:2) >>  # Will be removed from the entity graph and destroy()ed

  PROPERTIES
    attributes  : Int32
    actions     : Action

  METHODS
    method init

    #method init( size )

    #method init( position, size )

    method after_update
      noAction

    method collect<<$EntityType>>( &for_layout )->EntityCollector<<$EntityType>>
      # Returns an EntityCollector that can be 'use'd to obtain a list
      # of all descendent entities that are instanceOf $EntityType.
      #
      # Parents will be placed in the list ahead of children.
      #
      # for_layout
      #   If true, entities that are instanceOf UILayout are not recursed into.
      #
      # USAGE e.g.
      #   use drawables = view.collect<<Drawable2D>>
      #     forEach (drawable in drawables) ...
      #   endUse
      return EntityCollector<<$EntityType>>( this, &=for_layout )

    method collect<<$EntityType>>( list:$EntityType[], &for_layout )
      forEach (child in children)
        if local child = child->(as $EntityType)
          list.add( child )
        endIf
        if (for_layout and child not instanceOf UILayout) child.collect<<$EntityType>>( list, &for_layout )
      endForEach

    method destroy_dead_entities
      if (is_dead)
        (forEach in children).is_dead = true
      endIf

      local cur_child = first_child
      while (cur_child)
        local next_child = cur_child.next
        cur_child.destroy_dead_entities
        cur_child = next_child
      endWhile

      if (is_dead)
        detach
        on_destroy
      endIf

    method on_destroy

    method on_update
      noAction

    method update
      on_update

      (forEach in children).update

      after_update

      if (actions) actions .= update

      destroy_dead_entities

endClass
