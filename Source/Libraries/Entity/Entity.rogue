module Entity

# These two macro $includes must come first
$include Entity/EntityMacros
$include Entity/DynamicProperty

$include Entity/ConditionalEntityCollector
$include Entity/DirtyRegionTracker
$include Entity/Drawable2D
$include Entity/EntityCollector
$include Entity/Placement2D
$include Entity/UIComponent
$include Entity/UILayout
$include Entity/UIView

uses Collection/Node
uses Control/Action  [export]
uses Geometry        [export]

class Entity : Node<<Entity>>
  ENTITY_ATTRIBUTE<< NEEDS_LAYOUT,   needs_layout,   (1:<<:0) >>
  ENTITY_ATTRIBUTE<< NEEDS_REDRAW,   needs_redraw,   (1:<<:1) >>
  ENTITY_ATTRIBUTE<< INITIALIZED,    initialized,    (1:<<:2) >>  # on_init() has been called
  ENTITY_ATTRIBUTE<< DEAD,           is_dead,        (1:<<:3) >>  # Will be removed from the entity graph and destroy()ed
  ENTITY_ATTRIBUTE<< HIDDEN,         is_hidden,      (1:<<:4) >>  # not visible, not updated, no events sent
  ENTITY_ATTRIBUTE<< INPUT_DISABLED, input_disabled, (1:<<:5) >>

  ENTITY_ATTRIBUTE<< FIXED_WIDTH,          is_fixed_width,          (1:<<:6) >>
  ENTITY_ATTRIBUTE<< FIXED_HEIGHT,         is_fixed_height,         (1:<<:7) >>
  ENTITY_ATTRIBUTE<< SHRINK_TO_FIT_WIDTH,  is_shrink_to_fit_width,  (1:<<:8) >>
  ENTITY_ATTRIBUTE<< SHRINK_TO_FIT_HEIGHT, is_shrink_to_fit_height, (1:<<:9) >>

  DEFINITIONS
    WIDTH_MASK  = (FIXED_WIDTH  | SHRINK_TO_FIT_WIDTH)
    HEIGHT_MASK = (FIXED_HEIGHT | SHRINK_TO_FIT_HEIGHT)
    SIZE_MASK   = (WIDTH_MASK   | HEIGHT_MASK)

  PROPERTIES
    name        : String
    attributes  : Int32
    actions     : Action
    properties  : DynamicProperty

  METHODS
    method init
      if (not initialized)
        # An overridden init() could have already called on_init()
        initialized = true
        on_init
      endIf

    method after_update
      noAction

    method collect<<$EntityType>>->EntityCollector<<$EntityType>>
      # Returns an EntityCollector that can be 'use'd to obtain a list
      # of all descendent entities that are instanceOf $EntityType.
      #
      # Parents will be placed in the list ahead of children.
      #
      # Entities that are instanceOf UILayout are collected but are not recursed into.
      #
      # USAGE e.g.
      #   use drawables = view.collect<<Drawable2D>>
      #     forEach (drawable in drawables) ...
      #   endUse
      return EntityCollector<<$EntityType>>( this )

    method collect<<$EntityType>>( condition:Function($EntityType)->Logical )->ConditionalEntityCollector<<$EntityType>>
      return ConditionalEntityCollector<<$EntityType>>( this, condition )

    method collect_children<<$EntityType>>( list:$EntityType[], &all )
      forEach (child in children)
        if local child = child->(as $EntityType)
          list.add( child )
        endIf
        if (all or child not instanceOf UILayout) child.collect_children<<$EntityType>>( list, &=all )
      endForEach

    method collect_children<<$EntityType>>( list:$EntityType[], condition:Function($EntityType)->Logical, &all )
      forEach (child in children)
        if local child = child->(as $EntityType)
          if (condition(child)) list.add( child )
        endIf
        if (all or child not instanceOf UILayout) child.collect_children<<$EntityType>>( list, condition, &=all )
      endForEach

    method destroy
      (forEach in children).destroy
      detach
      on_destroy

    method get( name:String )->Entity
      forEach (child in children)
        if (child.name == name) return child
      endForEach
      return null

    method name->String
      if (@name) return @name
      return type_name

    method on_destroy

    method on_init
      noAction

    method on_update
      noAction

    method update
      if (not initialized)
        initialized = true
        on_init
      endIf

      if (is_dead)
        destroy
        return
      endIf

      on_update

      (forEach in children).update

      after_update

      if (actions) actions .= update

endClass
