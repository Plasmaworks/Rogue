module Entity

ENTITY_CALLBACK_PROPERTY<< Drawable2D, on_resize, Function(Drawable2D), ResizeCallbackAttribute >>

class Drawable2D : Entity
  PROPERTIES
    position       : XY
    draw_order     : Int32
    placement      : Placement2D
    last_placement : Placement2D  # for dirty rectangle tracking

  METHODS
    method init
      prior.init

    method init( size:XY )
      placement.size = size

    method init( content:Entity )
      prior.init( content )

    method after_draw
      noAction

    method after_prepare_layout
      noAction

    method after_resize
      noAction

    method after_update_layout
      noAction

    method bounds->Box
      return Box( position, placement.size )

    method clip->Box?
      return UIView.clip

    method display_bounds->Box
      return Box( placement.display_position, placement.size )

    method display_position->XY
      return placement.display_position

    method draw
      needs_redraw = false
      if (clip_content)
        temporarily clip = display_bounds
          on_draw
          draw_children
          after_draw
        endTemporarily
      else
        on_draw
        draw_children
        after_draw
      endIf

    method draw_children
      # Overridden in UILayout.
      #
      # Each UILayout (including UIView) manages drawing all of its descendants down to and including
      # other UILayout objects but not descending into them. In other words, each UILayout draws its
      # own descendants.
      noAction

    method needs_redraw->Logical [override]
      if (prior.needs_redraw) return true
      if (placement != last_placement) return true
      return false

    method on_prepare_layout
      noAction

    method on_resize
      noAction

    method on_draw
      noAction

    method on_update_layout
      noAction

    method parent_drawable->Drawable2D
      localize parent
      while (parent)
        if local parent_drawable = parent->(as Drawable2D)
          return parent_drawable
        endIf
        parent .= parent
      endWhile
      return null

    method request_layout
      localize parent_drawable
      if (parent_drawable) parent_drawable.request_layout
      else                 needs_layout = true

    method request_redraw
      needs_redraw = true

    method save_display_state
      last_placement = placement

    method set_anchor( value:Anchor )
      placement.anchor = value

    method set_bounds( bounds:Box )
      position = bounds.position
      placement.size = bounds.size

    method set_clip( clip_bounds:Box? )
      UIView.clip = clip_bounds

    method set_draw_order( new_draw_order:Int32 )
      if (new_draw_order != @draw_order)
        @draw_order = new_draw_order
        needs_redraw = true
      endIf

    method set_height( value:Int32 )
      placement.size = XY( placement.size.x, value )

    method set_rotation( value:Radians )
      placement.rotation = XYZ( placement.rotation.x, placement.rotation.y, value )

    method set_rotation( value:XYZ )
      placement.rotation = value

    method set_size( value:XY )
      placement.size = value
      is_fixed_size = true

    method set_width( value:Int32 )
      placement.size = XY( value, placement.size.y )

    method size->XY
      return placement.size

    method update( bounds:Box )
      if (this.bounds != bounds)
        this.bounds = bounds
        request_layout
      endIf

      update

    method update_display_state
      local pos = position
      if local parent = parent_drawable
        pos += parent.placement.display_position
      endIf
      placement.display_position = pos
      #Epilog.println "$ update display state pos:$"(type_name,pos)

endClass
