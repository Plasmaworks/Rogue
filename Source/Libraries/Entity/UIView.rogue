module Entity

uses Utility/Epilog

class UIView : UILayout [singleton]
  PROPERTIES
    dirty_region_tracker = SimpleDirtyRegionTracker() : DirtyRegionTracker
    clip : Box?

  METHODS
    method clip->Box?
      return @clip

    method dirty_region_tracker->DirtyRegionTracker
      if (@dirty_region_tracker) return @dirty_region_tracker
      dirty_region_tracker = SimpleDirtyRegionTracker()
      return @dirty_region_tracker

    method draw
      update_display_state

      use drawables = collect<<Drawable2D>>( (drawable) => return drawable.needs_redraw, &all )
        dirty_region_tracker.add( forEach in drawables )
      endUse

      use dirty_regions = dirty_region_tracker
        if (dirty_regions.count)
          on_draw

          dirty_region_tracker.clear

          use drawables = collect<<Drawable2D>>
            drawables.sort( $1.draw_order < $2.draw_order )

            forEach (dirty_region in dirty_regions)
              temporarily clip = dirty_region
                (forEach in drawables).draw
              endTemporarily
            endForEach

            (forEach in drawables).save_display_state
          endUse

          after_draw
        endIf
      endUse

    method request_redraw( bounds:Box )
      dirty_region_tracker.add( bounds )

    method set_bounds( value:Box )
      localize bounds
      if (value == bounds) return

      dirty_region_tracker.add( bounds )
      prior.set_bounds( value )
      dirty_region_tracker.add( value )

      needs_layout = true

      on_resize

      use drawables = collect<<Drawable2D>>
        (forEach in drawables).on_resize
        DynamicProperties.on_resize( forEach in drawables )
        (forEach in drawables).after_resize
      endUse

      after_resize

    method set_clip( clip_bounds:Box? )
      @clip = clip_bounds

    method update
      # Must update before layout so that new components created in update() can be
      # measured in update_layout()
      prior.update
      update_layout

    method update_display_state
      prior.update_display_state

      use drawables = collect<<Drawable2D>>( &all )
        (forEach in drawables).update_display_state
      endUse

    method update_layout
      needs_layout = false

      local og_size = placement.size

      use drawables = collect<<UIComponent>>( &all )
        on_prepare_layout
        (forEach in drawables).on_prepare_layout
        (forEach in drawables).after_prepare_layout
        after_prepare_layout

        on_update_layout
        (forEach in drawables).on_update_layout

        update_layout_width( placement.size.x )
        update_layout_height( placement.size.y )
        update_layout_placement( bounds )

        (forEach in drawables).after_update_layout
        after_update_layout
      endUse

      if (placement.size != og_size) request_redraw

    method update_layout( new_bounds:Box )
      bounds = new_bounds
      update_layout

endClass
