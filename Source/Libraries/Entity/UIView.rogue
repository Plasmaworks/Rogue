module Entity

uses Utility/Epilog

class UIView : UILayout
  PROPERTIES
    dirty_region_tracker : DirtyRegionTracker

  METHODS
    method init
      prior.init
      dirty_region_tracker = SimpleDirtyRegionTracker()

    method init( dirty_region_tracker )

    method init( size:XY )
      prior.init( size )
      dirty_region_tracker = SimpleDirtyRegionTracker()

    method draw
      update_placement

      use drawables = collect<<Drawable2D>>( (drawable) => return drawable.needs_redraw )
        dirty_region_tracker.add( forEach in drawables )
      endUse

      use dirty_regions = dirty_region_tracker
        if (dirty_regions.count)
          on_draw

          dirty_region_tracker.clear

          use drawables = collect<<Drawable2D>>
            drawables.sort( $1.draw_order < $2.draw_order )
            forEach (dirty_region in dirty_regions)
              clip = dirty_region
              (forEach in drawables).draw
            endForEach
            clip = null
          endUse

          after_draw
        endIf
      endUse

    method request_redraw( bounds:Box )
      dirty_region_tracker.add( bounds )

    method set_bounds( value:Box )
      localize bounds
      if (value == bounds) return

      dirty_region_tracker.add( bounds )
      prior.set_bounds( value )
      dirty_region_tracker.add( value )

      needs_layout = true

      on_resize

      use drawables = collect<<Drawable2D>>
        (forEach in drawables).on_resize
        #UIDynamicProperties.on_resize( this )
        (forEach in drawables).after_resize
      endUse

      after_resize

    method set_clip( clip:Box? )
      noAction

    method update_placement
      prior.update_placement

      use drawables = collect<<Drawable2D>>
        (forEach in drawables).update_placement
      endUse

    method update( bounds:Box )
      this.bounds = bounds
      update

endClass
