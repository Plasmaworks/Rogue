module Entity

class ComponentIterator<<$ComponentType>>( entity:Entity, next_component:$ComponentType ) [compound]
  GLOBAL METHODS
    method create( entity:Entity )->ComponentIterator<<$ComponentType>>
      forEach (component in entity.components)
        if local matching_component = component->(as $ComponentType)
          return ComponentIterator<<$ComponentType>>( entity, matching_component )
        endIf
      endForEach
      return ComponentIterator<<$ComponentType>>( entity, null )

  METHODS
    method read_another->$ComponentType? [mutating]
      local result = next_component
      if (next_component)
        local component = next_component.next
        while (component)
          if local matching_component = component->(as $ComponentType)
            return component
          endIf
          component .= component
        endWhile
      endIf
      return result
endClass
